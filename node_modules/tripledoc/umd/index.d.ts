import { Literal, BlankNode } from 'rdf-js';
export { BareTripleDocument, LocalTripleDocumentWithRef, LocalTripleDocumentForContainer, TripleDocument, createDocument, createDocumentInContainer, fetchDocument, isSavedToPod, hasRef, } from './document';
export { TripleSubject, } from './subject';
/**
 * Literal values, i.e. values that do not point to other nodes in the Linked Data graph.
 */
export declare type LiteralTypes = string | number | Date;
/**
 * A URL that points to a node in the Linked Data graph.
 */
export declare type Reference = string;
/**
 * @ignore Deprecated.
 * @deprecated Replaced by [[Reference]].
 */
export declare type NodeRef = Reference;
/**
 * @ignore Tripledoc's methods should be explicit about whether they return or accept a Literal, so
 *         this is merely an internal utility function, rather than a public API.
 * @param param A value that might or might not be an N3 Literal.
 * @returns Whether `param` is an N3 Literal.
 */
export declare function isLiteral<T>(param: T | Literal): param is Literal;
/**
 * @ignore Deprecated function.
 * @deprecated Replaced by [[isReference]].
 */
export declare const isNodeRef: typeof isReference;
/**
 * @ignore Tripledoc's methods should be explicit about whether they return or accept a [[Reference]],
 *         so this is merely an internal utility function, rather than a public API.
 * @param param A value that might or might not be a reference to a node in the Linked Data graph.
 * @returns Whether `param` is a reference to a node in the Linked Data graph.
 */
export declare function isReference(value: Reference | BlankNode | Literal): value is Reference;
