import { TripleSubject } from 'tripledoc';

export function getTs(
  entity: TripleSubject,
  namespace: string,
  entityTypes: {[alias: string]: string},
): string {
  const entityType = Object.entries(entityTypes)
    .find(([_alias, type]) => type === entity.getNodeRef('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'));
  const typeAlias = entityType ? entityType[0] : 'string';
  const comment = entity.getLiteral('http://www.w3.org/2000/01/rdf-schema#comment');
  let formattedComment = (typeof comment === 'string') ? comment.replace(/\n/g, '\n * ') : comment;

  let identifier = entity.asNodeRef().substring(namespace.length);
  if (reservedKeywords.includes(identifier)) {
    formattedComment = formattedComment + `\n * Note that \`${identifier}\` is a reserved Javascript keyword, and is therefore suffixed by \`__workaround\`.`;
    formattedComment = formattedComment + '\n * For a list of reserved keywords, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords.';
    identifier =  identifier + '__workaround';
  }

  return `
/**
 * ${entity.getLiteral('http://www.w3.org/2000/01/rdf-schema#label') || ''}
 * 
 * ${formattedComment || ''}
 *
 * ${entity.asNodeRef()}
 */
export const ${identifier}: ${typeAlias} = '${entity.asNodeRef()}';
`;
}

// Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords
const reservedKeywords = [
  'break',
  'case',
  'catch',
  'class',
  'const',
  'continue',
  'debugger',
  'default',
  'delete',
  'do',
  'else',
  'export',
  'extends',
  'finally',
  'for',
  'function',
  'if',
  'import',
  'in',
  'instanceof',
  'new',
  'return',
  'super',
  'switch',
  'this',
  'throw',
  'try',
  'typeof',
  'var',
  'void',
  'while',
  'with',
  'yield',
];