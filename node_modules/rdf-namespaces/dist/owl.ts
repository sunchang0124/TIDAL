type Property = string;
type Class = string;
type Datatype = string;
type OwlClass = string;
type OwlObjectProperty = string;
type OwlDatatypeProperty = string;
type HydraResource = string;
type HydraClass = string;
type HydraLink = string;
type HydraTemplatedLink = string;
type HydraVariableRepresentation = string;

/**
 * allValuesFrom
 * 
 * The property that determines the class that a universal property restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#allValuesFrom
 */
export const allValuesFrom: Property = 'http://www.w3.org/2002/07/owl#allValuesFrom';

/**
 * annotatedProperty
 * 
 * The property that determines the predicate of an annotated axiom or annotated annotation.
 *
 * http://www.w3.org/2002/07/owl#annotatedProperty
 */
export const annotatedProperty: Property = 'http://www.w3.org/2002/07/owl#annotatedProperty';

/**
 * annotatedSource
 * 
 * The property that determines the subject of an annotated axiom or annotated annotation.
 *
 * http://www.w3.org/2002/07/owl#annotatedSource
 */
export const annotatedSource: Property = 'http://www.w3.org/2002/07/owl#annotatedSource';

/**
 * annotatedTarget
 * 
 * The property that determines the object of an annotated axiom or annotated annotation.
 *
 * http://www.w3.org/2002/07/owl#annotatedTarget
 */
export const annotatedTarget: Property = 'http://www.w3.org/2002/07/owl#annotatedTarget';

/**
 * assertionProperty
 * 
 * The property that determines the predicate of a negative property assertion.
 *
 * http://www.w3.org/2002/07/owl#assertionProperty
 */
export const assertionProperty: Property = 'http://www.w3.org/2002/07/owl#assertionProperty';

/**
 * cardinality
 * 
 * The property that determines the cardinality of an exact cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#cardinality
 */
export const cardinality: Property = 'http://www.w3.org/2002/07/owl#cardinality';

/**
 * complementOf
 * 
 * The property that determines that a given class is the complement of another class.
 *
 * http://www.w3.org/2002/07/owl#complementOf
 */
export const complementOf: Property = 'http://www.w3.org/2002/07/owl#complementOf';

/**
 * datatypeComplementOf
 * 
 * The property that determines that a given data range is the complement of another data range with respect to the data domain.
 *
 * http://www.w3.org/2002/07/owl#datatypeComplementOf
 */
export const datatypeComplementOf: Property = 'http://www.w3.org/2002/07/owl#datatypeComplementOf';

/**
 * differentFrom
 * 
 * The property that determines that two given individuals are different.
 *
 * http://www.w3.org/2002/07/owl#differentFrom
 */
export const differentFrom: Property = 'http://www.w3.org/2002/07/owl#differentFrom';

/**
 * disjointUnionOf
 * 
 * The property that determines that a given class is equivalent to the disjoint union of a collection of other classes.
 *
 * http://www.w3.org/2002/07/owl#disjointUnionOf
 */
export const disjointUnionOf: Property = 'http://www.w3.org/2002/07/owl#disjointUnionOf';

/**
 * disjointWith
 * 
 * The property that determines that two given classes are disjoint.
 *
 * http://www.w3.org/2002/07/owl#disjointWith
 */
export const disjointWith: Property = 'http://www.w3.org/2002/07/owl#disjointWith';

/**
 * distinctMembers
 * 
 * The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.
 *
 * http://www.w3.org/2002/07/owl#distinctMembers
 */
export const distinctMembers: Property = 'http://www.w3.org/2002/07/owl#distinctMembers';

/**
 * equivalentClass
 * 
 * The property that determines that two given classes are equivalent, and that is used to specify datatype definitions.
 *
 * http://www.w3.org/2002/07/owl#equivalentClass
 */
export const equivalentClass: Property = 'http://www.w3.org/2002/07/owl#equivalentClass';

/**
 * equivalentProperty
 * 
 * The property that determines that two given properties are equivalent.
 *
 * http://www.w3.org/2002/07/owl#equivalentProperty
 */
export const equivalentProperty: Property = 'http://www.w3.org/2002/07/owl#equivalentProperty';

/**
 * hasKey
 * 
 * The property that determines the collection of properties that jointly build a key.
 *
 * http://www.w3.org/2002/07/owl#hasKey
 */
export const hasKey: Property = 'http://www.w3.org/2002/07/owl#hasKey';

/**
 * hasSelf
 * 
 * The property that determines the property that a self restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#hasSelf
 */
export const hasSelf: Property = 'http://www.w3.org/2002/07/owl#hasSelf';

/**
 * hasValue
 * 
 * The property that determines the individual that a has-value restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#hasValue
 */
export const hasValue: Property = 'http://www.w3.org/2002/07/owl#hasValue';

/**
 * intersectionOf
 * 
 * The property that determines the collection of classes or data ranges that build an intersection.
 *
 * http://www.w3.org/2002/07/owl#intersectionOf
 */
export const intersectionOf: Property = 'http://www.w3.org/2002/07/owl#intersectionOf';

/**
 * inverseOf
 * 
 * The property that determines that two given properties are inverse.
 *
 * http://www.w3.org/2002/07/owl#inverseOf
 */
export const inverseOf: Property = 'http://www.w3.org/2002/07/owl#inverseOf';

/**
 * maxCardinality
 * 
 * The property that determines the cardinality of a maximum cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#maxCardinality
 */
export const maxCardinality: Property = 'http://www.w3.org/2002/07/owl#maxCardinality';

/**
 * maxQualifiedCardinality
 * 
 * The property that determines the cardinality of a maximum qualified cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#maxQualifiedCardinality
 */
export const maxQualifiedCardinality: Property = 'http://www.w3.org/2002/07/owl#maxQualifiedCardinality';

/**
 * members
 * 
 * The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
 *
 * http://www.w3.org/2002/07/owl#members
 */
export const members: Property = 'http://www.w3.org/2002/07/owl#members';

/**
 * minCardinality
 * 
 * The property that determines the cardinality of a minimum cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#minCardinality
 */
export const minCardinality: Property = 'http://www.w3.org/2002/07/owl#minCardinality';

/**
 * minQualifiedCardinality
 * 
 * The property that determines the cardinality of a minimum qualified cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#minQualifiedCardinality
 */
export const minQualifiedCardinality: Property = 'http://www.w3.org/2002/07/owl#minQualifiedCardinality';

/**
 * onClass
 * 
 * The property that determines the class that a qualified object cardinality restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#onClass
 */
export const onClass: Property = 'http://www.w3.org/2002/07/owl#onClass';

/**
 * onDataRange
 * 
 * The property that determines the data range that a qualified data cardinality restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#onDataRange
 */
export const onDataRange: Property = 'http://www.w3.org/2002/07/owl#onDataRange';

/**
 * onDatatype
 * 
 * The property that determines the datatype that a datatype restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#onDatatype
 */
export const onDatatype: Property = 'http://www.w3.org/2002/07/owl#onDatatype';

/**
 * oneOf
 * 
 * The property that determines the collection of individuals or data values that build an enumeration.
 *
 * http://www.w3.org/2002/07/owl#oneOf
 */
export const oneOf: Property = 'http://www.w3.org/2002/07/owl#oneOf';

/**
 * onProperties
 * 
 * The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to.
 *
 * http://www.w3.org/2002/07/owl#onProperties
 */
export const onProperties: Property = 'http://www.w3.org/2002/07/owl#onProperties';

/**
 * onProperty
 * 
 * The property that determines the property that a property restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#onProperty
 */
export const onProperty: Property = 'http://www.w3.org/2002/07/owl#onProperty';

/**
 * propertyChainAxiom
 * 
 * The property that determines the n-tuple of properties that build a sub property chain of a given property.
 *
 * http://www.w3.org/2002/07/owl#propertyChainAxiom
 */
export const propertyChainAxiom: Property = 'http://www.w3.org/2002/07/owl#propertyChainAxiom';

/**
 * propertyDisjointWith
 * 
 * The property that determines that two given properties are disjoint.
 *
 * http://www.w3.org/2002/07/owl#propertyDisjointWith
 */
export const propertyDisjointWith: Property = 'http://www.w3.org/2002/07/owl#propertyDisjointWith';

/**
 * qualifiedCardinality
 * 
 * The property that determines the cardinality of an exact qualified cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#qualifiedCardinality
 */
export const qualifiedCardinality: Property = 'http://www.w3.org/2002/07/owl#qualifiedCardinality';

/**
 * sameAs
 * 
 * The property that determines that two given individuals are equal.
 *
 * http://www.w3.org/2002/07/owl#sameAs
 */
export const sameAs: Property = 'http://www.w3.org/2002/07/owl#sameAs';

/**
 * someValuesFrom
 * 
 * The property that determines the class that an existential property restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#someValuesFrom
 */
export const someValuesFrom: Property = 'http://www.w3.org/2002/07/owl#someValuesFrom';

/**
 * sourceIndividual
 * 
 * The property that determines the subject of a negative property assertion.
 *
 * http://www.w3.org/2002/07/owl#sourceIndividual
 */
export const sourceIndividual: Property = 'http://www.w3.org/2002/07/owl#sourceIndividual';

/**
 * targetIndividual
 * 
 * The property that determines the object of a negative object property assertion.
 *
 * http://www.w3.org/2002/07/owl#targetIndividual
 */
export const targetIndividual: Property = 'http://www.w3.org/2002/07/owl#targetIndividual';

/**
 * targetValue
 * 
 * The property that determines the value of a negative data property assertion.
 *
 * http://www.w3.org/2002/07/owl#targetValue
 */
export const targetValue: Property = 'http://www.w3.org/2002/07/owl#targetValue';

/**
 * unionOf
 * 
 * The property that determines the collection of classes or data ranges that build a union.
 *
 * http://www.w3.org/2002/07/owl#unionOf
 */
export const unionOf: Property = 'http://www.w3.org/2002/07/owl#unionOf';

/**
 * withRestrictions
 * 
 * The property that determines the collection of facet-value pairs that define a datatype restriction.
 *
 * http://www.w3.org/2002/07/owl#withRestrictions
 */
export const withRestrictions: Property = 'http://www.w3.org/2002/07/owl#withRestrictions';

/**
 * AllDifferent
 * 
 * The class of collections of pairwise different individuals.
 *
 * http://www.w3.org/2002/07/owl#AllDifferent
 */
export const AllDifferent: Class = 'http://www.w3.org/2002/07/owl#AllDifferent';

/**
 * AllDisjointClasses
 * 
 * The class of collections of pairwise disjoint classes.
 *
 * http://www.w3.org/2002/07/owl#AllDisjointClasses
 */
export const AllDisjointClasses: Class = 'http://www.w3.org/2002/07/owl#AllDisjointClasses';

/**
 * AllDisjointProperties
 * 
 * The class of collections of pairwise disjoint properties.
 *
 * http://www.w3.org/2002/07/owl#AllDisjointProperties
 */
export const AllDisjointProperties: Class = 'http://www.w3.org/2002/07/owl#AllDisjointProperties';

/**
 * Annotation
 * 
 * The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object.
 *
 * http://www.w3.org/2002/07/owl#Annotation
 */
export const Annotation: Class = 'http://www.w3.org/2002/07/owl#Annotation';

/**
 * AnnotationProperty
 * 
 * The class of annotation properties.
 *
 * http://www.w3.org/2002/07/owl#AnnotationProperty
 */
export const AnnotationProperty: Class = 'http://www.w3.org/2002/07/owl#AnnotationProperty';

/**
 * AsymmetricProperty
 * 
 * The class of asymmetric properties.
 *
 * http://www.w3.org/2002/07/owl#AsymmetricProperty
 */
export const AsymmetricProperty: Class = 'http://www.w3.org/2002/07/owl#AsymmetricProperty';

/**
 * Axiom
 * 
 * The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object.
 *
 * http://www.w3.org/2002/07/owl#Axiom
 */
export const Axiom: Class = 'http://www.w3.org/2002/07/owl#Axiom';

/**
 * Class
 * 
 * The class of OWL classes.
 *
 * http://www.w3.org/2002/07/owl#Class
 */
export const Class: Class = 'http://www.w3.org/2002/07/owl#Class';

/**
 * DataRange
 * 
 * The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.
 *
 * http://www.w3.org/2002/07/owl#DataRange
 */
export const DataRange: Class = 'http://www.w3.org/2002/07/owl#DataRange';

/**
 * DatatypeProperty
 * 
 * The class of data properties.
 *
 * http://www.w3.org/2002/07/owl#DatatypeProperty
 */
export const DatatypeProperty: Class = 'http://www.w3.org/2002/07/owl#DatatypeProperty';

/**
 * DeprecatedClass
 * 
 * The class of deprecated classes.
 *
 * http://www.w3.org/2002/07/owl#DeprecatedClass
 */
export const DeprecatedClass: Class = 'http://www.w3.org/2002/07/owl#DeprecatedClass';

/**
 * DeprecatedProperty
 * 
 * The class of deprecated properties.
 *
 * http://www.w3.org/2002/07/owl#DeprecatedProperty
 */
export const DeprecatedProperty: Class = 'http://www.w3.org/2002/07/owl#DeprecatedProperty';

/**
 * FunctionalProperty
 * 
 * The class of functional properties.
 *
 * http://www.w3.org/2002/07/owl#FunctionalProperty
 */
export const FunctionalProperty: Class = 'http://www.w3.org/2002/07/owl#FunctionalProperty';

/**
 * InverseFunctionalProperty
 * 
 * The class of inverse-functional properties.
 *
 * http://www.w3.org/2002/07/owl#InverseFunctionalProperty
 */
export const InverseFunctionalProperty: Class = 'http://www.w3.org/2002/07/owl#InverseFunctionalProperty';

/**
 * IrreflexiveProperty
 * 
 * The class of irreflexive properties.
 *
 * http://www.w3.org/2002/07/owl#IrreflexiveProperty
 */
export const IrreflexiveProperty: Class = 'http://www.w3.org/2002/07/owl#IrreflexiveProperty';

/**
 * NamedIndividual
 * 
 * The class of named individuals.
 *
 * http://www.w3.org/2002/07/owl#NamedIndividual
 */
export const NamedIndividual: Class = 'http://www.w3.org/2002/07/owl#NamedIndividual';

/**
 * NegativePropertyAssertion
 * 
 * The class of negative property assertions.
 *
 * http://www.w3.org/2002/07/owl#NegativePropertyAssertion
 */
export const NegativePropertyAssertion: Class = 'http://www.w3.org/2002/07/owl#NegativePropertyAssertion';

/**
 * ObjectProperty
 * 
 * The class of object properties.
 *
 * http://www.w3.org/2002/07/owl#ObjectProperty
 */
export const ObjectProperty: Class = 'http://www.w3.org/2002/07/owl#ObjectProperty';

/**
 * Ontology
 * 
 * The class of ontologies.
 *
 * http://www.w3.org/2002/07/owl#Ontology
 */
export const Ontology: Class = 'http://www.w3.org/2002/07/owl#Ontology';

/**
 * OntologyProperty
 * 
 * The class of ontology properties.
 *
 * http://www.w3.org/2002/07/owl#OntologyProperty
 */
export const OntologyProperty: Class = 'http://www.w3.org/2002/07/owl#OntologyProperty';

/**
 * ReflexiveProperty
 * 
 * The class of reflexive properties.
 *
 * http://www.w3.org/2002/07/owl#ReflexiveProperty
 */
export const ReflexiveProperty: Class = 'http://www.w3.org/2002/07/owl#ReflexiveProperty';

/**
 * Restriction
 * 
 * The class of property restrictions.
 *
 * http://www.w3.org/2002/07/owl#Restriction
 */
export const Restriction: Class = 'http://www.w3.org/2002/07/owl#Restriction';

/**
 * SymmetricProperty
 * 
 * The class of symmetric properties.
 *
 * http://www.w3.org/2002/07/owl#SymmetricProperty
 */
export const SymmetricProperty: Class = 'http://www.w3.org/2002/07/owl#SymmetricProperty';

/**
 * TransitiveProperty
 * 
 * The class of transitive properties.
 *
 * http://www.w3.org/2002/07/owl#TransitiveProperty
 */
export const TransitiveProperty: Class = 'http://www.w3.org/2002/07/owl#TransitiveProperty';

/**
 * Nothing
 * 
 * This is the empty class.
 *
 * http://www.w3.org/2002/07/owl#Nothing
 */
export const Nothing: OwlClass = 'http://www.w3.org/2002/07/owl#Nothing';

/**
 * Thing
 * 
 * The class of OWL individuals.
 *
 * http://www.w3.org/2002/07/owl#Thing
 */
export const Thing: OwlClass = 'http://www.w3.org/2002/07/owl#Thing';

/**
 * bottomObjectProperty
 * 
 * The object property that does not relate any two individuals.
 *
 * http://www.w3.org/2002/07/owl#bottomObjectProperty
 */
export const bottomObjectProperty: OwlObjectProperty = 'http://www.w3.org/2002/07/owl#bottomObjectProperty';

/**
 * topObjectProperty
 * 
 * The object property that relates every two individuals.
 *
 * http://www.w3.org/2002/07/owl#topObjectProperty
 */
export const topObjectProperty: OwlObjectProperty = 'http://www.w3.org/2002/07/owl#topObjectProperty';

/**
 * bottomDataProperty
 * 
 * The data property that does not relate any individual to any data value.
 *
 * http://www.w3.org/2002/07/owl#bottomDataProperty
 */
export const bottomDataProperty: OwlDatatypeProperty = 'http://www.w3.org/2002/07/owl#bottomDataProperty';

/**
 * topDataProperty
 * 
 * The data property that relates every individual to every data value.
 *
 * http://www.w3.org/2002/07/owl#topDataProperty
 */
export const topDataProperty: OwlDatatypeProperty = 'http://www.w3.org/2002/07/owl#topDataProperty';
