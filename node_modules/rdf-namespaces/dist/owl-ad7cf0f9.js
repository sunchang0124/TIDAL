'use strict';

/**
 * allValuesFrom
 *
 * The property that determines the class that a universal property restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#allValuesFrom
 */
var allValuesFrom = 'http://www.w3.org/2002/07/owl#allValuesFrom';
/**
 * annotatedProperty
 *
 * The property that determines the predicate of an annotated axiom or annotated annotation.
 *
 * http://www.w3.org/2002/07/owl#annotatedProperty
 */
var annotatedProperty = 'http://www.w3.org/2002/07/owl#annotatedProperty';
/**
 * annotatedSource
 *
 * The property that determines the subject of an annotated axiom or annotated annotation.
 *
 * http://www.w3.org/2002/07/owl#annotatedSource
 */
var annotatedSource = 'http://www.w3.org/2002/07/owl#annotatedSource';
/**
 * annotatedTarget
 *
 * The property that determines the object of an annotated axiom or annotated annotation.
 *
 * http://www.w3.org/2002/07/owl#annotatedTarget
 */
var annotatedTarget = 'http://www.w3.org/2002/07/owl#annotatedTarget';
/**
 * assertionProperty
 *
 * The property that determines the predicate of a negative property assertion.
 *
 * http://www.w3.org/2002/07/owl#assertionProperty
 */
var assertionProperty = 'http://www.w3.org/2002/07/owl#assertionProperty';
/**
 * cardinality
 *
 * The property that determines the cardinality of an exact cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#cardinality
 */
var cardinality = 'http://www.w3.org/2002/07/owl#cardinality';
/**
 * complementOf
 *
 * The property that determines that a given class is the complement of another class.
 *
 * http://www.w3.org/2002/07/owl#complementOf
 */
var complementOf = 'http://www.w3.org/2002/07/owl#complementOf';
/**
 * datatypeComplementOf
 *
 * The property that determines that a given data range is the complement of another data range with respect to the data domain.
 *
 * http://www.w3.org/2002/07/owl#datatypeComplementOf
 */
var datatypeComplementOf = 'http://www.w3.org/2002/07/owl#datatypeComplementOf';
/**
 * differentFrom
 *
 * The property that determines that two given individuals are different.
 *
 * http://www.w3.org/2002/07/owl#differentFrom
 */
var differentFrom = 'http://www.w3.org/2002/07/owl#differentFrom';
/**
 * disjointUnionOf
 *
 * The property that determines that a given class is equivalent to the disjoint union of a collection of other classes.
 *
 * http://www.w3.org/2002/07/owl#disjointUnionOf
 */
var disjointUnionOf = 'http://www.w3.org/2002/07/owl#disjointUnionOf';
/**
 * disjointWith
 *
 * The property that determines that two given classes are disjoint.
 *
 * http://www.w3.org/2002/07/owl#disjointWith
 */
var disjointWith = 'http://www.w3.org/2002/07/owl#disjointWith';
/**
 * distinctMembers
 *
 * The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.
 *
 * http://www.w3.org/2002/07/owl#distinctMembers
 */
var distinctMembers = 'http://www.w3.org/2002/07/owl#distinctMembers';
/**
 * equivalentClass
 *
 * The property that determines that two given classes are equivalent, and that is used to specify datatype definitions.
 *
 * http://www.w3.org/2002/07/owl#equivalentClass
 */
var equivalentClass = 'http://www.w3.org/2002/07/owl#equivalentClass';
/**
 * equivalentProperty
 *
 * The property that determines that two given properties are equivalent.
 *
 * http://www.w3.org/2002/07/owl#equivalentProperty
 */
var equivalentProperty = 'http://www.w3.org/2002/07/owl#equivalentProperty';
/**
 * hasKey
 *
 * The property that determines the collection of properties that jointly build a key.
 *
 * http://www.w3.org/2002/07/owl#hasKey
 */
var hasKey = 'http://www.w3.org/2002/07/owl#hasKey';
/**
 * hasSelf
 *
 * The property that determines the property that a self restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#hasSelf
 */
var hasSelf = 'http://www.w3.org/2002/07/owl#hasSelf';
/**
 * hasValue
 *
 * The property that determines the individual that a has-value restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#hasValue
 */
var hasValue = 'http://www.w3.org/2002/07/owl#hasValue';
/**
 * intersectionOf
 *
 * The property that determines the collection of classes or data ranges that build an intersection.
 *
 * http://www.w3.org/2002/07/owl#intersectionOf
 */
var intersectionOf = 'http://www.w3.org/2002/07/owl#intersectionOf';
/**
 * inverseOf
 *
 * The property that determines that two given properties are inverse.
 *
 * http://www.w3.org/2002/07/owl#inverseOf
 */
var inverseOf = 'http://www.w3.org/2002/07/owl#inverseOf';
/**
 * maxCardinality
 *
 * The property that determines the cardinality of a maximum cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#maxCardinality
 */
var maxCardinality = 'http://www.w3.org/2002/07/owl#maxCardinality';
/**
 * maxQualifiedCardinality
 *
 * The property that determines the cardinality of a maximum qualified cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#maxQualifiedCardinality
 */
var maxQualifiedCardinality = 'http://www.w3.org/2002/07/owl#maxQualifiedCardinality';
/**
 * members
 *
 * The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
 *
 * http://www.w3.org/2002/07/owl#members
 */
var members = 'http://www.w3.org/2002/07/owl#members';
/**
 * minCardinality
 *
 * The property that determines the cardinality of a minimum cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#minCardinality
 */
var minCardinality = 'http://www.w3.org/2002/07/owl#minCardinality';
/**
 * minQualifiedCardinality
 *
 * The property that determines the cardinality of a minimum qualified cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#minQualifiedCardinality
 */
var minQualifiedCardinality = 'http://www.w3.org/2002/07/owl#minQualifiedCardinality';
/**
 * onClass
 *
 * The property that determines the class that a qualified object cardinality restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#onClass
 */
var onClass = 'http://www.w3.org/2002/07/owl#onClass';
/**
 * onDataRange
 *
 * The property that determines the data range that a qualified data cardinality restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#onDataRange
 */
var onDataRange = 'http://www.w3.org/2002/07/owl#onDataRange';
/**
 * onDatatype
 *
 * The property that determines the datatype that a datatype restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#onDatatype
 */
var onDatatype = 'http://www.w3.org/2002/07/owl#onDatatype';
/**
 * oneOf
 *
 * The property that determines the collection of individuals or data values that build an enumeration.
 *
 * http://www.w3.org/2002/07/owl#oneOf
 */
var oneOf = 'http://www.w3.org/2002/07/owl#oneOf';
/**
 * onProperties
 *
 * The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to.
 *
 * http://www.w3.org/2002/07/owl#onProperties
 */
var onProperties = 'http://www.w3.org/2002/07/owl#onProperties';
/**
 * onProperty
 *
 * The property that determines the property that a property restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#onProperty
 */
var onProperty = 'http://www.w3.org/2002/07/owl#onProperty';
/**
 * propertyChainAxiom
 *
 * The property that determines the n-tuple of properties that build a sub property chain of a given property.
 *
 * http://www.w3.org/2002/07/owl#propertyChainAxiom
 */
var propertyChainAxiom = 'http://www.w3.org/2002/07/owl#propertyChainAxiom';
/**
 * propertyDisjointWith
 *
 * The property that determines that two given properties are disjoint.
 *
 * http://www.w3.org/2002/07/owl#propertyDisjointWith
 */
var propertyDisjointWith = 'http://www.w3.org/2002/07/owl#propertyDisjointWith';
/**
 * qualifiedCardinality
 *
 * The property that determines the cardinality of an exact qualified cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#qualifiedCardinality
 */
var qualifiedCardinality = 'http://www.w3.org/2002/07/owl#qualifiedCardinality';
/**
 * sameAs
 *
 * The property that determines that two given individuals are equal.
 *
 * http://www.w3.org/2002/07/owl#sameAs
 */
var sameAs = 'http://www.w3.org/2002/07/owl#sameAs';
/**
 * someValuesFrom
 *
 * The property that determines the class that an existential property restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#someValuesFrom
 */
var someValuesFrom = 'http://www.w3.org/2002/07/owl#someValuesFrom';
/**
 * sourceIndividual
 *
 * The property that determines the subject of a negative property assertion.
 *
 * http://www.w3.org/2002/07/owl#sourceIndividual
 */
var sourceIndividual = 'http://www.w3.org/2002/07/owl#sourceIndividual';
/**
 * targetIndividual
 *
 * The property that determines the object of a negative object property assertion.
 *
 * http://www.w3.org/2002/07/owl#targetIndividual
 */
var targetIndividual = 'http://www.w3.org/2002/07/owl#targetIndividual';
/**
 * targetValue
 *
 * The property that determines the value of a negative data property assertion.
 *
 * http://www.w3.org/2002/07/owl#targetValue
 */
var targetValue = 'http://www.w3.org/2002/07/owl#targetValue';
/**
 * unionOf
 *
 * The property that determines the collection of classes or data ranges that build a union.
 *
 * http://www.w3.org/2002/07/owl#unionOf
 */
var unionOf = 'http://www.w3.org/2002/07/owl#unionOf';
/**
 * withRestrictions
 *
 * The property that determines the collection of facet-value pairs that define a datatype restriction.
 *
 * http://www.w3.org/2002/07/owl#withRestrictions
 */
var withRestrictions = 'http://www.w3.org/2002/07/owl#withRestrictions';
/**
 * AllDifferent
 *
 * The class of collections of pairwise different individuals.
 *
 * http://www.w3.org/2002/07/owl#AllDifferent
 */
var AllDifferent = 'http://www.w3.org/2002/07/owl#AllDifferent';
/**
 * AllDisjointClasses
 *
 * The class of collections of pairwise disjoint classes.
 *
 * http://www.w3.org/2002/07/owl#AllDisjointClasses
 */
var AllDisjointClasses = 'http://www.w3.org/2002/07/owl#AllDisjointClasses';
/**
 * AllDisjointProperties
 *
 * The class of collections of pairwise disjoint properties.
 *
 * http://www.w3.org/2002/07/owl#AllDisjointProperties
 */
var AllDisjointProperties = 'http://www.w3.org/2002/07/owl#AllDisjointProperties';
/**
 * Annotation
 *
 * The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object.
 *
 * http://www.w3.org/2002/07/owl#Annotation
 */
var Annotation = 'http://www.w3.org/2002/07/owl#Annotation';
/**
 * AnnotationProperty
 *
 * The class of annotation properties.
 *
 * http://www.w3.org/2002/07/owl#AnnotationProperty
 */
var AnnotationProperty = 'http://www.w3.org/2002/07/owl#AnnotationProperty';
/**
 * AsymmetricProperty
 *
 * The class of asymmetric properties.
 *
 * http://www.w3.org/2002/07/owl#AsymmetricProperty
 */
var AsymmetricProperty = 'http://www.w3.org/2002/07/owl#AsymmetricProperty';
/**
 * Axiom
 *
 * The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object.
 *
 * http://www.w3.org/2002/07/owl#Axiom
 */
var Axiom = 'http://www.w3.org/2002/07/owl#Axiom';
/**
 * Class
 *
 * The class of OWL classes.
 *
 * http://www.w3.org/2002/07/owl#Class
 */
var Class = 'http://www.w3.org/2002/07/owl#Class';
/**
 * DataRange
 *
 * The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.
 *
 * http://www.w3.org/2002/07/owl#DataRange
 */
var DataRange = 'http://www.w3.org/2002/07/owl#DataRange';
/**
 * DatatypeProperty
 *
 * The class of data properties.
 *
 * http://www.w3.org/2002/07/owl#DatatypeProperty
 */
var DatatypeProperty = 'http://www.w3.org/2002/07/owl#DatatypeProperty';
/**
 * DeprecatedClass
 *
 * The class of deprecated classes.
 *
 * http://www.w3.org/2002/07/owl#DeprecatedClass
 */
var DeprecatedClass = 'http://www.w3.org/2002/07/owl#DeprecatedClass';
/**
 * DeprecatedProperty
 *
 * The class of deprecated properties.
 *
 * http://www.w3.org/2002/07/owl#DeprecatedProperty
 */
var DeprecatedProperty = 'http://www.w3.org/2002/07/owl#DeprecatedProperty';
/**
 * FunctionalProperty
 *
 * The class of functional properties.
 *
 * http://www.w3.org/2002/07/owl#FunctionalProperty
 */
var FunctionalProperty = 'http://www.w3.org/2002/07/owl#FunctionalProperty';
/**
 * InverseFunctionalProperty
 *
 * The class of inverse-functional properties.
 *
 * http://www.w3.org/2002/07/owl#InverseFunctionalProperty
 */
var InverseFunctionalProperty = 'http://www.w3.org/2002/07/owl#InverseFunctionalProperty';
/**
 * IrreflexiveProperty
 *
 * The class of irreflexive properties.
 *
 * http://www.w3.org/2002/07/owl#IrreflexiveProperty
 */
var IrreflexiveProperty = 'http://www.w3.org/2002/07/owl#IrreflexiveProperty';
/**
 * NamedIndividual
 *
 * The class of named individuals.
 *
 * http://www.w3.org/2002/07/owl#NamedIndividual
 */
var NamedIndividual = 'http://www.w3.org/2002/07/owl#NamedIndividual';
/**
 * NegativePropertyAssertion
 *
 * The class of negative property assertions.
 *
 * http://www.w3.org/2002/07/owl#NegativePropertyAssertion
 */
var NegativePropertyAssertion = 'http://www.w3.org/2002/07/owl#NegativePropertyAssertion';
/**
 * ObjectProperty
 *
 * The class of object properties.
 *
 * http://www.w3.org/2002/07/owl#ObjectProperty
 */
var ObjectProperty = 'http://www.w3.org/2002/07/owl#ObjectProperty';
/**
 * Ontology
 *
 * The class of ontologies.
 *
 * http://www.w3.org/2002/07/owl#Ontology
 */
var Ontology = 'http://www.w3.org/2002/07/owl#Ontology';
/**
 * OntologyProperty
 *
 * The class of ontology properties.
 *
 * http://www.w3.org/2002/07/owl#OntologyProperty
 */
var OntologyProperty = 'http://www.w3.org/2002/07/owl#OntologyProperty';
/**
 * ReflexiveProperty
 *
 * The class of reflexive properties.
 *
 * http://www.w3.org/2002/07/owl#ReflexiveProperty
 */
var ReflexiveProperty = 'http://www.w3.org/2002/07/owl#ReflexiveProperty';
/**
 * Restriction
 *
 * The class of property restrictions.
 *
 * http://www.w3.org/2002/07/owl#Restriction
 */
var Restriction = 'http://www.w3.org/2002/07/owl#Restriction';
/**
 * SymmetricProperty
 *
 * The class of symmetric properties.
 *
 * http://www.w3.org/2002/07/owl#SymmetricProperty
 */
var SymmetricProperty = 'http://www.w3.org/2002/07/owl#SymmetricProperty';
/**
 * TransitiveProperty
 *
 * The class of transitive properties.
 *
 * http://www.w3.org/2002/07/owl#TransitiveProperty
 */
var TransitiveProperty = 'http://www.w3.org/2002/07/owl#TransitiveProperty';
/**
 * Nothing
 *
 * This is the empty class.
 *
 * http://www.w3.org/2002/07/owl#Nothing
 */
var Nothing = 'http://www.w3.org/2002/07/owl#Nothing';
/**
 * Thing
 *
 * The class of OWL individuals.
 *
 * http://www.w3.org/2002/07/owl#Thing
 */
var Thing = 'http://www.w3.org/2002/07/owl#Thing';
/**
 * bottomObjectProperty
 *
 * The object property that does not relate any two individuals.
 *
 * http://www.w3.org/2002/07/owl#bottomObjectProperty
 */
var bottomObjectProperty = 'http://www.w3.org/2002/07/owl#bottomObjectProperty';
/**
 * topObjectProperty
 *
 * The object property that relates every two individuals.
 *
 * http://www.w3.org/2002/07/owl#topObjectProperty
 */
var topObjectProperty = 'http://www.w3.org/2002/07/owl#topObjectProperty';
/**
 * bottomDataProperty
 *
 * The data property that does not relate any individual to any data value.
 *
 * http://www.w3.org/2002/07/owl#bottomDataProperty
 */
var bottomDataProperty = 'http://www.w3.org/2002/07/owl#bottomDataProperty';
/**
 * topDataProperty
 *
 * The data property that relates every individual to every data value.
 *
 * http://www.w3.org/2002/07/owl#topDataProperty
 */
var topDataProperty = 'http://www.w3.org/2002/07/owl#topDataProperty';

var owlImport = /*#__PURE__*/Object.freeze({
	allValuesFrom: allValuesFrom,
	annotatedProperty: annotatedProperty,
	annotatedSource: annotatedSource,
	annotatedTarget: annotatedTarget,
	assertionProperty: assertionProperty,
	cardinality: cardinality,
	complementOf: complementOf,
	datatypeComplementOf: datatypeComplementOf,
	differentFrom: differentFrom,
	disjointUnionOf: disjointUnionOf,
	disjointWith: disjointWith,
	distinctMembers: distinctMembers,
	equivalentClass: equivalentClass,
	equivalentProperty: equivalentProperty,
	hasKey: hasKey,
	hasSelf: hasSelf,
	hasValue: hasValue,
	intersectionOf: intersectionOf,
	inverseOf: inverseOf,
	maxCardinality: maxCardinality,
	maxQualifiedCardinality: maxQualifiedCardinality,
	members: members,
	minCardinality: minCardinality,
	minQualifiedCardinality: minQualifiedCardinality,
	onClass: onClass,
	onDataRange: onDataRange,
	onDatatype: onDatatype,
	oneOf: oneOf,
	onProperties: onProperties,
	onProperty: onProperty,
	propertyChainAxiom: propertyChainAxiom,
	propertyDisjointWith: propertyDisjointWith,
	qualifiedCardinality: qualifiedCardinality,
	sameAs: sameAs,
	someValuesFrom: someValuesFrom,
	sourceIndividual: sourceIndividual,
	targetIndividual: targetIndividual,
	targetValue: targetValue,
	unionOf: unionOf,
	withRestrictions: withRestrictions,
	AllDifferent: AllDifferent,
	AllDisjointClasses: AllDisjointClasses,
	AllDisjointProperties: AllDisjointProperties,
	Annotation: Annotation,
	AnnotationProperty: AnnotationProperty,
	AsymmetricProperty: AsymmetricProperty,
	Axiom: Axiom,
	Class: Class,
	DataRange: DataRange,
	DatatypeProperty: DatatypeProperty,
	DeprecatedClass: DeprecatedClass,
	DeprecatedProperty: DeprecatedProperty,
	FunctionalProperty: FunctionalProperty,
	InverseFunctionalProperty: InverseFunctionalProperty,
	IrreflexiveProperty: IrreflexiveProperty,
	NamedIndividual: NamedIndividual,
	NegativePropertyAssertion: NegativePropertyAssertion,
	ObjectProperty: ObjectProperty,
	Ontology: Ontology,
	OntologyProperty: OntologyProperty,
	ReflexiveProperty: ReflexiveProperty,
	Restriction: Restriction,
	SymmetricProperty: SymmetricProperty,
	TransitiveProperty: TransitiveProperty,
	Nothing: Nothing,
	Thing: Thing,
	bottomObjectProperty: bottomObjectProperty,
	topObjectProperty: topObjectProperty,
	bottomDataProperty: bottomDataProperty,
	topDataProperty: topDataProperty
});

exports.AllDifferent = AllDifferent;
exports.AllDisjointClasses = AllDisjointClasses;
exports.AllDisjointProperties = AllDisjointProperties;
exports.Annotation = Annotation;
exports.AnnotationProperty = AnnotationProperty;
exports.AsymmetricProperty = AsymmetricProperty;
exports.Axiom = Axiom;
exports.Class = Class;
exports.DataRange = DataRange;
exports.DatatypeProperty = DatatypeProperty;
exports.DeprecatedClass = DeprecatedClass;
exports.DeprecatedProperty = DeprecatedProperty;
exports.FunctionalProperty = FunctionalProperty;
exports.InverseFunctionalProperty = InverseFunctionalProperty;
exports.IrreflexiveProperty = IrreflexiveProperty;
exports.NamedIndividual = NamedIndividual;
exports.NegativePropertyAssertion = NegativePropertyAssertion;
exports.Nothing = Nothing;
exports.ObjectProperty = ObjectProperty;
exports.Ontology = Ontology;
exports.OntologyProperty = OntologyProperty;
exports.ReflexiveProperty = ReflexiveProperty;
exports.Restriction = Restriction;
exports.SymmetricProperty = SymmetricProperty;
exports.Thing = Thing;
exports.TransitiveProperty = TransitiveProperty;
exports.allValuesFrom = allValuesFrom;
exports.annotatedProperty = annotatedProperty;
exports.annotatedSource = annotatedSource;
exports.annotatedTarget = annotatedTarget;
exports.assertionProperty = assertionProperty;
exports.bottomDataProperty = bottomDataProperty;
exports.bottomObjectProperty = bottomObjectProperty;
exports.cardinality = cardinality;
exports.complementOf = complementOf;
exports.datatypeComplementOf = datatypeComplementOf;
exports.differentFrom = differentFrom;
exports.disjointUnionOf = disjointUnionOf;
exports.disjointWith = disjointWith;
exports.distinctMembers = distinctMembers;
exports.equivalentClass = equivalentClass;
exports.equivalentProperty = equivalentProperty;
exports.hasKey = hasKey;
exports.hasSelf = hasSelf;
exports.hasValue = hasValue;
exports.intersectionOf = intersectionOf;
exports.inverseOf = inverseOf;
exports.maxCardinality = maxCardinality;
exports.maxQualifiedCardinality = maxQualifiedCardinality;
exports.members = members;
exports.minCardinality = minCardinality;
exports.minQualifiedCardinality = minQualifiedCardinality;
exports.onClass = onClass;
exports.onDataRange = onDataRange;
exports.onDatatype = onDatatype;
exports.onProperties = onProperties;
exports.onProperty = onProperty;
exports.oneOf = oneOf;
exports.owlImport = owlImport;
exports.propertyChainAxiom = propertyChainAxiom;
exports.propertyDisjointWith = propertyDisjointWith;
exports.qualifiedCardinality = qualifiedCardinality;
exports.sameAs = sameAs;
exports.someValuesFrom = someValuesFrom;
exports.sourceIndividual = sourceIndividual;
exports.targetIndividual = targetIndividual;
exports.targetValue = targetValue;
exports.topDataProperty = topDataProperty;
exports.topObjectProperty = topObjectProperty;
exports.unionOf = unionOf;
exports.withRestrictions = withRestrictions;
