'use strict';

/**
 * account
 *
 * A solid account belonging to an Agent.
 *
 * http://www.w3.org/ns/solid/terms#account
 */
var account = 'http://www.w3.org/ns/solid/terms#account';
/**
 * deletes
 *
 * The triple patterns this patch removes from the document.
 *
 * http://www.w3.org/ns/solid/terms#deletes
 */
var deletes = 'http://www.w3.org/ns/solid/terms#deletes';
/**
 * registry class
 *
 * A class that is used to map an listed or unlisted type index.
 *
 * http://www.w3.org/ns/solid/terms#forClass
 */
var forClass = 'http://www.w3.org/ns/solid/terms#forClass';
/**
 * inbox (deprecated)
 *
 * Deprecated pointer to a Linked Data Notifications inbox; please use http://www.w3.org/ns/ldp#inbox instead.
 *
 * http://www.w3.org/ns/solid/terms#inbox
 */
var inbox = 'http://www.w3.org/ns/solid/terms#inbox';
/**
 * inserts
 *
 * The triple patterns this patch adds to the document.
 *
 * http://www.w3.org/ns/solid/terms#inserts
 */
var inserts = 'http://www.w3.org/ns/solid/terms#inserts';
/**
 * instance
 *
 * Maps a type to an individual resource, typically an index or a directory listing resource.
 *
 * http://www.w3.org/ns/solid/terms#instance
 */
var instance = 'http://www.w3.org/ns/solid/terms#instance';
/**
 * instance container
 *
 * Maps a type to a container which the client would have to list to get the instances of that type.
 *
 * http://www.w3.org/ns/solid/terms#instanceContainer
 */
var instanceContainer = 'http://www.w3.org/ns/solid/terms#instanceContainer';
/**
 * loginEndpoint
 *
 * The login URI of a given server.
 *
 * http://www.w3.org/ns/solid/terms#loginEndpoint
 */
var loginEndpoint = 'http://www.w3.org/ns/solid/terms#loginEndpoint';
/**
 * logoutEndpoint
 *
 * The logout URI of a given server.
 *
 * http://www.w3.org/ns/solid/terms#logoutEndpoint
 */
var logoutEndpoint = 'http://www.w3.org/ns/solid/terms#logoutEndpoint';
/**
 * notification
 *
 * Notification resource for an inbox.
 *
 * http://www.w3.org/ns/solid/terms#notification
 */
var notification = 'http://www.w3.org/ns/solid/terms#notification';
/**
 * private type index
 *
 * Points to an unlisted type index resource.
 *
 * http://www.w3.org/ns/solid/terms#privateTypeIndex
 */
var privateTypeIndex = 'http://www.w3.org/ns/solid/terms#privateTypeIndex';
/**
 * public type index
 *
 * Points to a listed type index resource.
 *
 * http://www.w3.org/ns/solid/terms#publicTypeIndex
 */
var publicTypeIndex = 'http://www.w3.org/ns/solid/terms#publicTypeIndex';
/**
 * read
 *
 * Indicates if a message has been read or not. This property should have a boolean datatype.
 *
 * http://www.w3.org/ns/solid/terms#read
 */
var read = 'http://www.w3.org/ns/solid/terms#read';
/**
 * type index
 *
 * Points to a TypeIndex resource.
 *
 * http://www.w3.org/ns/solid/terms#typeIndex
 */
var typeIndex = 'http://www.w3.org/ns/solid/terms#typeIndex';
/**
 * oidcIssuer
 *
 * The preferred OpenID Connect issuer URI for a given Web ID.
 *
 * http://www.w3.org/ns/solid/terms#oidcIssuer
 */
var oidcIssuer = 'http://www.w3.org/ns/solid/terms#oidcIssuer';
/**
 * patches
 *
 * The document to which this patch applies.
 *
 * http://www.w3.org/ns/solid/terms#patches
 */
var patches = 'http://www.w3.org/ns/solid/terms#patches';
/**
 * timeline
 *
 * Timeline for a given resource.
 *
 * http://www.w3.org/ns/solid/terms#timeline
 */
var timeline = 'http://www.w3.org/ns/solid/terms#timeline';
/**
 * where
 *
 * The conditions the document and the inserted and deleted triple patterns need to satisfy in order for the patch to be applied.
 *
 * http://www.w3.org/ns/solid/terms#where
 */
var where = 'http://www.w3.org/ns/solid/terms#where';
/**
 * Non-volatile memory quota
 *
 * The quota of non-volatile memory that is available for the account (in bytes)
 *
 * http://www.w3.org/ns/solid/terms#storageQuota
 */
var storageQuota = 'http://www.w3.org/ns/solid/terms#storageQuota';
/**
 * Non-volatile memory usage
 *
 * The amount of non-volatile memory that the account have used (in bytes)
 *
 * http://www.w3.org/ns/solid/terms#storageUsage
 */
var storageUsage = 'http://www.w3.org/ns/solid/terms#storageUsage';
/**
 * Account
 *
 * A Solid account.
 *
 * http://www.w3.org/ns/solid/terms#Account
 */
var Account = 'http://www.w3.org/ns/solid/terms#Account';
/**
 * Inbox
 *
 * A resource containing notifications.
 *
 * http://www.w3.org/ns/solid/terms#Inbox
 */
var Inbox = 'http://www.w3.org/ns/solid/terms#Inbox';
/**
 * Listed Type Index
 *
 * Listed Type Index is a registry of resources that are publicly discoverable by outside users and applications.
 *
 * http://www.w3.org/ns/solid/terms#ListedDocument
 */
var ListedDocument = 'http://www.w3.org/ns/solid/terms#ListedDocument';
/**
 * Notification
 *
 * A notification resource.
 *
 * http://www.w3.org/ns/solid/terms#Notification
 */
var Notification = 'http://www.w3.org/ns/solid/terms#Notification';
/**
 * Patch
 *
 * A patch expresses conditional modifications to a resource that has an RDF-based representation.
 *
 * http://www.w3.org/ns/solid/terms#Patch
 */
var Patch = 'http://www.w3.org/ns/solid/terms#Patch';
/**
 * Timeline
 *
 * A resource containing time ordered items and sub-containers.  Sub-containers may be desirable in file based systems to split the timeline into logical components e.g. /yyyy-mm-dd/ as used in ISO 8061.
 *
 * http://www.w3.org/ns/solid/terms#Timeline
 */
var Timeline = 'http://www.w3.org/ns/solid/terms#Timeline';
/**
 * Type index
 *
 * A index of type registries for resources. Applications can register the RDF type they use and list them in the index resource.
 *
 * http://www.w3.org/ns/solid/terms#TypeIndex
 */
var TypeIndex = 'http://www.w3.org/ns/solid/terms#TypeIndex';
/**
 * Type Registration
 *
 * The registered types that map a RDF classes/types to their locations using either `instance` or `instanceContainer` property.
 *
 * http://www.w3.org/ns/solid/terms#TypeRegistration
 */
var TypeRegistration = 'http://www.w3.org/ns/solid/terms#TypeRegistration';
/**
 * Unlisted Type Index
 *
 * Unlisted Type Index is a registry of resources that are private to the user and their apps, for types that are not publicly discoverable.
 *
 * http://www.w3.org/ns/solid/terms#UnlistedDocument
 */
var UnlistedDocument = 'http://www.w3.org/ns/solid/terms#UnlistedDocument';

var solidImport = /*#__PURE__*/Object.freeze({
	account: account,
	deletes: deletes,
	forClass: forClass,
	inbox: inbox,
	inserts: inserts,
	instance: instance,
	instanceContainer: instanceContainer,
	loginEndpoint: loginEndpoint,
	logoutEndpoint: logoutEndpoint,
	notification: notification,
	privateTypeIndex: privateTypeIndex,
	publicTypeIndex: publicTypeIndex,
	read: read,
	typeIndex: typeIndex,
	oidcIssuer: oidcIssuer,
	patches: patches,
	timeline: timeline,
	where: where,
	storageQuota: storageQuota,
	storageUsage: storageUsage,
	Account: Account,
	Inbox: Inbox,
	ListedDocument: ListedDocument,
	Notification: Notification,
	Patch: Patch,
	Timeline: Timeline,
	TypeIndex: TypeIndex,
	TypeRegistration: TypeRegistration,
	UnlistedDocument: UnlistedDocument
});

exports.Account = Account;
exports.Inbox = Inbox;
exports.ListedDocument = ListedDocument;
exports.Notification = Notification;
exports.Patch = Patch;
exports.Timeline = Timeline;
exports.TypeIndex = TypeIndex;
exports.TypeRegistration = TypeRegistration;
exports.UnlistedDocument = UnlistedDocument;
exports.account = account;
exports.deletes = deletes;
exports.forClass = forClass;
exports.inbox = inbox;
exports.inserts = inserts;
exports.instance = instance;
exports.instanceContainer = instanceContainer;
exports.loginEndpoint = loginEndpoint;
exports.logoutEndpoint = logoutEndpoint;
exports.notification = notification;
exports.oidcIssuer = oidcIssuer;
exports.patches = patches;
exports.privateTypeIndex = privateTypeIndex;
exports.publicTypeIndex = publicTypeIndex;
exports.read = read;
exports.solidImport = solidImport;
exports.storageQuota = storageQuota;
exports.storageUsage = storageUsage;
exports.timeline = timeline;
exports.typeIndex = typeIndex;
exports.where = where;
