type Property = string;
type Class = string;
type Datatype = string;
type OwlClass = string;
type OwlObjectProperty = string;
type OwlDatatypeProperty = string;
type HydraResource = string;
type HydraClass = string;
type HydraLink = string;
type HydraTemplatedLink = string;
type HydraVariableRepresentation = string;

/**
 * description
 * 
 * The description, definition,
 *         or abstract. Information explaining what this is.
 *         Not arbitrary comment about anything, only about the subject.
 *         (Use this property for anything. There is no domain restriction.).
 *
 * http://www.w3.org/2005/01/wf/flow#description
 */
export const description: Property = 'http://www.w3.org/2005/01/wf/flow#description';

/**
 * how
 * 
 * Another task upon which this depends, in the sense that
 *         this task cannot be completed without that task being done.
 *         You can't use this for dependencies on anything other than other tasks.
 *         (Note the US spelling of the URI. In the UK, a dependant is a something
 *         which is dependent on somehing else.)
 *
 * http://www.w3.org/2005/01/wf/flow#dependent
 */
export const dependent: Property = 'http://www.w3.org/2005/01/wf/flow#dependent';

/**
 * assigned to
 * 
 * The person or group to whom this has been assigned.
 *
 * http://www.w3.org/2005/01/wf/flow#assignee
 */
export const assignee: Property = 'http://www.w3.org/2005/01/wf/flow#assignee';

/**
 * changed by
 * 
 * 
 *
 * http://www.w3.org/2005/01/wf/flow#modifiedBy
 */
export const modifiedBy: Property = 'http://www.w3.org/2005/01/wf/flow#modifiedBy';

/**
 * subscriber
 * 
 * 
 *
 * http://www.w3.org/2005/01/wf/flow#subscriber
 */
export const subscriber: Property = 'http://www.w3.org/2005/01/wf/flow#subscriber';

/**
 * deliverable
 * 
 * Something which must be deliverered to accomplish this
 *
 * http://www.w3.org/2005/01/wf/flow#deliverable
 */
export const deliverable: Property = 'http://www.w3.org/2005/01/wf/flow#deliverable';

/**
 * goals
 * 
 * A textual description of the goals of this product, etc.
 *
 * http://www.w3.org/2005/01/wf/flow#goalDescription
 */
export const goalDescription: Property = 'http://www.w3.org/2005/01/wf/flow#goalDescription';

/**
 * success criteria
 * 
 * A textual description of the successs critera.
 *                 How when we know this is done?
 *
 * http://www.w3.org/2005/01/wf/flow#successCriteria
 */
export const successCriteria: Property = 'http://www.w3.org/2005/01/wf/flow#successCriteria';

/**
 * due
 * 
 * The date this task is due.
 *                 
 *
 * http://www.w3.org/2005/01/wf/flow#dateDue
 */
export const dateDue: Property = 'http://www.w3.org/2005/01/wf/flow#dateDue';

/**
 * attachment
 * 
 * Something related is attached for information.
 *
 * http://www.w3.org/2005/01/wf/flow#attachment
 */
export const attachment: Property = 'http://www.w3.org/2005/01/wf/flow#attachment';

/**
 * screen shot
 * 
 * An image taken by capturing the state of a
 *                  computer screen, for example to demonstrate a problem
 *
 * http://www.w3.org/2005/01/wf/flow#screenShot
 */
export const screenShot: Property = 'http://www.w3.org/2005/01/wf/flow#screenShot';

/**
 * test data
 * 
 * A file which can be used as inpiut to a test
 *                 or to demonstrate a problem. 
 *
 * http://www.w3.org/2005/01/wf/flow#testData
 */
export const testData: Property = 'http://www.w3.org/2005/01/wf/flow#testData';

/**
 * terminal output
 * 
 * A file showing user interaction from a
 *                 text terminal or console etc. 
 *
 * http://www.w3.org/2005/01/wf/flow#terminalOutput
 */
export const terminalOutput: Property = 'http://www.w3.org/2005/01/wf/flow#terminalOutput';

/**
 * message
 * 
 * A message about this. Attached for information.
 *
 * http://www.w3.org/2005/01/wf/flow#message
 */
export const message: Property = 'http://www.w3.org/2005/01/wf/flow#message';

/**
 * to
 * 
 * 
 *
 * http://www.w3.org/2005/01/wf/flow#recipent
 */
export const recipent: Property = 'http://www.w3.org/2005/01/wf/flow#recipent';

/**
 * from
 * 
 * 
 *
 * http://www.w3.org/2005/01/wf/flow#sender
 */
export const sender: Property = 'http://www.w3.org/2005/01/wf/flow#sender';

/**
 * tracker
 * 
 * 
 *
 * http://www.w3.org/2005/01/wf/flow#tracker
 */
export const tracker: Property = 'http://www.w3.org/2005/01/wf/flow#tracker';

/**
 * all issues must be in
 * 
 * The class of issues which are allowed in this tracker.
 *                 This is essemtial to the operation of the tracker,
 *                 as it defines which states an issue can be in.
 *                 (The issueClass must be a disjointUnionOf the state classes)
 *
 * http://www.w3.org/2005/01/wf/flow#issueClass
 */
export const issueClass: Property = 'http://www.w3.org/2005/01/wf/flow#issueClass';

/**
 * issue category
 * 
 * Issues may be categorized according to the
 *                 subclasses of this class
 *
 * http://www.w3.org/2005/01/wf/flow#issueCategory
 */
export const issueCategory: Property = 'http://www.w3.org/2005/01/wf/flow#issueCategory';

/**
 * state store
 * 
 * A read-write document.
 *                 The state of the issues is modified here.
 *                 When you set up a trcaker, thgis must be set to point
 *                 to a writeble data resource on the web.
 *
 * http://www.w3.org/2005/01/wf/flow#stateStore
 */
export const stateStore: Property = 'http://www.w3.org/2005/01/wf/flow#stateStore';

/**
 * transaction store
 * 
 * An appendable document. Transactions and messsages
 *                     can be written into here
 *
 * http://www.w3.org/2005/01/wf/flow#transactionStore
 */
export const transactionStore: Property = 'http://www.w3.org/2005/01/wf/flow#transactionStore';

/**
 * assignees must be
 * 
 * When an issue is assigned, the assignee must be from this class
 *
 * http://www.w3.org/2005/01/wf/flow#asigneeClass
 */
export const asigneeClass: Property = 'http://www.w3.org/2005/01/wf/flow#asigneeClass';

/**
 * initial state
 * 
 * The initial state for a new issue
 *
 * http://www.w3.org/2005/01/wf/flow#initialState
 */
export const initialState: Property = 'http://www.w3.org/2005/01/wf/flow#initialState';

/**
 * to
 * 
 * 
 *
 * http://www.w3.org/2005/01/wf/flow#final
 */
export const final: Property = 'http://www.w3.org/2005/01/wf/flow#final';

/**
 * task
 * 
 * 
 *
 * http://www.w3.org/2005/01/wf/flow#task
 */
export const task: Property = 'http://www.w3.org/2005/01/wf/flow#task';

/**
 * requires
 * 
 * To be a valid transition,
 * 		a necessary (but not necessarily sufficuent) condition
 * 		is that there be recorded these properties for the record
 *
 * http://www.w3.org/2005/01/wf/flow#requires
 */
export const requires: Property = 'http://www.w3.org/2005/01/wf/flow#requires';

/**
 * affects
 * 
 * 
 *
 * http://www.w3.org/2005/01/wf/flow#affects
 */
export const affects: Property = 'http://www.w3.org/2005/01/wf/flow#affects';

/**
 * creates
 * 
 * 
 *
 * http://www.w3.org/2005/01/wf/flow#creates
 */
export const creates: Property = 'http://www.w3.org/2005/01/wf/flow#creates';

/**
 * allowed transitions
 * 
 * The state machine is defined
 * 	by these lists of transition allowed for each issue.
 * 	(An interesting option in the Web is to make an allowed transition
 * 	to a state in soemone else's ontology, which in turn allows
 * 	transitions into many ontologies.  So a finite state maxchine
 * 	may become very large. In practice this means that a task handed
 * 	off to another organization may be processed on all kinds of ways.)
 *
 * http://www.w3.org/2005/01/wf/flow#allowedTransitions
 */
export const allowedTransitions: Property = 'http://www.w3.org/2005/01/wf/flow#allowedTransitions';

/**
 * issue
 * 
 * A transition changes the state of the given issue.
 *
 * http://www.w3.org/2005/01/wf/flow#issue
 */
export const issue: Property = 'http://www.w3.org/2005/01/wf/flow#issue';

/**
 * source
 * 
 * The source of a transition is
 * 				the document by which it happened
 *
 * http://www.w3.org/2005/01/wf/flow#source
 */
export const source: Property = 'http://www.w3.org/2005/01/wf/flow#source';

/**
 * task
 * 
 * Something to be done in a wide sense,
 * 	an agenda item at a meeting is one example, but any
 * 	issue, task, action item, goal, product, deliverable, milestone, can such a thing.
 * 	The requirement for this framework was that it would allow
 * 	one to customize ontologies for things such as agenda items,
 * 	action items, working group issues with a spec, w3c Last Call issues,
 * 	software bugs and administrative requests.
 * 	In Ï€-calculus, a process.
 * 	Make your type of issue a subclass of Task.
 * 	
 *
 * http://www.w3.org/2005/01/wf/flow#Task
 */
export const Task: Class = 'http://www.w3.org/2005/01/wf/flow#Task';

/**
 * open
 * 
 * A task which needs attention. The very crude states of Open and Closed all
 *         interoperatbility between different systems if the states for a given
 *         application are made subclasses of either Open or Closed. This allows
 *         tasks from different systems to be mixed and treatd together with
 *         limited but valuable functionality.
 * 	
 *
 * http://www.w3.org/2005/01/wf/flow#Open
 */
export const Open: Class = 'http://www.w3.org/2005/01/wf/flow#Open';

/**
 * closed
 * 
 * A task which does not neeed attention. It may be closed because
 *         has been abandonned or completed, for example.
 * 	
 *
 * http://www.w3.org/2005/01/wf/flow#Closed
 */
export const Closed: Class = 'http://www.w3.org/2005/01/wf/flow#Closed';

/**
 * product
 * 
 * A product is a task which monitors something
 *                 which must be produced.
 *
 * http://www.w3.org/2005/01/wf/flow#Product
 */
export const Product: Class = 'http://www.w3.org/2005/01/wf/flow#Product';

/**
 * message
 * 
 * 
 *
 * http://www.w3.org/2005/01/wf/flow#Message
 */
export const Message: Class = 'http://www.w3.org/2005/01/wf/flow#Message';

/**
 * tracker
 * 
 * A set of issues and
 *                 the constraints on how they evolve.
 *                 To use this ontology, craete a new tracker.
 *                 Copy an existing one or make up your own.
 *
 * http://www.w3.org/2005/01/wf/flow#Tracker
 */
export const Tracker: Class = 'http://www.w3.org/2005/01/wf/flow#Tracker';

/**
 * change
 * 
 * The universal class of things which
 * change the state of a task.
 * Included now: Creation, Transition. (Maybe in the future
 * more Ï€-calculus constructions such as splitting & merging tasks,
 * and import/export of obligations to a foreign opaque system.)
 * 
 *
 * http://www.w3.org/2005/01/wf/flow#Change
 */
export const Change: Class = 'http://www.w3.org/2005/01/wf/flow#Change';

/**
 * transition
 * 
 * A transition is a change of state of
 * a task. Typical properties include date and/or source
 * (a document causing the transition), and a final state.
 *
 * http://www.w3.org/2005/01/wf/flow#Transition
 */
export const Transition: Class = 'http://www.w3.org/2005/01/wf/flow#Transition';

/**
 * creation
 * 
 * A creation is a change from existence
 * to non-existence
 * a task. Typical properties include date and/or source
 * (a document causing the transition), and a final state.
 *
 * http://www.w3.org/2005/01/wf/flow#Creation
 */
export const Creation: Class = 'http://www.w3.org/2005/01/wf/flow#Creation';

/**
 * terminal state
 * 
 * A state from which there are no transisions.
 *
 * http://www.w3.org/2005/01/wf/flow#TerminalState
 */
export const TerminalState: Class = 'http://www.w3.org/2005/01/wf/flow#TerminalState';

/**
 * non-terminal state
 * 
 * A state from which there are transisions.
 *
 * http://www.w3.org/2005/01/wf/flow#NonTerminalState
 */
export const NonTerminalState: Class = 'http://www.w3.org/2005/01/wf/flow#NonTerminalState';
