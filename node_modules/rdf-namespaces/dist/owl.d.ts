declare type Property = string;
declare type Class = string;
declare type OwlClass = string;
declare type OwlObjectProperty = string;
declare type OwlDatatypeProperty = string;
/**
 * allValuesFrom
 *
 * The property that determines the class that a universal property restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#allValuesFrom
 */
export declare const allValuesFrom: Property;
/**
 * annotatedProperty
 *
 * The property that determines the predicate of an annotated axiom or annotated annotation.
 *
 * http://www.w3.org/2002/07/owl#annotatedProperty
 */
export declare const annotatedProperty: Property;
/**
 * annotatedSource
 *
 * The property that determines the subject of an annotated axiom or annotated annotation.
 *
 * http://www.w3.org/2002/07/owl#annotatedSource
 */
export declare const annotatedSource: Property;
/**
 * annotatedTarget
 *
 * The property that determines the object of an annotated axiom or annotated annotation.
 *
 * http://www.w3.org/2002/07/owl#annotatedTarget
 */
export declare const annotatedTarget: Property;
/**
 * assertionProperty
 *
 * The property that determines the predicate of a negative property assertion.
 *
 * http://www.w3.org/2002/07/owl#assertionProperty
 */
export declare const assertionProperty: Property;
/**
 * cardinality
 *
 * The property that determines the cardinality of an exact cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#cardinality
 */
export declare const cardinality: Property;
/**
 * complementOf
 *
 * The property that determines that a given class is the complement of another class.
 *
 * http://www.w3.org/2002/07/owl#complementOf
 */
export declare const complementOf: Property;
/**
 * datatypeComplementOf
 *
 * The property that determines that a given data range is the complement of another data range with respect to the data domain.
 *
 * http://www.w3.org/2002/07/owl#datatypeComplementOf
 */
export declare const datatypeComplementOf: Property;
/**
 * differentFrom
 *
 * The property that determines that two given individuals are different.
 *
 * http://www.w3.org/2002/07/owl#differentFrom
 */
export declare const differentFrom: Property;
/**
 * disjointUnionOf
 *
 * The property that determines that a given class is equivalent to the disjoint union of a collection of other classes.
 *
 * http://www.w3.org/2002/07/owl#disjointUnionOf
 */
export declare const disjointUnionOf: Property;
/**
 * disjointWith
 *
 * The property that determines that two given classes are disjoint.
 *
 * http://www.w3.org/2002/07/owl#disjointWith
 */
export declare const disjointWith: Property;
/**
 * distinctMembers
 *
 * The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.
 *
 * http://www.w3.org/2002/07/owl#distinctMembers
 */
export declare const distinctMembers: Property;
/**
 * equivalentClass
 *
 * The property that determines that two given classes are equivalent, and that is used to specify datatype definitions.
 *
 * http://www.w3.org/2002/07/owl#equivalentClass
 */
export declare const equivalentClass: Property;
/**
 * equivalentProperty
 *
 * The property that determines that two given properties are equivalent.
 *
 * http://www.w3.org/2002/07/owl#equivalentProperty
 */
export declare const equivalentProperty: Property;
/**
 * hasKey
 *
 * The property that determines the collection of properties that jointly build a key.
 *
 * http://www.w3.org/2002/07/owl#hasKey
 */
export declare const hasKey: Property;
/**
 * hasSelf
 *
 * The property that determines the property that a self restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#hasSelf
 */
export declare const hasSelf: Property;
/**
 * hasValue
 *
 * The property that determines the individual that a has-value restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#hasValue
 */
export declare const hasValue: Property;
/**
 * intersectionOf
 *
 * The property that determines the collection of classes or data ranges that build an intersection.
 *
 * http://www.w3.org/2002/07/owl#intersectionOf
 */
export declare const intersectionOf: Property;
/**
 * inverseOf
 *
 * The property that determines that two given properties are inverse.
 *
 * http://www.w3.org/2002/07/owl#inverseOf
 */
export declare const inverseOf: Property;
/**
 * maxCardinality
 *
 * The property that determines the cardinality of a maximum cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#maxCardinality
 */
export declare const maxCardinality: Property;
/**
 * maxQualifiedCardinality
 *
 * The property that determines the cardinality of a maximum qualified cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#maxQualifiedCardinality
 */
export declare const maxQualifiedCardinality: Property;
/**
 * members
 *
 * The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
 *
 * http://www.w3.org/2002/07/owl#members
 */
export declare const members: Property;
/**
 * minCardinality
 *
 * The property that determines the cardinality of a minimum cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#minCardinality
 */
export declare const minCardinality: Property;
/**
 * minQualifiedCardinality
 *
 * The property that determines the cardinality of a minimum qualified cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#minQualifiedCardinality
 */
export declare const minQualifiedCardinality: Property;
/**
 * onClass
 *
 * The property that determines the class that a qualified object cardinality restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#onClass
 */
export declare const onClass: Property;
/**
 * onDataRange
 *
 * The property that determines the data range that a qualified data cardinality restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#onDataRange
 */
export declare const onDataRange: Property;
/**
 * onDatatype
 *
 * The property that determines the datatype that a datatype restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#onDatatype
 */
export declare const onDatatype: Property;
/**
 * oneOf
 *
 * The property that determines the collection of individuals or data values that build an enumeration.
 *
 * http://www.w3.org/2002/07/owl#oneOf
 */
export declare const oneOf: Property;
/**
 * onProperties
 *
 * The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to.
 *
 * http://www.w3.org/2002/07/owl#onProperties
 */
export declare const onProperties: Property;
/**
 * onProperty
 *
 * The property that determines the property that a property restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#onProperty
 */
export declare const onProperty: Property;
/**
 * propertyChainAxiom
 *
 * The property that determines the n-tuple of properties that build a sub property chain of a given property.
 *
 * http://www.w3.org/2002/07/owl#propertyChainAxiom
 */
export declare const propertyChainAxiom: Property;
/**
 * propertyDisjointWith
 *
 * The property that determines that two given properties are disjoint.
 *
 * http://www.w3.org/2002/07/owl#propertyDisjointWith
 */
export declare const propertyDisjointWith: Property;
/**
 * qualifiedCardinality
 *
 * The property that determines the cardinality of an exact qualified cardinality restriction.
 *
 * http://www.w3.org/2002/07/owl#qualifiedCardinality
 */
export declare const qualifiedCardinality: Property;
/**
 * sameAs
 *
 * The property that determines that two given individuals are equal.
 *
 * http://www.w3.org/2002/07/owl#sameAs
 */
export declare const sameAs: Property;
/**
 * someValuesFrom
 *
 * The property that determines the class that an existential property restriction refers to.
 *
 * http://www.w3.org/2002/07/owl#someValuesFrom
 */
export declare const someValuesFrom: Property;
/**
 * sourceIndividual
 *
 * The property that determines the subject of a negative property assertion.
 *
 * http://www.w3.org/2002/07/owl#sourceIndividual
 */
export declare const sourceIndividual: Property;
/**
 * targetIndividual
 *
 * The property that determines the object of a negative object property assertion.
 *
 * http://www.w3.org/2002/07/owl#targetIndividual
 */
export declare const targetIndividual: Property;
/**
 * targetValue
 *
 * The property that determines the value of a negative data property assertion.
 *
 * http://www.w3.org/2002/07/owl#targetValue
 */
export declare const targetValue: Property;
/**
 * unionOf
 *
 * The property that determines the collection of classes or data ranges that build a union.
 *
 * http://www.w3.org/2002/07/owl#unionOf
 */
export declare const unionOf: Property;
/**
 * withRestrictions
 *
 * The property that determines the collection of facet-value pairs that define a datatype restriction.
 *
 * http://www.w3.org/2002/07/owl#withRestrictions
 */
export declare const withRestrictions: Property;
/**
 * AllDifferent
 *
 * The class of collections of pairwise different individuals.
 *
 * http://www.w3.org/2002/07/owl#AllDifferent
 */
export declare const AllDifferent: Class;
/**
 * AllDisjointClasses
 *
 * The class of collections of pairwise disjoint classes.
 *
 * http://www.w3.org/2002/07/owl#AllDisjointClasses
 */
export declare const AllDisjointClasses: Class;
/**
 * AllDisjointProperties
 *
 * The class of collections of pairwise disjoint properties.
 *
 * http://www.w3.org/2002/07/owl#AllDisjointProperties
 */
export declare const AllDisjointProperties: Class;
/**
 * Annotation
 *
 * The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object.
 *
 * http://www.w3.org/2002/07/owl#Annotation
 */
export declare const Annotation: Class;
/**
 * AnnotationProperty
 *
 * The class of annotation properties.
 *
 * http://www.w3.org/2002/07/owl#AnnotationProperty
 */
export declare const AnnotationProperty: Class;
/**
 * AsymmetricProperty
 *
 * The class of asymmetric properties.
 *
 * http://www.w3.org/2002/07/owl#AsymmetricProperty
 */
export declare const AsymmetricProperty: Class;
/**
 * Axiom
 *
 * The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object.
 *
 * http://www.w3.org/2002/07/owl#Axiom
 */
export declare const Axiom: Class;
/**
 * Class
 *
 * The class of OWL classes.
 *
 * http://www.w3.org/2002/07/owl#Class
 */
export declare const Class: Class;
/**
 * DataRange
 *
 * The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.
 *
 * http://www.w3.org/2002/07/owl#DataRange
 */
export declare const DataRange: Class;
/**
 * DatatypeProperty
 *
 * The class of data properties.
 *
 * http://www.w3.org/2002/07/owl#DatatypeProperty
 */
export declare const DatatypeProperty: Class;
/**
 * DeprecatedClass
 *
 * The class of deprecated classes.
 *
 * http://www.w3.org/2002/07/owl#DeprecatedClass
 */
export declare const DeprecatedClass: Class;
/**
 * DeprecatedProperty
 *
 * The class of deprecated properties.
 *
 * http://www.w3.org/2002/07/owl#DeprecatedProperty
 */
export declare const DeprecatedProperty: Class;
/**
 * FunctionalProperty
 *
 * The class of functional properties.
 *
 * http://www.w3.org/2002/07/owl#FunctionalProperty
 */
export declare const FunctionalProperty: Class;
/**
 * InverseFunctionalProperty
 *
 * The class of inverse-functional properties.
 *
 * http://www.w3.org/2002/07/owl#InverseFunctionalProperty
 */
export declare const InverseFunctionalProperty: Class;
/**
 * IrreflexiveProperty
 *
 * The class of irreflexive properties.
 *
 * http://www.w3.org/2002/07/owl#IrreflexiveProperty
 */
export declare const IrreflexiveProperty: Class;
/**
 * NamedIndividual
 *
 * The class of named individuals.
 *
 * http://www.w3.org/2002/07/owl#NamedIndividual
 */
export declare const NamedIndividual: Class;
/**
 * NegativePropertyAssertion
 *
 * The class of negative property assertions.
 *
 * http://www.w3.org/2002/07/owl#NegativePropertyAssertion
 */
export declare const NegativePropertyAssertion: Class;
/**
 * ObjectProperty
 *
 * The class of object properties.
 *
 * http://www.w3.org/2002/07/owl#ObjectProperty
 */
export declare const ObjectProperty: Class;
/**
 * Ontology
 *
 * The class of ontologies.
 *
 * http://www.w3.org/2002/07/owl#Ontology
 */
export declare const Ontology: Class;
/**
 * OntologyProperty
 *
 * The class of ontology properties.
 *
 * http://www.w3.org/2002/07/owl#OntologyProperty
 */
export declare const OntologyProperty: Class;
/**
 * ReflexiveProperty
 *
 * The class of reflexive properties.
 *
 * http://www.w3.org/2002/07/owl#ReflexiveProperty
 */
export declare const ReflexiveProperty: Class;
/**
 * Restriction
 *
 * The class of property restrictions.
 *
 * http://www.w3.org/2002/07/owl#Restriction
 */
export declare const Restriction: Class;
/**
 * SymmetricProperty
 *
 * The class of symmetric properties.
 *
 * http://www.w3.org/2002/07/owl#SymmetricProperty
 */
export declare const SymmetricProperty: Class;
/**
 * TransitiveProperty
 *
 * The class of transitive properties.
 *
 * http://www.w3.org/2002/07/owl#TransitiveProperty
 */
export declare const TransitiveProperty: Class;
/**
 * Nothing
 *
 * This is the empty class.
 *
 * http://www.w3.org/2002/07/owl#Nothing
 */
export declare const Nothing: OwlClass;
/**
 * Thing
 *
 * The class of OWL individuals.
 *
 * http://www.w3.org/2002/07/owl#Thing
 */
export declare const Thing: OwlClass;
/**
 * bottomObjectProperty
 *
 * The object property that does not relate any two individuals.
 *
 * http://www.w3.org/2002/07/owl#bottomObjectProperty
 */
export declare const bottomObjectProperty: OwlObjectProperty;
/**
 * topObjectProperty
 *
 * The object property that relates every two individuals.
 *
 * http://www.w3.org/2002/07/owl#topObjectProperty
 */
export declare const topObjectProperty: OwlObjectProperty;
/**
 * bottomDataProperty
 *
 * The data property that does not relate any individual to any data value.
 *
 * http://www.w3.org/2002/07/owl#bottomDataProperty
 */
export declare const bottomDataProperty: OwlDatatypeProperty;
/**
 * topDataProperty
 *
 * The data property that relates every individual to every data value.
 *
 * http://www.w3.org/2002/07/owl#topDataProperty
 */
export declare const topDataProperty: OwlDatatypeProperty;
export {};
//# sourceMappingURL=owl.d.ts.map