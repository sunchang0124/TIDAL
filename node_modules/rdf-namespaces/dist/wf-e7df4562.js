'use strict';

/**
 * description
 *
 * The description, definition,
 *         or abstract. Information explaining what this is.
 *         Not arbitrary comment about anything, only about the subject.
 *         (Use this property for anything. There is no domain restriction.).
 *
 * http://www.w3.org/2005/01/wf/flow#description
 */
var description = 'http://www.w3.org/2005/01/wf/flow#description';
/**
 * how
 *
 * Another task upon which this depends, in the sense that
 *         this task cannot be completed without that task being done.
 *         You can't use this for dependencies on anything other than other tasks.
 *         (Note the US spelling of the URI. In the UK, a dependant is a something
 *         which is dependent on somehing else.)
 *
 * http://www.w3.org/2005/01/wf/flow#dependent
 */
var dependent = 'http://www.w3.org/2005/01/wf/flow#dependent';
/**
 * assigned to
 *
 * The person or group to whom this has been assigned.
 *
 * http://www.w3.org/2005/01/wf/flow#assignee
 */
var assignee = 'http://www.w3.org/2005/01/wf/flow#assignee';
/**
 * changed by
 *
 *
 *
 * http://www.w3.org/2005/01/wf/flow#modifiedBy
 */
var modifiedBy = 'http://www.w3.org/2005/01/wf/flow#modifiedBy';
/**
 * subscriber
 *
 *
 *
 * http://www.w3.org/2005/01/wf/flow#subscriber
 */
var subscriber = 'http://www.w3.org/2005/01/wf/flow#subscriber';
/**
 * deliverable
 *
 * Something which must be deliverered to accomplish this
 *
 * http://www.w3.org/2005/01/wf/flow#deliverable
 */
var deliverable = 'http://www.w3.org/2005/01/wf/flow#deliverable';
/**
 * goals
 *
 * A textual description of the goals of this product, etc.
 *
 * http://www.w3.org/2005/01/wf/flow#goalDescription
 */
var goalDescription = 'http://www.w3.org/2005/01/wf/flow#goalDescription';
/**
 * success criteria
 *
 * A textual description of the successs critera.
 *                 How when we know this is done?
 *
 * http://www.w3.org/2005/01/wf/flow#successCriteria
 */
var successCriteria = 'http://www.w3.org/2005/01/wf/flow#successCriteria';
/**
 * due
 *
 * The date this task is due.
 *
 *
 * http://www.w3.org/2005/01/wf/flow#dateDue
 */
var dateDue = 'http://www.w3.org/2005/01/wf/flow#dateDue';
/**
 * attachment
 *
 * Something related is attached for information.
 *
 * http://www.w3.org/2005/01/wf/flow#attachment
 */
var attachment = 'http://www.w3.org/2005/01/wf/flow#attachment';
/**
 * screen shot
 *
 * An image taken by capturing the state of a
 *                  computer screen, for example to demonstrate a problem
 *
 * http://www.w3.org/2005/01/wf/flow#screenShot
 */
var screenShot = 'http://www.w3.org/2005/01/wf/flow#screenShot';
/**
 * test data
 *
 * A file which can be used as inpiut to a test
 *                 or to demonstrate a problem.
 *
 * http://www.w3.org/2005/01/wf/flow#testData
 */
var testData = 'http://www.w3.org/2005/01/wf/flow#testData';
/**
 * terminal output
 *
 * A file showing user interaction from a
 *                 text terminal or console etc.
 *
 * http://www.w3.org/2005/01/wf/flow#terminalOutput
 */
var terminalOutput = 'http://www.w3.org/2005/01/wf/flow#terminalOutput';
/**
 * message
 *
 * A message about this. Attached for information.
 *
 * http://www.w3.org/2005/01/wf/flow#message
 */
var message = 'http://www.w3.org/2005/01/wf/flow#message';
/**
 * to
 *
 *
 *
 * http://www.w3.org/2005/01/wf/flow#recipent
 */
var recipent = 'http://www.w3.org/2005/01/wf/flow#recipent';
/**
 * from
 *
 *
 *
 * http://www.w3.org/2005/01/wf/flow#sender
 */
var sender = 'http://www.w3.org/2005/01/wf/flow#sender';
/**
 * tracker
 *
 *
 *
 * http://www.w3.org/2005/01/wf/flow#tracker
 */
var tracker = 'http://www.w3.org/2005/01/wf/flow#tracker';
/**
 * all issues must be in
 *
 * The class of issues which are allowed in this tracker.
 *                 This is essemtial to the operation of the tracker,
 *                 as it defines which states an issue can be in.
 *                 (The issueClass must be a disjointUnionOf the state classes)
 *
 * http://www.w3.org/2005/01/wf/flow#issueClass
 */
var issueClass = 'http://www.w3.org/2005/01/wf/flow#issueClass';
/**
 * issue category
 *
 * Issues may be categorized according to the
 *                 subclasses of this class
 *
 * http://www.w3.org/2005/01/wf/flow#issueCategory
 */
var issueCategory = 'http://www.w3.org/2005/01/wf/flow#issueCategory';
/**
 * state store
 *
 * A read-write document.
 *                 The state of the issues is modified here.
 *                 When you set up a trcaker, thgis must be set to point
 *                 to a writeble data resource on the web.
 *
 * http://www.w3.org/2005/01/wf/flow#stateStore
 */
var stateStore = 'http://www.w3.org/2005/01/wf/flow#stateStore';
/**
 * transaction store
 *
 * An appendable document. Transactions and messsages
 *                     can be written into here
 *
 * http://www.w3.org/2005/01/wf/flow#transactionStore
 */
var transactionStore = 'http://www.w3.org/2005/01/wf/flow#transactionStore';
/**
 * assignees must be
 *
 * When an issue is assigned, the assignee must be from this class
 *
 * http://www.w3.org/2005/01/wf/flow#asigneeClass
 */
var asigneeClass = 'http://www.w3.org/2005/01/wf/flow#asigneeClass';
/**
 * initial state
 *
 * The initial state for a new issue
 *
 * http://www.w3.org/2005/01/wf/flow#initialState
 */
var initialState = 'http://www.w3.org/2005/01/wf/flow#initialState';
/**
 * to
 *
 *
 *
 * http://www.w3.org/2005/01/wf/flow#final
 */
var final = 'http://www.w3.org/2005/01/wf/flow#final';
/**
 * task
 *
 *
 *
 * http://www.w3.org/2005/01/wf/flow#task
 */
var task = 'http://www.w3.org/2005/01/wf/flow#task';
/**
 * requires
 *
 * To be a valid transition,
 * 		a necessary (but not necessarily sufficuent) condition
 * 		is that there be recorded these properties for the record
 *
 * http://www.w3.org/2005/01/wf/flow#requires
 */
var requires = 'http://www.w3.org/2005/01/wf/flow#requires';
/**
 * affects
 *
 *
 *
 * http://www.w3.org/2005/01/wf/flow#affects
 */
var affects = 'http://www.w3.org/2005/01/wf/flow#affects';
/**
 * creates
 *
 *
 *
 * http://www.w3.org/2005/01/wf/flow#creates
 */
var creates = 'http://www.w3.org/2005/01/wf/flow#creates';
/**
 * allowed transitions
 *
 * The state machine is defined
 * 	by these lists of transition allowed for each issue.
 * 	(An interesting option in the Web is to make an allowed transition
 * 	to a state in soemone else's ontology, which in turn allows
 * 	transitions into many ontologies.  So a finite state maxchine
 * 	may become very large. In practice this means that a task handed
 * 	off to another organization may be processed on all kinds of ways.)
 *
 * http://www.w3.org/2005/01/wf/flow#allowedTransitions
 */
var allowedTransitions = 'http://www.w3.org/2005/01/wf/flow#allowedTransitions';
/**
 * issue
 *
 * A transition changes the state of the given issue.
 *
 * http://www.w3.org/2005/01/wf/flow#issue
 */
var issue = 'http://www.w3.org/2005/01/wf/flow#issue';
/**
 * source
 *
 * The source of a transition is
 * 				the document by which it happened
 *
 * http://www.w3.org/2005/01/wf/flow#source
 */
var source = 'http://www.w3.org/2005/01/wf/flow#source';
/**
 * task
 *
 * Something to be done in a wide sense,
 * 	an agenda item at a meeting is one example, but any
 * 	issue, task, action item, goal, product, deliverable, milestone, can such a thing.
 * 	The requirement for this framework was that it would allow
 * 	one to customize ontologies for things such as agenda items,
 * 	action items, working group issues with a spec, w3c Last Call issues,
 * 	software bugs and administrative requests.
 * 	In π-calculus, a process.
 * 	Make your type of issue a subclass of Task.
 *
 *
 * http://www.w3.org/2005/01/wf/flow#Task
 */
var Task = 'http://www.w3.org/2005/01/wf/flow#Task';
/**
 * open
 *
 * A task which needs attention. The very crude states of Open and Closed all
 *         interoperatbility between different systems if the states for a given
 *         application are made subclasses of either Open or Closed. This allows
 *         tasks from different systems to be mixed and treatd together with
 *         limited but valuable functionality.
 *
 *
 * http://www.w3.org/2005/01/wf/flow#Open
 */
var Open = 'http://www.w3.org/2005/01/wf/flow#Open';
/**
 * closed
 *
 * A task which does not neeed attention. It may be closed because
 *         has been abandonned or completed, for example.
 *
 *
 * http://www.w3.org/2005/01/wf/flow#Closed
 */
var Closed = 'http://www.w3.org/2005/01/wf/flow#Closed';
/**
 * product
 *
 * A product is a task which monitors something
 *                 which must be produced.
 *
 * http://www.w3.org/2005/01/wf/flow#Product
 */
var Product = 'http://www.w3.org/2005/01/wf/flow#Product';
/**
 * message
 *
 *
 *
 * http://www.w3.org/2005/01/wf/flow#Message
 */
var Message = 'http://www.w3.org/2005/01/wf/flow#Message';
/**
 * tracker
 *
 * A set of issues and
 *                 the constraints on how they evolve.
 *                 To use this ontology, craete a new tracker.
 *                 Copy an existing one or make up your own.
 *
 * http://www.w3.org/2005/01/wf/flow#Tracker
 */
var Tracker = 'http://www.w3.org/2005/01/wf/flow#Tracker';
/**
 * change
 *
 * The universal class of things which
 * change the state of a task.
 * Included now: Creation, Transition. (Maybe in the future
 * more π-calculus constructions such as splitting & merging tasks,
 * and import/export of obligations to a foreign opaque system.)
 *
 *
 * http://www.w3.org/2005/01/wf/flow#Change
 */
var Change = 'http://www.w3.org/2005/01/wf/flow#Change';
/**
 * transition
 *
 * A transition is a change of state of
 * a task. Typical properties include date and/or source
 * (a document causing the transition), and a final state.
 *
 * http://www.w3.org/2005/01/wf/flow#Transition
 */
var Transition = 'http://www.w3.org/2005/01/wf/flow#Transition';
/**
 * creation
 *
 * A creation is a change from existence
 * to non-existence
 * a task. Typical properties include date and/or source
 * (a document causing the transition), and a final state.
 *
 * http://www.w3.org/2005/01/wf/flow#Creation
 */
var Creation = 'http://www.w3.org/2005/01/wf/flow#Creation';
/**
 * terminal state
 *
 * A state from which there are no transisions.
 *
 * http://www.w3.org/2005/01/wf/flow#TerminalState
 */
var TerminalState = 'http://www.w3.org/2005/01/wf/flow#TerminalState';
/**
 * non-terminal state
 *
 * A state from which there are transisions.
 *
 * http://www.w3.org/2005/01/wf/flow#NonTerminalState
 */
var NonTerminalState = 'http://www.w3.org/2005/01/wf/flow#NonTerminalState';

var wfImport = /*#__PURE__*/Object.freeze({
	description: description,
	dependent: dependent,
	assignee: assignee,
	modifiedBy: modifiedBy,
	subscriber: subscriber,
	deliverable: deliverable,
	goalDescription: goalDescription,
	successCriteria: successCriteria,
	dateDue: dateDue,
	attachment: attachment,
	screenShot: screenShot,
	testData: testData,
	terminalOutput: terminalOutput,
	message: message,
	recipent: recipent,
	sender: sender,
	tracker: tracker,
	issueClass: issueClass,
	issueCategory: issueCategory,
	stateStore: stateStore,
	transactionStore: transactionStore,
	asigneeClass: asigneeClass,
	initialState: initialState,
	final: final,
	task: task,
	requires: requires,
	affects: affects,
	creates: creates,
	allowedTransitions: allowedTransitions,
	issue: issue,
	source: source,
	Task: Task,
	Open: Open,
	Closed: Closed,
	Product: Product,
	Message: Message,
	Tracker: Tracker,
	Change: Change,
	Transition: Transition,
	Creation: Creation,
	TerminalState: TerminalState,
	NonTerminalState: NonTerminalState
});

exports.Change = Change;
exports.Closed = Closed;
exports.Creation = Creation;
exports.Message = Message;
exports.NonTerminalState = NonTerminalState;
exports.Open = Open;
exports.Product = Product;
exports.Task = Task;
exports.TerminalState = TerminalState;
exports.Tracker = Tracker;
exports.Transition = Transition;
exports.affects = affects;
exports.allowedTransitions = allowedTransitions;
exports.asigneeClass = asigneeClass;
exports.assignee = assignee;
exports.attachment = attachment;
exports.creates = creates;
exports.dateDue = dateDue;
exports.deliverable = deliverable;
exports.dependent = dependent;
exports.description = description;
exports.final = final;
exports.goalDescription = goalDescription;
exports.initialState = initialState;
exports.issue = issue;
exports.issueCategory = issueCategory;
exports.issueClass = issueClass;
exports.message = message;
exports.modifiedBy = modifiedBy;
exports.recipent = recipent;
exports.requires = requires;
exports.screenShot = screenShot;
exports.sender = sender;
exports.source = source;
exports.stateStore = stateStore;
exports.subscriber = subscriber;
exports.successCriteria = successCriteria;
exports.task = task;
exports.terminalOutput = terminalOutput;
exports.testData = testData;
exports.tracker = tracker;
exports.transactionStore = transactionStore;
exports.wfImport = wfImport;
