declare type Property = string;
declare type Class = string;
/**
 * access control
 *
 * The Access Control file for this information resource.
 *         This may of course be a virtual resource implemented by the access control system.
 *         Note also HTTP's header  Link:  foo.meta ;rel=meta can be used for this.
 *
 * http://www.w3.org/ns/auth/acl#accessControl
 */
export declare const accessControl: Property;
/**
 * to
 *
 * The information resource to which access is being granted.
 *
 * http://www.w3.org/ns/auth/acl#accessTo
 */
export declare const accessTo: Property;
/**
 * to all in
 *
 * A class of information resources to which access is being granted.
 *
 * http://www.w3.org/ns/auth/acl#accessToClass
 */
export declare const accessToClass: Property;
/**
 * agent
 *
 * A person or social entity to being given the right
 *
 * http://www.w3.org/ns/auth/acl#agent
 */
export declare const agent: Property;
/**
 * agent class
 *
 * A class of persons or social entities to being given the right
 *
 * http://www.w3.org/ns/auth/acl#agentClass
 */
export declare const agentClass: Property;
/**
 * agent group
 *
 * A group of persons or social entities to being given the right.
 *           The right is given to any entity which is a vcard:member of the group,
 *           as defined by the document received when the Group is dereferenced.
 *
 * http://www.w3.org/ns/auth/acl#agentGroup
 */
export declare const agentGroup: Property;
/**
 * default access for things in this
 *
 * If a resource has no ACL file (it is 404),
 *         then access to the resource if given by the ACL of the immediately
 *         containing directory, or failing that (404) the ACL of the recursively next
 *         containing directory which has an ACL file.
 *         Within that ACL file,
 *         any Authentication which has that directory as its acl:default applies to the
 *         resource. (The highest directory must have an ACL file.)
 *
 * Note that `default` is a reserved Javascript keyword, and is therefore suffixed by `__workaround`.
 * For a list of reserved keywords, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords.
 *
 * http://www.w3.org/ns/auth/acl#default
 */
export declare const default__workaround: Property;
/**
 * default access for new things in the object
 *
 * THIS IS OBSOLETE AS OF 2017-08-01.   See 'default'.
 *         Was: A directory for which this authorization is used for new files in the directory.
 *
 * http://www.w3.org/ns/auth/acl#defaultForNew
 */
export declare const defaultForNew: Property;
/**
 * delegates
 *
 * Delegates a person or another agent to act on behalf of the agent.
 *     For example, Alice delegates Bob to act on behalf of Alice for ACL purposes.
 *
 * http://www.w3.org/ns/auth/acl#delegates
 */
export declare const delegates: Property;
/**
 * access mode
 *
 * A mode of access such as read or write.
 *
 * http://www.w3.org/ns/auth/acl#mode
 */
export declare const mode: Property;
/**
 * origin
 *
 * A web application, identified by its Origin, such as
 *         <https://scripts.example.com>, being given the right.
 *         When a user of the web application at a certain origin accesses the server,
 *         then the browser sets the Origin: header to warn that a possibly untrusted webapp
 *         is being used.
 *         Then, BOTH the user AND the origin must have the required access.
 *
 * http://www.w3.org/ns/auth/acl#origin
 */
export declare const origin: Property;
/**
 * owner
 *
 * The person or other agent which owns this.
 *     For example, the owner of a file in a filesystem.
 *     There is a sense of right to control.   Typically defaults to the agent who craeted
 *     something but can be changed.
 *
 * http://www.w3.org/ns/auth/acl#owner
 */
export declare const owner: Property;
/**
 *
 *
 * Any kind of access to a resource. Don't use this, use R W and RW
 *
 * http://www.w3.org/ns/auth/acl#Access
 */
export declare const Access: Class;
/**
 * append
 *
 * Append accesses are specific write access which only add information, and do not remove information.
 *     For text files, for example, append access allows bytes to be added onto the end of the file.
 *     For RDF graphs, Append access allows adds triples to the graph but does not remove any.
 *     Append access is useful for dropbox functionality.
 *     Dropbox can be used for link notification, which the information added is a notification
 *     that a some link has been made elsewhere relevant to the given resource.
 *
 *
 * http://www.w3.org/ns/auth/acl#Append
 */
export declare const Append: Class;
/**
 * Anyone authenticated
 *
 * A class of agents who have been authenticated.
 * In other words, anyone can access this resource, but not anonymously.
 * The social expectation is that the authentication process will provide an
 * identify and a name, or pseudonym.
 * (A new ID should not be minted for every access: the intent is that the user
 * is able to continue to use the ID for continues interactions with peers,
 * and for example to develop a reputation)
 *
 *
 * http://www.w3.org/ns/auth/acl#AuthenticatedAgent
 */
export declare const AuthenticatedAgent: Class;
/**
 * authorization
 *
 * An element of access control,
 *     allowing agent to agents access of some kind to resources or classes of resources
 *
 * http://www.w3.org/ns/auth/acl#Authorization
 */
export declare const Authorization: Class;
/**
 * control
 *
 * Allows read/write access to the ACL for the resource(s)
 *
 * http://www.w3.org/ns/auth/acl#Control
 */
export declare const Control: Class;
/**
 * Origin
 *
 * An Origin is basically a web site
 *         (Note WITHOUT the trailing slash after the domain name and port in its URI)
 *         and is the basis for controlling access to data by web apps
 *         in the Same Origin Model of web security.
 *         All scripts from the same origin are given the same right.
 *
 * http://www.w3.org/ns/auth/acl#Origin
 */
export declare const Origin: Class;
/**
 * read
 *
 * The class of read operations
 *
 * http://www.w3.org/ns/auth/acl#Read
 */
export declare const Read: Class;
/**
 * write
 *
 *
 *
 * http://www.w3.org/ns/auth/acl#Write
 */
export declare const Write: Class;
export {};
//# sourceMappingURL=acl.d.ts.map