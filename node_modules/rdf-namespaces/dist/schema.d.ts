declare type Property = string;
declare type Class = string;
/**
 * acceptedAnswer
 *
 * The answer(s) that has been accepted as best, typically on a Question/Answer site. Sites vary in their selection mechanisms, e.g. drawing on community opinion and/or the view of the Question author.
 *
 * http://schema.org/acceptedAnswer
 */
export declare const acceptedAnswer: Property;
/**
 * acceptedOffer
 *
 * The offer(s) -- e.g., product, quantity and price combinations -- included in the order.
 *
 * http://schema.org/acceptedOffer
 */
export declare const acceptedOffer: Property;
/**
 * acceptedPaymentMethod
 *
 * The payment method(s) accepted by seller for this offer.
 *
 * http://schema.org/acceptedPaymentMethod
 */
export declare const acceptedPaymentMethod: Property;
/**
 * acceptsReservations
 *
 * Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings <code>Yes</code> or <code>No</code>.
 *
 * http://schema.org/acceptsReservations
 */
export declare const acceptsReservations: Property;
/**
 * accessCode
 *
 * Password, PIN, or access code needed for delivery (e.g. from a locker).
 *
 * http://schema.org/accessCode
 */
export declare const accessCode: Property;
/**
 * accessMode
 *
 * The human sensory perceptual system or cognitive faculty through which a person may process or perceive information. Expected values include: auditory, tactile, textual, visual, colorDependent, chartOnVisual, chemOnVisual, diagramOnVisual, mathOnVisual, musicOnVisual, textOnVisual.
 *
 * http://schema.org/accessMode
 */
export declare const accessMode: Property;
/**
 * accessModeSufficient
 *
 * A list of single or combined accessModes that are sufficient to understand all the intellectual content of a resource. Expected values include:  auditory, tactile, textual, visual.
 *
 * http://schema.org/accessModeSufficient
 */
export declare const accessModeSufficient: Property;
/**
 * accessibilityAPI
 *
 * Indicates that the resource is compatible with the referenced accessibility API (<a href="http://www.w3.org/wiki/WebSchemas/Accessibility">WebSchemas wiki lists possible values</a>).
 *
 * http://schema.org/accessibilityAPI
 */
export declare const accessibilityAPI: Property;
/**
 * accessibilityControl
 *
 * Identifies input methods that are sufficient to fully control the described resource (<a href="http://www.w3.org/wiki/WebSchemas/Accessibility">WebSchemas wiki lists possible values</a>).
 *
 * http://schema.org/accessibilityControl
 */
export declare const accessibilityControl: Property;
/**
 * accessibilityFeature
 *
 * Content features of the resource, such as accessible media, alternatives and supported enhancements for accessibility (<a href="http://www.w3.org/wiki/WebSchemas/Accessibility">WebSchemas wiki lists possible values</a>).
 *
 * http://schema.org/accessibilityFeature
 */
export declare const accessibilityFeature: Property;
/**
 * accessibilityHazard
 *
 * A characteristic of the described resource that is physiologically dangerous to some users. Related to WCAG 2.0 guideline 2.3 (<a href="http://www.w3.org/wiki/WebSchemas/Accessibility">WebSchemas wiki lists possible values</a>).
 *
 * http://schema.org/accessibilityHazard
 */
export declare const accessibilityHazard: Property;
/**
 * accessibilitySummary
 *
 * A human-readable summary of specific accessibility features or deficiencies, consistent with the other accessibility metadata but expressing subtleties such as "short descriptions are present but long descriptions will be needed for non-visual users" or "short descriptions are present and no long descriptions are needed."
 *
 * http://schema.org/accessibilitySummary
 */
export declare const accessibilitySummary: Property;
/**
 * accountId
 *
 * The identifier for the account the payment will be applied to.
 *
 * http://schema.org/accountId
 */
export declare const accountId: Property;
/**
 * accountablePerson
 *
 * Specifies the Person that is legally accountable for the CreativeWork.
 *
 * http://schema.org/accountablePerson
 */
export declare const accountablePerson: Property;
/**
 * acquiredFrom
 *
 * The organization or person from which the product was acquired.
 *
 * http://schema.org/acquiredFrom
 */
export declare const acquiredFrom: Property;
/**
 * actionAccessibilityRequirement
 *
 * A set of requirements that a must be fulfilled in order to perform an Action. If more than one value is specied, fulfilling one set of requirements will allow the Action to be performed.
 *
 * http://schema.org/actionAccessibilityRequirement
 */
export declare const actionAccessibilityRequirement: Property;
/**
 * actionPlatform
 *
 * The high level platform(s) where the Action can be performed for the given URL. To specify a specific application or operating system instance, use actionApplication.
 *
 * http://schema.org/actionPlatform
 */
export declare const actionPlatform: Property;
/**
 * actionStatus
 *
 * Indicates the current disposition of the Action.
 *
 * http://schema.org/actionStatus
 */
export declare const actionStatus: Property;
/**
 * actors
 *
 * An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
 *
 * http://schema.org/actors
 */
export declare const actors: Property;
/**
 * addOn
 *
 * An additional offer that can only be obtained in combination with the first base offer (e.g. supplements and extensions that are available for a surcharge).
 *
 * http://schema.org/addOn
 */
export declare const addOn: Property;
/**
 * additionalName
 *
 * An additional name for a Person, can be used for a middle name.
 *
 * http://schema.org/additionalName
 */
export declare const additionalName: Property;
/**
 * additionalNumberOfGuests
 *
 * If responding yes, the number of guests who will attend in addition to the invitee.
 *
 * http://schema.org/additionalNumberOfGuests
 */
export declare const additionalNumberOfGuests: Property;
/**
 * additionalProperty
 *
 * A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.<br/><br/>
 *
 * Note: Publishers should be aware that applications designed to use specific schema.org properties (e.g. http://schema.org/width, http://schema.org/color, http://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
 *
 * http://schema.org/additionalProperty
 */
export declare const additionalProperty: Property;
/**
 * additionalType
 *
 * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
 *
 * http://schema.org/additionalType
 */
export declare const additionalType: Property;
/**
 * address
 *
 * Physical address of the item.
 *
 * http://schema.org/address
 */
export declare const address: Property;
/**
 * addressCountry
 *
 * The country. For example, USA. You can also provide the two-letter <a href="http://en.wikipedia.org/wiki/ISO_3166-1">ISO 3166-1 alpha-2 country code</a>.
 *
 * http://schema.org/addressCountry
 */
export declare const addressCountry: Property;
/**
 * addressLocality
 *
 * The locality in which the street address is, and which is in the region. For example, Mountain View.
 *
 * http://schema.org/addressLocality
 */
export declare const addressLocality: Property;
/**
 * addressRegion
 *
 * The region in which the locality is, and which is in the country. For example, California or another appropriate first-level <a href="https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country">Administrative division</a>
 *
 * http://schema.org/addressRegion
 */
export declare const addressRegion: Property;
/**
 * advanceBookingRequirement
 *
 * The amount of time that is required between accepting the offer and the actual usage of the resource or service.
 *
 * http://schema.org/advanceBookingRequirement
 */
export declare const advanceBookingRequirement: Property;
/**
 * affiliation
 *
 * An organization that this person is affiliated with. For example, a school/university, a club, or a team.
 *
 * http://schema.org/affiliation
 */
export declare const affiliation: Property;
/**
 * afterMedia
 *
 * A media object representing the circumstances after performing this direction.
 *
 * http://schema.org/afterMedia
 */
export declare const afterMedia: Property;
/**
 * agent
 *
 * The direct performer or driver of the action (animate or inanimate). e.g. <em>John</em> wrote a book.
 *
 * http://schema.org/agent
 */
export declare const agent: Property;
/**
 * aggregateRating
 *
 * The overall rating, based on a collection of reviews or ratings, of the item.
 *
 * http://schema.org/aggregateRating
 */
export declare const aggregateRating: Property;
/**
 * aircraft
 *
 * The kind of aircraft (e.g., "Boeing 747").
 *
 * http://schema.org/aircraft
 */
export declare const aircraft: Property;
/**
 * albumProductionType
 *
 * Classification of the album by it's type of content: soundtrack, live album, studio album, etc.
 *
 * http://schema.org/albumProductionType
 */
export declare const albumProductionType: Property;
/**
 * albumReleaseType
 *
 * The kind of release which this album is: single, EP or album.
 *
 * http://schema.org/albumReleaseType
 */
export declare const albumReleaseType: Property;
/**
 * albums
 *
 * A collection of music albums.
 *
 * http://schema.org/albums
 */
export declare const albums: Property;
/**
 * alignmentType
 *
 * A category of alignment between the learning resource and the framework node. Recommended values include: 'assesses', 'teaches', 'requires', 'textComplexity', 'readingLevel', 'educationalSubject', and 'educationalLevel'.
 *
 * http://schema.org/alignmentType
 */
export declare const alignmentType: Property;
/**
 * alternateName
 *
 * An alias for the item.
 *
 * http://schema.org/alternateName
 */
export declare const alternateName: Property;
/**
 * alternativeHeadline
 *
 * A secondary title of the CreativeWork.
 *
 * http://schema.org/alternativeHeadline
 */
export declare const alternativeHeadline: Property;
/**
 * amenityFeature
 *
 * An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
 *
 * http://schema.org/amenityFeature
 */
export declare const amenityFeature: Property;
/**
 * amount
 *
 * The amount of money.
 *
 * http://schema.org/amount
 */
export declare const amount: Property;
/**
 * amountOfThisGood
 *
 * The quantity of the goods included in the offer.
 *
 * http://schema.org/amountOfThisGood
 */
export declare const amountOfThisGood: Property;
/**
 * annualPercentageRate
 *
 * The annual rate that is charged for borrowing (or made by investing), expressed as a single percentage number that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction.
 *
 * http://schema.org/annualPercentageRate
 */
export declare const annualPercentageRate: Property;
/**
 * answerCount
 *
 * The number of answers this question has received.
 *
 * http://schema.org/answerCount
 */
export declare const answerCount: Property;
/**
 * application
 *
 * An application that can complete the request.
 *
 * http://schema.org/application
 */
export declare const application: Property;
/**
 * applicationCategory
 *
 * Type of software application, e.g. 'Game, Multimedia'.
 *
 * http://schema.org/applicationCategory
 */
export declare const applicationCategory: Property;
/**
 * applicationSubCategory
 *
 * Subcategory of the application, e.g. 'Arcade Game'.
 *
 * http://schema.org/applicationSubCategory
 */
export declare const applicationSubCategory: Property;
/**
 * applicationSuite
 *
 * The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
 *
 * http://schema.org/applicationSuite
 */
export declare const applicationSuite: Property;
/**
 * appliesToDeliveryMethod
 *
 * The delivery method(s) to which the delivery charge or payment charge specification applies.
 *
 * http://schema.org/appliesToDeliveryMethod
 */
export declare const appliesToDeliveryMethod: Property;
/**
 * appliesToPaymentMethod
 *
 * The payment method(s) to which the payment charge specification applies.
 *
 * http://schema.org/appliesToPaymentMethod
 */
export declare const appliesToPaymentMethod: Property;
/**
 * area
 *
 * The area within which users can expect to reach the broadcast service.
 *
 * http://schema.org/area
 */
export declare const area: Property;
/**
 * arrivalAirport
 *
 * The airport where the flight terminates.
 *
 * http://schema.org/arrivalAirport
 */
export declare const arrivalAirport: Property;
/**
 * arrivalBusStop
 *
 * The stop or station from which the bus arrives.
 *
 * http://schema.org/arrivalBusStop
 */
export declare const arrivalBusStop: Property;
/**
 * arrivalGate
 *
 * Identifier of the flight's arrival gate.
 *
 * http://schema.org/arrivalGate
 */
export declare const arrivalGate: Property;
/**
 * arrivalPlatform
 *
 * The platform where the train arrives.
 *
 * http://schema.org/arrivalPlatform
 */
export declare const arrivalPlatform: Property;
/**
 * arrivalStation
 *
 * The station where the train trip ends.
 *
 * http://schema.org/arrivalStation
 */
export declare const arrivalStation: Property;
/**
 * arrivalTerminal
 *
 * Identifier of the flight's arrival terminal.
 *
 * http://schema.org/arrivalTerminal
 */
export declare const arrivalTerminal: Property;
/**
 * arrivalTime
 *
 * The expected arrival time.
 *
 * http://schema.org/arrivalTime
 */
export declare const arrivalTime: Property;
/**
 * artEdition
 *
 * The number of copies when multiple copies of a piece of artwork are produced - e.g. for a limited edition of 20 prints, 'artEdition' refers to the total number of copies (in this example "20").
 *
 * http://schema.org/artEdition
 */
export declare const artEdition: Property;
/**
 * artMedium
 *
 * The material used. (e.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype, Digital, Lithograph, DryPoint, Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.)
 *
 * http://schema.org/artMedium
 */
export declare const artMedium: Property;
/**
 * artform
 *
 * e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc.
 *
 * http://schema.org/artform
 */
export declare const artform: Property;
/**
 * articleBody
 *
 * The actual body of the article.
 *
 * http://schema.org/articleBody
 */
export declare const articleBody: Property;
/**
 * articleSection
 *
 * Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports, Lifestyle, etc.
 *
 * http://schema.org/articleSection
 */
export declare const articleSection: Property;
/**
 * assembly
 *
 * Library file name e.g., mscorlib.dll, system.web.dll.
 *
 * http://schema.org/assembly
 */
export declare const assembly: Property;
/**
 * assemblyVersion
 *
 * Associated product/technology version. e.g., .NET Framework 4.5.
 *
 * http://schema.org/assemblyVersion
 */
export declare const assemblyVersion: Property;
/**
 * associatedArticle
 *
 * A NewsArticle associated with the Media Object.
 *
 * http://schema.org/associatedArticle
 */
export declare const associatedArticle: Property;
/**
 * associatedMedia
 *
 * A media object that encodes this CreativeWork. This property is a synonym for encoding.
 *
 * http://schema.org/associatedMedia
 */
export declare const associatedMedia: Property;
/**
 * athlete
 *
 * A person that acts as performing member of a sports team; a player as opposed to a coach.
 *
 * http://schema.org/athlete
 */
export declare const athlete: Property;
/**
 * attendees
 *
 * A person attending the event.
 *
 * http://schema.org/attendees
 */
export declare const attendees: Property;
/**
 * audienceType
 *
 * The target group associated with a given audience (e.g. veterans, car owners, musicians, etc.).
 *
 * http://schema.org/audienceType
 */
export declare const audienceType: Property;
/**
 * audio
 *
 * An embedded audio object.
 *
 * http://schema.org/audio
 */
export declare const audio: Property;
/**
 * authenticator
 *
 * The Organization responsible for authenticating the user's subscription. For example, many media apps require a cable/satellite provider to authenticate your subscription before playing media.
 *
 * http://schema.org/authenticator
 */
export declare const authenticator: Property;
/**
 * author
 *
 * The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.
 *
 * http://schema.org/author
 */
export declare const author: Property;
/**
 * availability
 *
 * The availability of this item&#x2014;for example In stock, Out of stock, Pre-order, etc.
 *
 * http://schema.org/availability
 */
export declare const availability: Property;
/**
 * availabilityEnds
 *
 * The end of the availability of the product or service included in the offer.
 *
 * http://schema.org/availabilityEnds
 */
export declare const availabilityEnds: Property;
/**
 * availabilityStarts
 *
 * The beginning of the availability of the product or service included in the offer.
 *
 * http://schema.org/availabilityStarts
 */
export declare const availabilityStarts: Property;
/**
 * availableAtOrFrom
 *
 * The place(s) from which the offer can be obtained (e.g. store locations).
 *
 * http://schema.org/availableAtOrFrom
 */
export declare const availableAtOrFrom: Property;
/**
 * availableChannel
 *
 * A means of accessing the service (e.g. a phone bank, a web site, a location, etc.).
 *
 * http://schema.org/availableChannel
 */
export declare const availableChannel: Property;
/**
 * availableDeliveryMethod
 *
 * The delivery method(s) available for this offer.
 *
 * http://schema.org/availableDeliveryMethod
 */
export declare const availableDeliveryMethod: Property;
/**
 * availableFrom
 *
 * When the item is available for pickup from the store, locker, etc.
 *
 * http://schema.org/availableFrom
 */
export declare const availableFrom: Property;
/**
 * availableLanguage
 *
 * A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="http://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>. See also <a class="localLink" href="http://schema.org/inLanguage">inLanguage</a>
 *
 * http://schema.org/availableLanguage
 */
export declare const availableLanguage: Property;
/**
 * availableThrough
 *
 * After this date, the item will no longer be available for pickup.
 *
 * http://schema.org/availableThrough
 */
export declare const availableThrough: Property;
/**
 * awards
 *
 * Awards won by or for this item.
 *
 * http://schema.org/awards
 */
export declare const awards: Property;
/**
 * awayTeam
 *
 * The away team in a sports event.
 *
 * http://schema.org/awayTeam
 */
export declare const awayTeam: Property;
/**
 * baseSalary
 *
 * The base salary of the job or of an employee in an EmployeeRole.
 *
 * http://schema.org/baseSalary
 */
export declare const baseSalary: Property;
/**
 * bccRecipient
 *
 * A sub property of recipient. The recipient blind copied on a message.
 *
 * http://schema.org/bccRecipient
 */
export declare const bccRecipient: Property;
/**
 * bed
 *
 * The type of bed or beds included in the accommodation. For the single case of just one bed of a certain type, you use bed directly with a text.
 *       If you want to indicate the quantity of a certain kind of bed, use an instance of BedDetails. For more detailed information, use the amenityFeature property.
 *
 * http://schema.org/bed
 */
export declare const bed: Property;
/**
 * beforeMedia
 *
 * A media object representing the circumstances before performing this direction.
 *
 * http://schema.org/beforeMedia
 */
export declare const beforeMedia: Property;
/**
 * benefits
 *
 * Description of benefits associated with the job.
 *
 * http://schema.org/benefits
 */
export declare const benefits: Property;
/**
 * bestRating
 *
 * The highest value allowed in this rating system. If bestRating is omitted, 5 is assumed.
 *
 * http://schema.org/bestRating
 */
export declare const bestRating: Property;
/**
 * billingAddress
 *
 * The billing address for the order.
 *
 * http://schema.org/billingAddress
 */
export declare const billingAddress: Property;
/**
 * billingIncrement
 *
 * This property specifies the minimal quantity and rounding increment that will be the basis for the billing. The unit of measurement is specified by the unitCode property.
 *
 * http://schema.org/billingIncrement
 */
export declare const billingIncrement: Property;
/**
 * billingPeriod
 *
 * The time interval used to compute the invoice.
 *
 * http://schema.org/billingPeriod
 */
export declare const billingPeriod: Property;
/**
 * birthDate
 *
 * Date of birth.
 *
 * http://schema.org/birthDate
 */
export declare const birthDate: Property;
/**
 * birthPlace
 *
 * The place where the person was born.
 *
 * http://schema.org/birthPlace
 */
export declare const birthPlace: Property;
/**
 * bitrate
 *
 * The bitrate of the media object.
 *
 * http://schema.org/bitrate
 */
export declare const bitrate: Property;
/**
 * blogPosts
 *
 * The postings that are part of this blog.
 *
 * http://schema.org/blogPosts
 */
export declare const blogPosts: Property;
/**
 * boardingGroup
 *
 * The airline-specific indicator of boarding order / preference.
 *
 * http://schema.org/boardingGroup
 */
export declare const boardingGroup: Property;
/**
 * boardingPolicy
 *
 * The type of boarding policy used by the airline (e.g. zone-based or group-based).
 *
 * http://schema.org/boardingPolicy
 */
export declare const boardingPolicy: Property;
/**
 * bookEdition
 *
 * The edition of the book.
 *
 * http://schema.org/bookEdition
 */
export declare const bookEdition: Property;
/**
 * bookFormat
 *
 * The format of the book.
 *
 * http://schema.org/bookFormat
 */
export declare const bookFormat: Property;
/**
 * bookingAgent
 *
 * 'bookingAgent' is an out-dated term indicating a 'broker' that serves as a booking agent.
 *
 * http://schema.org/bookingAgent
 */
export declare const bookingAgent: Property;
/**
 * bookingTime
 *
 * The date and time the reservation was booked.
 *
 * http://schema.org/bookingTime
 */
export declare const bookingTime: Property;
/**
 * borrower
 *
 * A sub property of participant. The person that borrows the object being lent.
 *
 * http://schema.org/borrower
 */
export declare const borrower: Property;
/**
 * box
 *
 * A box is the area enclosed by the rectangle formed by two points. The first point is the lower corner, the second point is the upper corner. A box is expressed as two points separated by a space character.
 *
 * http://schema.org/box
 */
export declare const box: Property;
/**
 * branchCode
 *
 * A short textual code (also called "store code") that uniquely identifies a place of business. The code is typically assigned by the parentOrganization and used in structured URLs.<br/><br/>
 *
 * For example, in the URL http://www.starbucks.co.uk/store-locator/etc/detail/3047 the code "3047" is a branchCode for a particular branch.
 *
 * http://schema.org/branchCode
 */
export declare const branchCode: Property;
/**
 * branchOf
 *
 * The larger organization that this local business is a branch of, if any. Not to be confused with (anatomical)<a class="localLink" href="http://schema.org/branch">branch</a>.
 *
 * http://schema.org/branchOf
 */
export declare const branchOf: Property;
/**
 * brand
 *
 * The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
 *
 * http://schema.org/brand
 */
export declare const brand: Property;
/**
 * breadcrumb
 *
 * A set of links that can help a user understand and navigate a website hierarchy.
 *
 * http://schema.org/breadcrumb
 */
export declare const breadcrumb: Property;
/**
 * broadcastAffiliateOf
 *
 * The media network(s) whose content is broadcast on this station.
 *
 * http://schema.org/broadcastAffiliateOf
 */
export declare const broadcastAffiliateOf: Property;
/**
 * broadcastChannelId
 *
 * The unique address by which the BroadcastService can be identified in a provider lineup. In US, this is typically a number.
 *
 * http://schema.org/broadcastChannelId
 */
export declare const broadcastChannelId: Property;
/**
 * broadcastDisplayName
 *
 * The name displayed in the channel guide. For many US affiliates, it is the network name.
 *
 * http://schema.org/broadcastDisplayName
 */
export declare const broadcastDisplayName: Property;
/**
 * broadcastFrequency
 *
 * The frequency used for over-the-air broadcasts. Numeric values or simple ranges e.g. 87-99. In addition a shortcut idiom is supported for frequences of AM and FM radio channels, e.g. "87 FM".
 *
 * http://schema.org/broadcastFrequency
 */
export declare const broadcastFrequency: Property;
/**
 * broadcastFrequencyValue
 *
 * The frequency in MHz for a particular broadcast.
 *
 * http://schema.org/broadcastFrequencyValue
 */
export declare const broadcastFrequencyValue: Property;
/**
 * broadcastOfEvent
 *
 * The event being broadcast such as a sporting event or awards ceremony.
 *
 * http://schema.org/broadcastOfEvent
 */
export declare const broadcastOfEvent: Property;
/**
 * broadcastServiceTier
 *
 * The type of service required to have access to the channel (e.g. Standard or Premium).
 *
 * http://schema.org/broadcastServiceTier
 */
export declare const broadcastServiceTier: Property;
/**
 * broadcastTimezone
 *
 * The timezone in <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601 format</a> for which the service bases its broadcasts
 *
 * http://schema.org/broadcastTimezone
 */
export declare const broadcastTimezone: Property;
/**
 * broadcaster
 *
 * The organization owning or operating the broadcast service.
 *
 * http://schema.org/broadcaster
 */
export declare const broadcaster: Property;
/**
 * browserRequirements
 *
 * Specifies browser requirements in human-readable text. For example, 'requires HTML5 support'.
 *
 * http://schema.org/browserRequirements
 */
export declare const browserRequirements: Property;
/**
 * busName
 *
 * The name of the bus (e.g. Bolt Express).
 *
 * http://schema.org/busName
 */
export declare const busName: Property;
/**
 * busNumber
 *
 * The unique identifier for the bus.
 *
 * http://schema.org/busNumber
 */
export declare const busNumber: Property;
/**
 * businessFunction
 *
 * The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell.
 *
 * http://schema.org/businessFunction
 */
export declare const businessFunction: Property;
/**
 * buyer
 *
 * A sub property of participant. The participant/person/organization that bought the object.
 *
 * http://schema.org/buyer
 */
export declare const buyer: Property;
/**
 * byArtist
 *
 * The artist that performed this album or recording.
 *
 * http://schema.org/byArtist
 */
export declare const byArtist: Property;
/**
 * calories
 *
 * The number of calories.
 *
 * http://schema.org/calories
 */
export declare const calories: Property;
/**
 * candidate
 *
 * A sub property of object. The candidate subject of this action.
 *
 * http://schema.org/candidate
 */
export declare const candidate: Property;
/**
 * caption
 *
 * The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the <a class="localLink" href="http://schema.org/encodingFormat">encodingFormat</a>.
 *
 * http://schema.org/caption
 */
export declare const caption: Property;
/**
 * carbohydrateContent
 *
 * The number of grams of carbohydrates.
 *
 * http://schema.org/carbohydrateContent
 */
export declare const carbohydrateContent: Property;
/**
 * cargoVolume
 *
 * The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.<br/><br/>
 *
 * Typical unit code(s): LTR for liters, FTQ for cubic foot/feet<br/><br/>
 *
 * Note: You can use <a class="localLink" href="http://schema.org/minValue">minValue</a> and <a class="localLink" href="http://schema.org/maxValue">maxValue</a> to indicate ranges.
 *
 * http://schema.org/cargoVolume
 */
export declare const cargoVolume: Property;
/**
 * carrier
 *
 * 'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.
 *
 * http://schema.org/carrier
 */
export declare const carrier: Property;
/**
 * carrierRequirements
 *
 * Specifies specific carrier(s) requirements for the application (e.g. an application may only work on a specific carrier network).
 *
 * http://schema.org/carrierRequirements
 */
export declare const carrierRequirements: Property;
/**
 * catalog
 *
 * A data catalog which contains this dataset.
 *
 * http://schema.org/catalog
 */
export declare const catalog: Property;
/**
 * catalogNumber
 *
 * The catalog number for the release.
 *
 * http://schema.org/catalogNumber
 */
export declare const catalogNumber: Property;
/**
 * category
 *
 * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
 *
 * http://schema.org/category
 */
export declare const category: Property;
/**
 * ccRecipient
 *
 * A sub property of recipient. The recipient copied on a message.
 *
 * http://schema.org/ccRecipient
 */
export declare const ccRecipient: Property;
/**
 * character
 *
 * Fictional person connected with a creative work.
 *
 * http://schema.org/character
 */
export declare const character: Property;
/**
 * characterAttribute
 *
 * A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage).
 *
 * http://schema.org/characterAttribute
 */
export declare const characterAttribute: Property;
/**
 * characterName
 *
 * The name of a character played in some acting or performing role, i.e. in a PerformanceRole.
 *
 * http://schema.org/characterName
 */
export declare const characterName: Property;
/**
 * cheatCode
 *
 * Cheat codes to the game.
 *
 * http://schema.org/cheatCode
 */
export declare const cheatCode: Property;
/**
 * checkinTime
 *
 * The earliest someone may check into a lodging establishment.
 *
 * http://schema.org/checkinTime
 */
export declare const checkinTime: Property;
/**
 * checkoutTime
 *
 * The latest someone may check out of a lodging establishment.
 *
 * http://schema.org/checkoutTime
 */
export declare const checkoutTime: Property;
/**
 * childMaxAge
 *
 * Maximal age of the child.
 *
 * http://schema.org/childMaxAge
 */
export declare const childMaxAge: Property;
/**
 * childMinAge
 *
 * Minimal age of the child.
 *
 * http://schema.org/childMinAge
 */
export declare const childMinAge: Property;
/**
 * children
 *
 * A child of the person.
 *
 * http://schema.org/children
 */
export declare const children: Property;
/**
 * cholesterolContent
 *
 * The number of milligrams of cholesterol.
 *
 * http://schema.org/cholesterolContent
 */
export declare const cholesterolContent: Property;
/**
 * circle
 *
 * A circle is the circular region of a specified radius centered at a specified latitude and longitude. A circle is expressed as a pair followed by a radius in meters.
 *
 * http://schema.org/circle
 */
export declare const circle: Property;
/**
 * citation
 *
 * A citation or reference to another creative work, such as another publication, web page, scholarly article, etc.
 *
 * http://schema.org/citation
 */
export declare const citation: Property;
/**
 * claimReviewed
 *
 * A short summary of the specific claims reviewed in a ClaimReview.
 *
 * http://schema.org/claimReviewed
 */
export declare const claimReviewed: Property;
/**
 * clipNumber
 *
 * Position of the clip within an ordered group of clips.
 *
 * http://schema.org/clipNumber
 */
export declare const clipNumber: Property;
/**
 * closes
 *
 * The closing hour of the place or service on the given day(s) of the week.
 *
 * http://schema.org/closes
 */
export declare const closes: Property;
/**
 * coach
 *
 * A person that acts in a coaching role for a sports team.
 *
 * http://schema.org/coach
 */
export declare const coach: Property;
/**
 * codeRepository
 *
 * Link to the repository where the un-compiled, human readable code and related code is located (SVN, github, CodePlex).
 *
 * http://schema.org/codeRepository
 */
export declare const codeRepository: Property;
/**
 * colleagues
 *
 * A colleague of the person.
 *
 * http://schema.org/colleagues
 */
export declare const colleagues: Property;
/**
 * collection
 *
 * A sub property of object. The collection target of the action.
 *
 * http://schema.org/collection
 */
export declare const collection: Property;
/**
 * color
 *
 * The color of the product.
 *
 * http://schema.org/color
 */
export declare const color: Property;
/**
 * comment
 *
 * Comments, typically from users.
 *
 * http://schema.org/comment
 */
export declare const comment: Property;
/**
 * commentCount
 *
 * The number of comments this CreativeWork (e.g. Article, Question or Answer) has received. This is most applicable to works published in Web sites with commenting system; additional comments may exist elsewhere.
 *
 * http://schema.org/commentCount
 */
export declare const commentCount: Property;
/**
 * commentText
 *
 * The text of the UserComment.
 *
 * http://schema.org/commentText
 */
export declare const commentText: Property;
/**
 * commentTime
 *
 * The time at which the UserComment was made.
 *
 * http://schema.org/commentTime
 */
export declare const commentTime: Property;
/**
 * composer
 *
 * The person or organization who wrote a composition, or who is the composer of a work performed at some event.
 *
 * http://schema.org/composer
 */
export declare const composer: Property;
/**
 * confirmationNumber
 *
 * A number that confirms the given order or payment has been received.
 *
 * http://schema.org/confirmationNumber
 */
export declare const confirmationNumber: Property;
/**
 * contactOption
 *
 * An option available on this contact point (e.g. a toll-free number or support for hearing-impaired callers).
 *
 * http://schema.org/contactOption
 */
export declare const contactOption: Property;
/**
 * contactPoints
 *
 * A contact point for a person or organization.
 *
 * http://schema.org/contactPoints
 */
export declare const contactPoints: Property;
/**
 * contactType
 *
 * A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.
 *
 * http://schema.org/contactType
 */
export declare const contactType: Property;
/**
 * containedIn
 *
 * The basic containment relation between a place and one that contains it.
 *
 * http://schema.org/containedIn
 */
export declare const containedIn: Property;
/**
 * contentRating
 *
 * Official rating of a piece of content&#x2014;for example,'MPAA PG-13'.
 *
 * http://schema.org/contentRating
 */
export declare const contentRating: Property;
/**
 * contentSize
 *
 * File size in (mega/kilo) bytes.
 *
 * http://schema.org/contentSize
 */
export declare const contentSize: Property;
/**
 * contentType
 *
 * The supported content type(s) for an EntryPoint response.
 *
 * http://schema.org/contentType
 */
export declare const contentType: Property;
/**
 * contentUrl
 *
 * Actual bytes of the media object, for example the image file or video file.
 *
 * http://schema.org/contentUrl
 */
export declare const contentUrl: Property;
/**
 * contributor
 *
 * A secondary contributor to the CreativeWork or Event.
 *
 * http://schema.org/contributor
 */
export declare const contributor: Property;
/**
 * cookTime
 *
 * The time it takes to actually cook the dish, in <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601 duration format</a>.
 *
 * http://schema.org/cookTime
 */
export declare const cookTime: Property;
/**
 * cookingMethod
 *
 * The method of cooking, such as Frying, Steaming, ...
 *
 * http://schema.org/cookingMethod
 */
export declare const cookingMethod: Property;
/**
 * copyrightHolder
 *
 * The party holding the legal copyright to the CreativeWork.
 *
 * http://schema.org/copyrightHolder
 */
export declare const copyrightHolder: Property;
/**
 * copyrightYear
 *
 * The year during which the claimed copyright for the CreativeWork was first asserted.
 *
 * http://schema.org/copyrightYear
 */
export declare const copyrightYear: Property;
/**
 * countriesNotSupported
 *
 * Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
 *
 * http://schema.org/countriesNotSupported
 */
export declare const countriesNotSupported: Property;
/**
 * countriesSupported
 *
 * Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
 *
 * http://schema.org/countriesSupported
 */
export declare const countriesSupported: Property;
/**
 * countryOfOrigin
 *
 * The country of the principal offices of the production company or individual responsible for the movie or program.
 *
 * http://schema.org/countryOfOrigin
 */
export declare const countryOfOrigin: Property;
/**
 * course
 *
 * A sub property of location. The course where this action was taken.
 *
 * http://schema.org/course
 */
export declare const course: Property;
/**
 * courseCode
 *
 * The identifier for the <a class="localLink" href="http://schema.org/Course">Course</a> used by the course <a class="localLink" href="http://schema.org/provider">provider</a> (e.g. CS101 or 6.001).
 *
 * http://schema.org/courseCode
 */
export declare const courseCode: Property;
/**
 * courseMode
 *
 * The medium or means of delivery of the course instance or the mode of study, either as a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or as a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ).
 *
 * http://schema.org/courseMode
 */
export declare const courseMode: Property;
/**
 * coursePrerequisites
 *
 * Requirements for taking the Course. May be completion of another <a class="localLink" href="http://schema.org/Course">Course</a> or a textual description like "permission of instructor". Requirements may be a pre-requisite competency, referenced using <a class="localLink" href="http://schema.org/AlignmentObject">AlignmentObject</a>.
 *
 * http://schema.org/coursePrerequisites
 */
export declare const coursePrerequisites: Property;
/**
 * coverageEndTime
 *
 * The time when the live blog will stop covering the Event. Note that coverage may continue after the Event concludes.
 *
 * http://schema.org/coverageEndTime
 */
export declare const coverageEndTime: Property;
/**
 * coverageStartTime
 *
 * The time when the live blog will begin covering the Event. Note that coverage may begin before the Event's start time. The LiveBlogPosting may also be created before coverage begins.
 *
 * http://schema.org/coverageStartTime
 */
export declare const coverageStartTime: Property;
/**
 * creator
 *
 * The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.
 *
 * http://schema.org/creator
 */
export declare const creator: Property;
/**
 * creditedTo
 *
 * The group the release is credited to if different than the byArtist. For example, Red and Blue is credited to "Stefani Germanotta Band", but by Lady Gaga.
 *
 * http://schema.org/creditedTo
 */
export declare const creditedTo: Property;
/**
 * cssSelector
 *
 * A CSS selector, e.g. of a <a class="localLink" href="http://schema.org/SpeakableSpecification">SpeakableSpecification</a> or <a class="localLink" href="http://schema.org/WebPageElement">WebPageElement</a>. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element".
 *
 * http://schema.org/cssSelector
 */
export declare const cssSelector: Property;
/**
 * currenciesAccepted
 *
 * The currency accepted.<br/><br/>
 *
 * Use standard formats: <a href="http://en.wikipedia.org/wiki/ISO_4217">ISO 4217 currency format</a> e.g. "USD"; <a href="https://en.wikipedia.org/wiki/List_of_cryptocurrencies">Ticker symbol</a> for cryptocurrencies e.g. "BTC"; well known names for <a href="https://en.wikipedia.org/wiki/Local_exchange_trading_system">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. "Ithaca HOUR".
 *
 * http://schema.org/currenciesAccepted
 */
export declare const currenciesAccepted: Property;
/**
 * currency
 *
 * The currency in which the monetary amount is expressed.<br/><br/>
 *
 * Use standard formats: <a href="http://en.wikipedia.org/wiki/ISO_4217">ISO 4217 currency format</a> e.g. "USD"; <a href="https://en.wikipedia.org/wiki/List_of_cryptocurrencies">Ticker symbol</a> for cryptocurrencies e.g. "BTC"; well known names for <a href="https://en.wikipedia.org/wiki/Local_exchange_trading_system">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. "Ithaca HOUR".
 *
 * http://schema.org/currency
 */
export declare const currency: Property;
/**
 * customer
 *
 * Party placing the order or paying the invoice.
 *
 * http://schema.org/customer
 */
export declare const customer: Property;
/**
 * dataFeedElement
 *
 * An item within in a data feed. Data feeds may have many elements.
 *
 * http://schema.org/dataFeedElement
 */
export declare const dataFeedElement: Property;
/**
 * datasetTimeInterval
 *
 * The range of temporal applicability of a dataset, e.g. for a 2011 census dataset, the year 2011 (in ISO 8601 time interval format).
 *
 * http://schema.org/datasetTimeInterval
 */
export declare const datasetTimeInterval: Property;
/**
 * dateCreated
 *
 * The date on which the CreativeWork was created or the item was added to a DataFeed.
 *
 * http://schema.org/dateCreated
 */
export declare const dateCreated: Property;
/**
 * dateDeleted
 *
 * The datetime the item was removed from the DataFeed.
 *
 * http://schema.org/dateDeleted
 */
export declare const dateDeleted: Property;
/**
 * dateIssued
 *
 * The date the ticket was issued.
 *
 * http://schema.org/dateIssued
 */
export declare const dateIssued: Property;
/**
 * dateModified
 *
 * The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.
 *
 * http://schema.org/dateModified
 */
export declare const dateModified: Property;
/**
 * datePosted
 *
 * Publication date for the job posting.
 *
 * http://schema.org/datePosted
 */
export declare const datePosted: Property;
/**
 * datePublished
 *
 * Date of first broadcast/publication.
 *
 * http://schema.org/datePublished
 */
export declare const datePublished: Property;
/**
 * dateRead
 *
 * The date/time at which the message has been read by the recipient if a single recipient exists.
 *
 * http://schema.org/dateRead
 */
export declare const dateRead: Property;
/**
 * dateReceived
 *
 * The date/time the message was received if a single recipient exists.
 *
 * http://schema.org/dateReceived
 */
export declare const dateReceived: Property;
/**
 * dateSent
 *
 * The date/time at which the message was sent.
 *
 * http://schema.org/dateSent
 */
export declare const dateSent: Property;
/**
 * dateVehicleFirstRegistered
 *
 * The date of the first registration of the vehicle with the respective public authorities.
 *
 * http://schema.org/dateVehicleFirstRegistered
 */
export declare const dateVehicleFirstRegistered: Property;
/**
 * dateline
 *
 * A <a href="https://en.wikipedia.org/wiki/Dateline">dateline</a> is a brief piece of text included in news articles that describes where and when the story was written or filed though the date is often omitted. Sometimes only a placename is provided.<br/><br/>
 *
 * Structured representations of dateline-related information can also be expressed more explicitly using <a class="localLink" href="http://schema.org/locationCreated">locationCreated</a> (which represents where a work was created e.g. where a news report was written).  For location depicted or described in the content, use <a class="localLink" href="http://schema.org/contentLocation">contentLocation</a>.<br/><br/>
 *
 * Dateline summaries are oriented more towards human readers than towards automated processing, and can vary substantially. Some examples: "BEIRUT, Lebanon, June 2.", "Paris, France", "December 19, 2017 11:43AM Reporting from Washington", "Beijing/Moscow", "QUEZON CITY, Philippines".
 *
 * http://schema.org/dateline
 */
export declare const dateline: Property;
/**
 * dayOfWeek
 *
 * The day of the week for which these opening hours are valid.
 *
 * http://schema.org/dayOfWeek
 */
export declare const dayOfWeek: Property;
/**
 * deathDate
 *
 * Date of death.
 *
 * http://schema.org/deathDate
 */
export declare const deathDate: Property;
/**
 * deathPlace
 *
 * The place where the person died.
 *
 * http://schema.org/deathPlace
 */
export declare const deathPlace: Property;
/**
 * defaultValue
 *
 * The default value of the input.  For properties that expect a literal, the default is a literal value, for properties that expect an object, it's an ID reference to one of the current values.
 *
 * http://schema.org/defaultValue
 */
export declare const defaultValue: Property;
/**
 * deliveryAddress
 *
 * Destination address.
 *
 * http://schema.org/deliveryAddress
 */
export declare const deliveryAddress: Property;
/**
 * deliveryLeadTime
 *
 * The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup.
 *
 * http://schema.org/deliveryLeadTime
 */
export declare const deliveryLeadTime: Property;
/**
 * deliveryMethod
 *
 * A sub property of instrument. The method of delivery.
 *
 * http://schema.org/deliveryMethod
 */
export declare const deliveryMethod: Property;
/**
 * deliveryStatus
 *
 * New entry added as the package passes through each leg of its journey (from shipment to final delivery).
 *
 * http://schema.org/deliveryStatus
 */
export declare const deliveryStatus: Property;
/**
 * department
 *
 * A relationship between an organization and a department of that organization, also described as an organization (allowing different urls, logos, opening hours). For example: a store with a pharmacy, or a bakery with a cafe.
 *
 * http://schema.org/department
 */
export declare const department: Property;
/**
 * departureAirport
 *
 * The airport where the flight originates.
 *
 * http://schema.org/departureAirport
 */
export declare const departureAirport: Property;
/**
 * departureBusStop
 *
 * The stop or station from which the bus departs.
 *
 * http://schema.org/departureBusStop
 */
export declare const departureBusStop: Property;
/**
 * departureGate
 *
 * Identifier of the flight's departure gate.
 *
 * http://schema.org/departureGate
 */
export declare const departureGate: Property;
/**
 * departurePlatform
 *
 * The platform from which the train departs.
 *
 * http://schema.org/departurePlatform
 */
export declare const departurePlatform: Property;
/**
 * departureStation
 *
 * The station from which the train departs.
 *
 * http://schema.org/departureStation
 */
export declare const departureStation: Property;
/**
 * departureTerminal
 *
 * Identifier of the flight's departure terminal.
 *
 * http://schema.org/departureTerminal
 */
export declare const departureTerminal: Property;
/**
 * departureTime
 *
 * The expected departure time.
 *
 * http://schema.org/departureTime
 */
export declare const departureTime: Property;
/**
 * dependencies
 *
 * Prerequisites needed to fulfill steps in article.
 *
 * http://schema.org/dependencies
 */
export declare const dependencies: Property;
/**
 * depth
 *
 * The depth of the item.
 *
 * http://schema.org/depth
 */
export declare const depth: Property;
/**
 * device
 *
 * Device required to run the application. Used in cases where a specific make/model is required to run the application.
 *
 * http://schema.org/device
 */
export declare const device: Property;
/**
 * directors
 *
 * A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
 *
 * http://schema.org/directors
 */
export declare const directors: Property;
/**
 * disambiguatingDescription
 *
 * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
 *
 * http://schema.org/disambiguatingDescription
 */
export declare const disambiguatingDescription: Property;
/**
 * discount
 *
 * Any discount applied (to an Order).
 *
 * http://schema.org/discount
 */
export declare const discount: Property;
/**
 * discountCode
 *
 * Code used to redeem a discount.
 *
 * http://schema.org/discountCode
 */
export declare const discountCode: Property;
/**
 * discountCurrency
 *
 * The currency of the discount.<br/><br/>
 *
 * Use standard formats: <a href="http://en.wikipedia.org/wiki/ISO_4217">ISO 4217 currency format</a> e.g. "USD"; <a href="https://en.wikipedia.org/wiki/List_of_cryptocurrencies">Ticker symbol</a> for cryptocurrencies e.g. "BTC"; well known names for <a href="https://en.wikipedia.org/wiki/Local_exchange_trading_system">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. "Ithaca HOUR".
 *
 * http://schema.org/discountCurrency
 */
export declare const discountCurrency: Property;
/**
 * discusses
 *
 * Specifies the CreativeWork associated with the UserComment.
 *
 * http://schema.org/discusses
 */
export declare const discusses: Property;
/**
 * discussionUrl
 *
 * A link to the page containing the comments of the CreativeWork.
 *
 * http://schema.org/discussionUrl
 */
export declare const discussionUrl: Property;
/**
 * dissolutionDate
 *
 * The date that this organization was dissolved.
 *
 * http://schema.org/dissolutionDate
 */
export declare const dissolutionDate: Property;
/**
 * distance
 *
 * The distance travelled, e.g. exercising or travelling.
 *
 * http://schema.org/distance
 */
export declare const distance: Property;
/**
 * distribution
 *
 * A downloadable form of this dataset, at a specific location, in a specific format.
 *
 * http://schema.org/distribution
 */
export declare const distribution: Property;
/**
 * doorTime
 *
 * The time admission will commence.
 *
 * http://schema.org/doorTime
 */
export declare const doorTime: Property;
/**
 * downloadUrl
 *
 * If the file can be downloaded, URL to download the binary.
 *
 * http://schema.org/downloadUrl
 */
export declare const downloadUrl: Property;
/**
 * downvoteCount
 *
 * The number of downvotes this question, answer or comment has received from the community.
 *
 * http://schema.org/downvoteCount
 */
export declare const downvoteCount: Property;
/**
 * driveWheelConfiguration
 *
 * The drive wheel configuration, i.e. which roadwheels will receive torque from the vehicle's engine via the drivetrain.
 *
 * http://schema.org/driveWheelConfiguration
 */
export declare const driveWheelConfiguration: Property;
/**
 * dropoffLocation
 *
 * Where a rental car can be dropped off.
 *
 * http://schema.org/dropoffLocation
 */
export declare const dropoffLocation: Property;
/**
 * dropoffTime
 *
 * When a rental car can be dropped off.
 *
 * http://schema.org/dropoffTime
 */
export declare const dropoffTime: Property;
/**
 * duns
 *
 * The Dun &amp; Bradstreet DUNS number for identifying an organization or business person.
 *
 * http://schema.org/duns
 */
export declare const duns: Property;
/**
 * durationOfWarranty
 *
 * The duration of the warranty promise. Common unitCode values are ANN for year, MON for months, or DAY for days.
 *
 * http://schema.org/durationOfWarranty
 */
export declare const durationOfWarranty: Property;
/**
 * duringMedia
 *
 * A media object representing the circumstances while performing this direction.
 *
 * http://schema.org/duringMedia
 */
export declare const duringMedia: Property;
/**
 * editor
 *
 * Specifies the Person who edited the CreativeWork.
 *
 * http://schema.org/editor
 */
export declare const editor: Property;
/**
 * educationalAlignment
 *
 * An alignment to an established educational framework.
 *
 * http://schema.org/educationalAlignment
 */
export declare const educationalAlignment: Property;
/**
 * educationalCredentialAwarded
 *
 * A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program.
 *
 * http://schema.org/educationalCredentialAwarded
 */
export declare const educationalCredentialAwarded: Property;
/**
 * educationalFramework
 *
 * The framework to which the resource being described is aligned.
 *
 * http://schema.org/educationalFramework
 */
export declare const educationalFramework: Property;
/**
 * educationalRole
 *
 * An educationalRole of an EducationalAudience.
 *
 * http://schema.org/educationalRole
 */
export declare const educationalRole: Property;
/**
 * educationalUse
 *
 * The purpose of a work in the context of education; for example, 'assignment', 'group work'.
 *
 * http://schema.org/educationalUse
 */
export declare const educationalUse: Property;
/**
 * elevation
 *
 * The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>). Values may be of the form 'NUMBER UNIT<em>OF</em>MEASUREMENT' (e.g., '1,000 m', '3,200 ft') while numbers alone should be assumed to be a value in meters.
 *
 * http://schema.org/elevation
 */
export declare const elevation: Property;
/**
 * eligibleCustomerType
 *
 * The type(s) of customers for which the given offer is valid.
 *
 * http://schema.org/eligibleCustomerType
 */
export declare const eligibleCustomerType: Property;
/**
 * eligibleDuration
 *
 * The duration for which the given offer is valid.
 *
 * http://schema.org/eligibleDuration
 */
export declare const eligibleDuration: Property;
/**
 * eligibleQuantity
 *
 * The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity.
 *
 * http://schema.org/eligibleQuantity
 */
export declare const eligibleQuantity: Property;
/**
 * eligibleRegion
 *
 * The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.<br/><br/>
 *
 * See also <a class="localLink" href="http://schema.org/ineligibleRegion">ineligibleRegion</a>.
 *
 * http://schema.org/eligibleRegion
 */
export declare const eligibleRegion: Property;
/**
 * eligibleTransactionVolume
 *
 * The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount.
 *
 * http://schema.org/eligibleTransactionVolume
 */
export declare const eligibleTransactionVolume: Property;
/**
 * email
 *
 * Email address.
 *
 * http://schema.org/email
 */
export declare const email: Property;
/**
 * embedUrl
 *
 * A URL pointing to a player for a specific video. In general, this is the information in the <code>src</code> element of an <code>embed</code> tag and should not be the same as the content of the <code>loc</code> tag.
 *
 * http://schema.org/embedUrl
 */
export declare const embedUrl: Property;
/**
 * employees
 *
 * People working for this organization.
 *
 * http://schema.org/employees
 */
export declare const employees: Property;
/**
 * employmentType
 *
 * Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).
 *
 * http://schema.org/employmentType
 */
export declare const employmentType: Property;
/**
 * encodingType
 *
 * The supported encoding type(s) for an EntryPoint request.
 *
 * http://schema.org/encodingType
 */
export declare const encodingType: Property;
/**
 * encodings
 *
 * A media object that encodes this CreativeWork.
 *
 * http://schema.org/encodings
 */
export declare const encodings: Property;
/**
 * endDate
 *
 * The end date and time of the item (in <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601 date format</a>).
 *
 * http://schema.org/endDate
 */
export declare const endDate: Property;
/**
 * endTime
 *
 * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to <em>December</em>. For media, including audio and video, it's the time offset of the end of a clip within a larger file.<br/><br/>
 *
 * Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
 *
 * http://schema.org/endTime
 */
export declare const endTime: Property;
/**
 * endorsee
 *
 * A sub property of participant. The person/organization being supported.
 *
 * http://schema.org/endorsee
 */
export declare const endorsee: Property;
/**
 * entertainmentBusiness
 *
 * A sub property of location. The entertainment business where the action occurred.
 *
 * http://schema.org/entertainmentBusiness
 */
export declare const entertainmentBusiness: Property;
/**
 * episodeNumber
 *
 * Position of the episode within an ordered group of episodes.
 *
 * http://schema.org/episodeNumber
 */
export declare const episodeNumber: Property;
/**
 * episodes
 *
 * An episode of a TV/radio series or season.
 *
 * http://schema.org/episodes
 */
export declare const episodes: Property;
/**
 * equal
 *
 * This ordering relation for qualitative values indicates that the subject is equal to the object.
 *
 * http://schema.org/equal
 */
export declare const equal: Property;
/**
 * error
 *
 * For failed actions, more information on the cause of the failure.
 *
 * http://schema.org/error
 */
export declare const error: Property;
/**
 * estimatedCost
 *
 * The estimated cost of the supply or supplies consumed when performing instructions.
 *
 * http://schema.org/estimatedCost
 */
export declare const estimatedCost: Property;
/**
 * estimatedFlightDuration
 *
 * The estimated time the flight will take.
 *
 * http://schema.org/estimatedFlightDuration
 */
export declare const estimatedFlightDuration: Property;
/**
 * estimatedSalary
 *
 * An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
 *
 * http://schema.org/estimatedSalary
 */
export declare const estimatedSalary: Property;
/**
 * eventStatus
 *
 * An eventStatus of an event represents its status; particularly useful when an event is cancelled or rescheduled.
 *
 * http://schema.org/eventStatus
 */
export declare const eventStatus: Property;
/**
 * events
 *
 * Upcoming or past events associated with this place or organization.
 *
 * http://schema.org/events
 */
export declare const events: Property;
/**
 * exifData
 *
 * exif data for this object.
 *
 * http://schema.org/exifData
 */
export declare const exifData: Property;
/**
 * expectedArrivalFrom
 *
 * The earliest date the package may arrive.
 *
 * http://schema.org/expectedArrivalFrom
 */
export declare const expectedArrivalFrom: Property;
/**
 * expectedArrivalUntil
 *
 * The latest date the package may arrive.
 *
 * http://schema.org/expectedArrivalUntil
 */
export declare const expectedArrivalUntil: Property;
/**
 * expectsAcceptanceOf
 *
 * An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it.
 *
 * http://schema.org/expectsAcceptanceOf
 */
export declare const expectsAcceptanceOf: Property;
/**
 * experienceRequirements
 *
 * Description of skills and experience needed for the position or Occupation.
 *
 * http://schema.org/experienceRequirements
 */
export declare const experienceRequirements: Property;
/**
 * expires
 *
 * Date the content expires and is no longer useful or available. For example a <a class="localLink" href="http://schema.org/VideoObject">VideoObject</a> or <a class="localLink" href="http://schema.org/NewsArticle">NewsArticle</a> whose availability or relevance is time-limited, or a <a class="localLink" href="http://schema.org/ClaimReview">ClaimReview</a> fact check whose publisher wants to indicate that it may no longer be relevant (or helpful to highlight) after some date.
 *
 * http://schema.org/expires
 */
export declare const expires: Property;
/**
 * familyName
 *
 * Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.
 *
 * http://schema.org/familyName
 */
export declare const familyName: Property;
/**
 * fatContent
 *
 * The number of grams of fat.
 *
 * http://schema.org/fatContent
 */
export declare const fatContent: Property;
/**
 * faxNumber
 *
 * The fax number.
 *
 * http://schema.org/faxNumber
 */
export declare const faxNumber: Property;
/**
 * featureList
 *
 * Features or modules provided by this application (and possibly required by other applications).
 *
 * http://schema.org/featureList
 */
export declare const featureList: Property;
/**
 * feesAndCommissionsSpecification
 *
 * Description of fees, commissions, and other terms applied either to a class of financial product, or by a financial service organization.
 *
 * http://schema.org/feesAndCommissionsSpecification
 */
export declare const feesAndCommissionsSpecification: Property;
/**
 * fiberContent
 *
 * The number of grams of fiber.
 *
 * http://schema.org/fiberContent
 */
export declare const fiberContent: Property;
/**
 * fileFormat
 *
 * Media type, typically MIME format (see <a href="http://www.iana.org/assignments/media-types/media-types.xhtml">IANA site</a>) of the content e.g. application/zip of a SoftwareApplication binary. In cases where a CreativeWork has several media type representations, 'encoding' can be used to indicate each MediaObject alongside particular fileFormat information. Unregistered or niche file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia entry.
 *
 * http://schema.org/fileFormat
 */
export declare const fileFormat: Property;
/**
 * fileSize
 *
 * Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
 *
 * http://schema.org/fileSize
 */
export declare const fileSize: Property;
/**
 * firstPerformance
 *
 * The date and place the work was first performed.
 *
 * http://schema.org/firstPerformance
 */
export declare const firstPerformance: Property;
/**
 * flightDistance
 *
 * The distance of the flight.
 *
 * http://schema.org/flightDistance
 */
export declare const flightDistance: Property;
/**
 * flightNumber
 *
 * The unique identifier for a flight including the airline IATA code. For example, if describing United flight 110, where the IATA code for United is 'UA', the flightNumber is 'UA110'.
 *
 * http://schema.org/flightNumber
 */
export declare const flightNumber: Property;
/**
 * floorSize
 *
 * The size of the accommodation, e.g. in square meter or squarefoot.
 * Typical unit code(s): MTK for square meter, FTK for square foot, or YDK for square yard
 *
 * http://schema.org/floorSize
 */
export declare const floorSize: Property;
/**
 * followee
 *
 * A sub property of object. The person or organization being followed.
 *
 * http://schema.org/followee
 */
export declare const followee: Property;
/**
 * follows
 *
 * The most generic uni-directional social relation.
 *
 * http://schema.org/follows
 */
export declare const follows: Property;
/**
 * foodEstablishment
 *
 * A sub property of location. The specific food establishment where the action occurred.
 *
 * http://schema.org/foodEstablishment
 */
export declare const foodEstablishment: Property;
/**
 * foodEvent
 *
 * A sub property of location. The specific food event where the action occurred.
 *
 * http://schema.org/foodEvent
 */
export declare const foodEvent: Property;
/**
 * founders
 *
 * A person who founded this organization.
 *
 * http://schema.org/founders
 */
export declare const founders: Property;
/**
 * foundingDate
 *
 * The date that this organization was founded.
 *
 * http://schema.org/foundingDate
 */
export declare const foundingDate: Property;
/**
 * foundingLocation
 *
 * The place where the Organization was founded.
 *
 * http://schema.org/foundingLocation
 */
export declare const foundingLocation: Property;
/**
 * free
 *
 * A flag to signal that the item, event, or place is accessible for free.
 *
 * http://schema.org/free
 */
export declare const free: Property;
/**
 * fromLocation
 *
 * A sub property of location. The original location of the object or the agent before the action.
 *
 * http://schema.org/fromLocation
 */
export declare const fromLocation: Property;
/**
 * fuelConsumption
 *
 * The amount of fuel consumed for traveling a particular distance or temporal duration with the given vehicle (e.g. liters per 100 km).<br/><br/>
 *
 * <ul>
 * <li>Note 1: There are unfortunately no standard unit codes for liters per 100 km.  Use <a class="localLink" href="http://schema.org/unitText">unitText</a> to indicate the unit of measurement, e.g. L/100 km.</li>
 * <li>Note 2: There are two ways of indicating the fuel consumption, <a class="localLink" href="http://schema.org/fuelConsumption">fuelConsumption</a> (e.g. 8 liters per 100 km) and <a class="localLink" href="http://schema.org/fuelEfficiency">fuelEfficiency</a> (e.g. 30 miles per gallon). They are reciprocal.</li>
 * <li>Note 3: Often, the absolute value is useful only when related to driving speed ("at 80 km/h") or usage pattern ("city traffic"). You can use <a class="localLink" href="http://schema.org/valueReference">valueReference</a> to link the value for the fuel consumption to another value.</li>
 * </ul>
 *
 *
 * http://schema.org/fuelConsumption
 */
export declare const fuelConsumption: Property;
/**
 * fuelEfficiency
 *
 * The distance traveled per unit of fuel used; most commonly miles per gallon (mpg) or kilometers per liter (km/L).<br/><br/>
 *
 * <ul>
 * <li>Note 1: There are unfortunately no standard unit codes for miles per gallon or kilometers per liter. Use <a class="localLink" href="http://schema.org/unitText">unitText</a> to indicate the unit of measurement, e.g. mpg or km/L.</li>
 * <li>Note 2: There are two ways of indicating the fuel consumption, <a class="localLink" href="http://schema.org/fuelConsumption">fuelConsumption</a> (e.g. 8 liters per 100 km) and <a class="localLink" href="http://schema.org/fuelEfficiency">fuelEfficiency</a> (e.g. 30 miles per gallon). They are reciprocal.</li>
 * <li>Note 3: Often, the absolute value is useful only when related to driving speed ("at 80 km/h") or usage pattern ("city traffic"). You can use <a class="localLink" href="http://schema.org/valueReference">valueReference</a> to link the value for the fuel economy to another value.</li>
 * </ul>
 *
 *
 * http://schema.org/fuelEfficiency
 */
export declare const fuelEfficiency: Property;
/**
 * fuelType
 *
 * The type of fuel suitable for the engine or engines of the vehicle. If the vehicle has only one engine, this property can be attached directly to the vehicle.
 *
 * http://schema.org/fuelType
 */
export declare const fuelType: Property;
/**
 * funder
 *
 * A person or organization that supports (sponsors) something through some kind of financial contribution.
 *
 * http://schema.org/funder
 */
export declare const funder: Property;
/**
 * gameItem
 *
 * An item is an object within the game world that can be collected by a player or, occasionally, a non-player character.
 *
 * http://schema.org/gameItem
 */
export declare const gameItem: Property;
/**
 * gameLocation
 *
 * Real or fictional location of the game (or part of game).
 *
 * http://schema.org/gameLocation
 */
export declare const gameLocation: Property;
/**
 * gamePlatform
 *
 * The electronic systems used to play <a href="http://en.wikipedia.org/wiki/Category:Video_game_platforms">video games</a>.
 *
 * http://schema.org/gamePlatform
 */
export declare const gamePlatform: Property;
/**
 * gameTip
 *
 * Links to tips, tactics, etc.
 *
 * http://schema.org/gameTip
 */
export declare const gameTip: Property;
/**
 * gender
 *
 * Gender of the person. While http://schema.org/Male and http://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender.
 *
 * http://schema.org/gender
 */
export declare const gender: Property;
/**
 * genre
 *
 * Genre of the creative work, broadcast channel or group.
 *
 * http://schema.org/genre
 */
export declare const genre: Property;
/**
 * geo
 *
 * The geo coordinates of the place.
 *
 * http://schema.org/geo
 */
export declare const geo: Property;
/**
 * geoContains
 *
 * Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. "a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a". As defined in <a href="https://en.wikipedia.org/wiki/DE-9IM">DE-9IM</a>.
 *
 * http://schema.org/geoContains
 */
export declare const geoContains: Property;
/**
 * geoCoveredBy
 *
 * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in <a href="https://en.wikipedia.org/wiki/DE-9IM">DE-9IM</a>.
 *
 * http://schema.org/geoCoveredBy
 */
export declare const geoCoveredBy: Property;
/**
 * geoCovers
 *
 * Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. "Every point of b is a point of (the interior or boundary of) a". As defined in <a href="https://en.wikipedia.org/wiki/DE-9IM">DE-9IM</a>.
 *
 * http://schema.org/geoCovers
 */
export declare const geoCovers: Property;
/**
 * geoCrosses
 *
 * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: "a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them". As defined in <a href="https://en.wikipedia.org/wiki/DE-9IM">DE-9IM</a>.
 *
 * http://schema.org/geoCrosses
 */
export declare const geoCrosses: Property;
/**
 * geoDisjoint
 *
 * Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: they have no point in common. They form a set of disconnected geometries." (a symmetric relationship, as defined in <a href="https://en.wikipedia.org/wiki/DE-9IM">DE-9IM</a>)
 *
 * http://schema.org/geoDisjoint
 */
export declare const geoDisjoint: Property;
/**
 * geoEquals
 *
 * Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in <a href="https://en.wikipedia.org/wiki/DE-9IM">DE-9IM</a>. "Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other" (a symmetric relationship)
 *
 * http://schema.org/geoEquals
 */
export declare const geoEquals: Property;
/**
 * geoIntersects
 *
 * Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in <a href="https://en.wikipedia.org/wiki/DE-9IM">DE-9IM</a>.
 *
 * http://schema.org/geoIntersects
 */
export declare const geoIntersects: Property;
/**
 * geoMidpoint
 *
 * Indicates the GeoCoordinates at the centre of a GeoShape e.g. GeoCircle.
 *
 * http://schema.org/geoMidpoint
 */
export declare const geoMidpoint: Property;
/**
 * geoOverlaps
 *
 * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in <a href="https://en.wikipedia.org/wiki/DE-9IM">DE-9IM</a>.
 *
 * http://schema.org/geoOverlaps
 */
export declare const geoOverlaps: Property;
/**
 * geoRadius
 *
 * Indicates the approximate radius of a GeoCircle (metres unless indicated otherwise via Distance notation).
 *
 * http://schema.org/geoRadius
 */
export declare const geoRadius: Property;
/**
 * geoTouches
 *
 * Represents spatial relations in which two geometries (or the places they represent) touch: they have at least one boundary point in common, but no interior points." (a symmetric relationship, as defined in <a href="https://en.wikipedia.org/wiki/DE-9IM">DE-9IM</a> )
 *
 * http://schema.org/geoTouches
 */
export declare const geoTouches: Property;
/**
 * geoWithin
 *
 * Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in <a href="https://en.wikipedia.org/wiki/DE-9IM">DE-9IM</a>.
 *
 * http://schema.org/geoWithin
 */
export declare const geoWithin: Property;
/**
 * geographicArea
 *
 * The geographic area associated with the audience.
 *
 * http://schema.org/geographicArea
 */
export declare const geographicArea: Property;
/**
 * givenName
 *
 * Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.
 *
 * http://schema.org/givenName
 */
export declare const givenName: Property;
/**
 * globalLocationNumber
 *
 * The <a href="http://www.gs1.org/gln">Global Location Number</a> (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.
 *
 * http://schema.org/globalLocationNumber
 */
export declare const globalLocationNumber: Property;
/**
 * grantee
 *
 * The person, organization, contact point, or audience that has been granted this permission.
 *
 * http://schema.org/grantee
 */
export declare const grantee: Property;
/**
 * greater
 *
 * This ordering relation for qualitative values indicates that the subject is greater than the object.
 *
 * http://schema.org/greater
 */
export declare const greater: Property;
/**
 * greaterOrEqual
 *
 * This ordering relation for qualitative values indicates that the subject is greater than or equal to the object.
 *
 * http://schema.org/greaterOrEqual
 */
export declare const greaterOrEqual: Property;
/**
 * gtin12
 *
 * The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See <a href="http://www.gs1.org/barcodes/technical/idkeys/gtin">GS1 GTIN Summary</a> for more details.
 *
 * http://schema.org/gtin12
 */
export declare const gtin12: Property;
/**
 * gtin13
 *
 * The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceeding zero. See <a href="http://www.gs1.org/barcodes/technical/idkeys/gtin">GS1 GTIN Summary</a> for more details.
 *
 * http://schema.org/gtin13
 */
export declare const gtin13: Property;
/**
 * gtin14
 *
 * The GTIN-14 code of the product, or the product to which the offer refers. See <a href="http://www.gs1.org/barcodes/technical/idkeys/gtin">GS1 GTIN Summary</a> for more details.
 *
 * http://schema.org/gtin14
 */
export declare const gtin14: Property;
/**
 * gtin8
 *
 * The <a href="http://apps.gs1.org/GDD/glossary/Pages/GTIN-8.aspx">GTIN-8</a> code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See <a href="http://www.gs1.org/barcodes/technical/idkeys/gtin">GS1 GTIN Summary</a> for more details.
 *
 * http://schema.org/gtin8
 */
export declare const gtin8: Property;
/**
 * hasCourseInstance
 *
 * An offering of the course at a specific time and place or through specific media or mode of study or to a specific section of students.
 *
 * http://schema.org/hasCourseInstance
 */
export declare const hasCourseInstance: Property;
/**
 * hasDeliveryMethod
 *
 * Method used for delivery or shipping.
 *
 * http://schema.org/hasDeliveryMethod
 */
export declare const hasDeliveryMethod: Property;
/**
 * hasDigitalDocumentPermission
 *
 * A permission related to the access to this document (e.g. permission to read or write an electronic document). For a public document, specify a grantee with an Audience with audienceType equal to "public".
 *
 * http://schema.org/hasDigitalDocumentPermission
 */
export declare const hasDigitalDocumentPermission: Property;
/**
 * hasMenuItem
 *
 * A food or drink item contained in a menu or menu section.
 *
 * http://schema.org/hasMenuItem
 */
export declare const hasMenuItem: Property;
/**
 * hasMenuSection
 *
 * A subgrouping of the menu (by dishes, course, serving time period, etc.).
 *
 * http://schema.org/hasMenuSection
 */
export declare const hasMenuSection: Property;
/**
 * hasOccupation
 *
 * The Person's occupation. For past professions, use Role for expressing dates.
 *
 * http://schema.org/hasOccupation
 */
export declare const hasOccupation: Property;
/**
 * hasOfferCatalog
 *
 * Indicates an OfferCatalog listing for this Organization, Person, or Service.
 *
 * http://schema.org/hasOfferCatalog
 */
export declare const hasOfferCatalog: Property;
/**
 * hasPOS
 *
 * Points-of-Sales operated by the organization or person.
 *
 * http://schema.org/hasPOS
 */
export declare const hasPOS: Property;
/**
 * headline
 *
 * Headline of the article.
 *
 * http://schema.org/headline
 */
export declare const headline: Property;
/**
 * height
 *
 * The height of the item.
 *
 * http://schema.org/height
 */
export declare const height: Property;
/**
 * highPrice
 *
 * The highest price of all offers available.<br/><br/>
 *
 * Usage guidelines:<br/><br/>
 *
 * <ul>
 * <li>Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.</li>
 * <li>Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.</li>
 * </ul>
 *
 *
 * http://schema.org/highPrice
 */
export declare const highPrice: Property;
/**
 * hiringOrganization
 *
 * Organization offering the job position.
 *
 * http://schema.org/hiringOrganization
 */
export declare const hiringOrganization: Property;
/**
 * homeLocation
 *
 * A contact location for a person's residence.
 *
 * http://schema.org/homeLocation
 */
export declare const homeLocation: Property;
/**
 * homeTeam
 *
 * The home team in a sports event.
 *
 * http://schema.org/homeTeam
 */
export declare const homeTeam: Property;
/**
 * honorificPrefix
 *
 * An honorific prefix preceding a Person's name such as Dr/Mrs/Mr.
 *
 * http://schema.org/honorificPrefix
 */
export declare const honorificPrefix: Property;
/**
 * honorificSuffix
 *
 * An honorific suffix preceding a Person's name such as M.D. /PhD/MSCSW.
 *
 * http://schema.org/honorificSuffix
 */
export declare const honorificSuffix: Property;
/**
 * hostingOrganization
 *
 * The organization (airline, travelers' club, etc.) the membership is made with.
 *
 * http://schema.org/hostingOrganization
 */
export declare const hostingOrganization: Property;
/**
 * hoursAvailable
 *
 * The hours during which this service or contact is available.
 *
 * http://schema.org/hoursAvailable
 */
export declare const hoursAvailable: Property;
/**
 * httpMethod
 *
 * An HTTP method that specifies the appropriate HTTP method for a request to an HTTP EntryPoint. Values are capitalized strings as used in HTTP.
 *
 * http://schema.org/httpMethod
 */
export declare const httpMethod: Property;
/**
 * iataCode
 *
 * IATA identifier for an airline or airport.
 *
 * http://schema.org/iataCode
 */
export declare const iataCode: Property;
/**
 * icaoCode
 *
 * ICAO identifier for an airport.
 *
 * http://schema.org/icaoCode
 */
export declare const icaoCode: Property;
/**
 * illustrator
 *
 * The illustrator of the book.
 *
 * http://schema.org/illustrator
 */
export declare const illustrator: Property;
/**
 * inAlbum
 *
 * The album to which this recording belongs.
 *
 * http://schema.org/inAlbum
 */
export declare const inAlbum: Property;
/**
 * inBroadcastLineup
 *
 * The CableOrSatelliteService offering the channel.
 *
 * http://schema.org/inBroadcastLineup
 */
export declare const inBroadcastLineup: Property;
/**
 * inPlaylist
 *
 * The playlist to which this recording belongs.
 *
 * http://schema.org/inPlaylist
 */
export declare const inPlaylist: Property;
/**
 * incentives
 *
 * Description of bonus and commission compensation aspects of the job.
 *
 * http://schema.org/incentives
 */
export declare const incentives: Property;
/**
 * includedComposition
 *
 * Smaller compositions included in this work (e.g. a movement in a symphony).
 *
 * http://schema.org/includedComposition
 */
export declare const includedComposition: Property;
/**
 * includedDataCatalog
 *
 * A data catalog which contains this dataset (this property was previously 'catalog', preferred name is now 'includedInDataCatalog').
 *
 * http://schema.org/includedDataCatalog
 */
export declare const includedDataCatalog: Property;
/**
 * includesObject
 *
 * This links to a node or nodes indicating the exact quantity of the products included in the offer.
 *
 * http://schema.org/includesObject
 */
export declare const includesObject: Property;
/**
 * industry
 *
 * The industry associated with the job position.
 *
 * http://schema.org/industry
 */
export declare const industry: Property;
/**
 * ineligibleRegion
 *
 * The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.<br/><br/>
 *
 * See also <a class="localLink" href="http://schema.org/eligibleRegion">eligibleRegion</a>.
 *
 * http://schema.org/ineligibleRegion
 */
export declare const ineligibleRegion: Property;
/**
 * ingredients
 *
 * A single ingredient used in the recipe, e.g. sugar, flour or garlic.
 *
 * http://schema.org/ingredients
 */
export declare const ingredients: Property;
/**
 * installUrl
 *
 * URL at which the app may be installed, if different from the URL of the item.
 *
 * http://schema.org/installUrl
 */
export declare const installUrl: Property;
/**
 * instructor
 *
 * A person assigned to instruct or provide instructional assistance for the <a class="localLink" href="http://schema.org/CourseInstance">CourseInstance</a>.
 *
 * http://schema.org/instructor
 */
export declare const instructor: Property;
/**
 * interactionCount
 *
 * This property is deprecated, alongside the UserInteraction types on which it depended.
 *
 * http://schema.org/interactionCount
 */
export declare const interactionCount: Property;
/**
 * interactionService
 *
 * The WebSite or SoftwareApplication where the interactions took place.
 *
 * http://schema.org/interactionService
 */
export declare const interactionService: Property;
/**
 * interactionType
 *
 * The Action representing the type of interaction. For up votes, +1s, etc. use <a class="localLink" href="http://schema.org/LikeAction">LikeAction</a>. For down votes use <a class="localLink" href="http://schema.org/DislikeAction">DislikeAction</a>. Otherwise, use the most specific Action.
 *
 * http://schema.org/interactionType
 */
export declare const interactionType: Property;
/**
 * interactivityType
 *
 * The predominant mode of learning supported by the learning resource. Acceptable values are 'active', 'expositive', or 'mixed'.
 *
 * http://schema.org/interactivityType
 */
export declare const interactivityType: Property;
/**
 * interestRate
 *
 * The interest rate, charged or paid, applicable to the financial product. Note: This is different from the calculated annualPercentageRate.
 *
 * http://schema.org/interestRate
 */
export declare const interestRate: Property;
/**
 * inventoryLevel
 *
 * The current approximate inventory level for the item or items.
 *
 * http://schema.org/inventoryLevel
 */
export declare const inventoryLevel: Property;
/**
 * isAccessoryOrSparePartFor
 *
 * A pointer to another product (or multiple products) for which this product is an accessory or spare part.
 *
 * http://schema.org/isAccessoryOrSparePartFor
 */
export declare const isAccessoryOrSparePartFor: Property;
/**
 * isBasedOnUrl
 *
 * A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.
 *
 * http://schema.org/isBasedOnUrl
 */
export declare const isBasedOnUrl: Property;
/**
 * isConsumableFor
 *
 * A pointer to another product (or multiple products) for which this product is a consumable.
 *
 * http://schema.org/isConsumableFor
 */
export declare const isConsumableFor: Property;
/**
 * isFamilyFriendly
 *
 * Indicates whether this content is family friendly.
 *
 * http://schema.org/isFamilyFriendly
 */
export declare const isFamilyFriendly: Property;
/**
 * isGift
 *
 * Was the offer accepted as a gift for someone other than the buyer.
 *
 * http://schema.org/isGift
 */
export declare const isGift: Property;
/**
 * isLiveBroadcast
 *
 * True is the broadcast is of a live event.
 *
 * http://schema.org/isLiveBroadcast
 */
export declare const isLiveBroadcast: Property;
/**
 * isRelatedTo
 *
 * A pointer to another, somehow related product (or multiple products).
 *
 * http://schema.org/isRelatedTo
 */
export declare const isRelatedTo: Property;
/**
 * isSimilarTo
 *
 * A pointer to another, functionally similar product (or multiple products).
 *
 * http://schema.org/isSimilarTo
 */
export declare const isSimilarTo: Property;
/**
 * isVariantOf
 *
 * A pointer to a base product from which this product is a variant. It is safe to infer that the variant inherits all product features from the base model, unless defined locally. This is not transitive.
 *
 * http://schema.org/isVariantOf
 */
export declare const isVariantOf: Property;
/**
 * isbn
 *
 * The ISBN of the book.
 *
 * http://schema.org/isbn
 */
export declare const isbn: Property;
/**
 * isicV4
 *
 * The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
 *
 * http://schema.org/isicV4
 */
export declare const isicV4: Property;
/**
 * isrcCode
 *
 * The International Standard Recording Code for the recording.
 *
 * http://schema.org/isrcCode
 */
export declare const isrcCode: Property;
/**
 * issn
 *
 * The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.
 *
 * http://schema.org/issn
 */
export declare const issn: Property;
/**
 * issueNumber
 *
 * Identifies the issue of publication; for example, "iii" or "2".
 *
 * http://schema.org/issueNumber
 */
export declare const issueNumber: Property;
/**
 * issuedBy
 *
 * The organization issuing the ticket or permit.
 *
 * http://schema.org/issuedBy
 */
export declare const issuedBy: Property;
/**
 * issuedThrough
 *
 * The service through with the permit was granted.
 *
 * http://schema.org/issuedThrough
 */
export declare const issuedThrough: Property;
/**
 * iswcCode
 *
 * The International Standard Musical Work Code for the composition.
 *
 * http://schema.org/iswcCode
 */
export declare const iswcCode: Property;
/**
 * item
 *
 * An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists')’.
 *
 * http://schema.org/item
 */
export declare const item: Property;
/**
 * itemCondition
 *
 * A predefined value from OfferItemCondition or a textual description of the condition of the product or service, or the products or services included in the offer.
 *
 * http://schema.org/itemCondition
 */
export declare const itemCondition: Property;
/**
 * itemListElement
 *
 * For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use ListItem.<br/><br/>
 *
 * Text values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.<br/><br/>
 *
 * Note: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases.
 *
 * http://schema.org/itemListElement
 */
export declare const itemListElement: Property;
/**
 * itemListOrder
 *
 * Type of ordering (e.g. Ascending, Descending, Unordered).
 *
 * http://schema.org/itemListOrder
 */
export declare const itemListOrder: Property;
/**
 * itemOffered
 *
 * The item being offered.
 *
 * http://schema.org/itemOffered
 */
export declare const itemOffered: Property;
/**
 * itemReviewed
 *
 * The item that is being reviewed/rated.
 *
 * http://schema.org/itemReviewed
 */
export declare const itemReviewed: Property;
/**
 * itemShipped
 *
 * Item(s) being shipped.
 *
 * http://schema.org/itemShipped
 */
export declare const itemShipped: Property;
/**
 * jobLocation
 *
 * A (typically single) geographic location associated with the job position.
 *
 * http://schema.org/jobLocation
 */
export declare const jobLocation: Property;
/**
 * keywords
 *
 * Keywords or tags used to describe this content. Multiple entries in a keywords list are typically delimited by commas.
 *
 * http://schema.org/keywords
 */
export declare const keywords: Property;
/**
 * knownVehicleDamages
 *
 * A textual description of known damages, both repaired and unrepaired.
 *
 * http://schema.org/knownVehicleDamages
 */
export declare const knownVehicleDamages: Property;
/**
 * knows
 *
 * The most generic bi-directional social/work relation.
 *
 * http://schema.org/knows
 */
export declare const knows: Property;
/**
 * landlord
 *
 * A sub property of participant. The owner of the real estate property.
 *
 * http://schema.org/landlord
 */
export declare const landlord: Property;
/**
 * language
 *
 * A sub property of instrument. The language used on this action.
 *
 * http://schema.org/language
 */
export declare const language: Property;
/**
 * lastReviewed
 *
 * Date on which the content on this web page was last reviewed for accuracy and/or completeness.
 *
 * http://schema.org/lastReviewed
 */
export declare const lastReviewed: Property;
/**
 * latitude
 *
 * The latitude of a location. For example <code>37.42242</code> (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).
 *
 * http://schema.org/latitude
 */
export declare const latitude: Property;
/**
 * learningResourceType
 *
 * The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'.
 *
 * http://schema.org/learningResourceType
 */
export declare const learningResourceType: Property;
/**
 * legalName
 *
 * The official name of the organization, e.g. the registered company name.
 *
 * http://schema.org/legalName
 */
export declare const legalName: Property;
/**
 * leiCode
 *
 * An organization identifier that uniquely identifies a legal entity as defined in ISO 17442.
 *
 * http://schema.org/leiCode
 */
export declare const leiCode: Property;
/**
 * lender
 *
 * A sub property of participant. The person that lends the object being borrowed.
 *
 * http://schema.org/lender
 */
export declare const lender: Property;
/**
 * lesser
 *
 * This ordering relation for qualitative values indicates that the subject is lesser than the object.
 *
 * http://schema.org/lesser
 */
export declare const lesser: Property;
/**
 * lesserOrEqual
 *
 * This ordering relation for qualitative values indicates that the subject is lesser than or equal to the object.
 *
 * http://schema.org/lesserOrEqual
 */
export declare const lesserOrEqual: Property;
/**
 * license
 *
 * A license document that applies to this content, typically indicated by URL.
 *
 * http://schema.org/license
 */
export declare const license: Property;
/**
 * line
 *
 * A line is a point-to-point path consisting of two or more points. A line is expressed as a series of two or more point objects separated by space.
 *
 * http://schema.org/line
 */
export declare const line: Property;
/**
 * liveBlogUpdate
 *
 * An update to the LiveBlog.
 *
 * http://schema.org/liveBlogUpdate
 */
export declare const liveBlogUpdate: Property;
/**
 * loanTerm
 *
 * The duration of the loan or credit agreement.
 *
 * http://schema.org/loanTerm
 */
export declare const loanTerm: Property;
/**
 * locationCreated
 *
 * The location where the CreativeWork was created, which may not be the same as the location depicted in the CreativeWork.
 *
 * http://schema.org/locationCreated
 */
export declare const locationCreated: Property;
/**
 * lodgingUnitDescription
 *
 * A full description of the lodging unit.
 *
 * http://schema.org/lodgingUnitDescription
 */
export declare const lodgingUnitDescription: Property;
/**
 * lodgingUnitType
 *
 * Textual description of the unit type (including suite vs. room, size of bed, etc.).
 *
 * http://schema.org/lodgingUnitType
 */
export declare const lodgingUnitType: Property;
/**
 * logo
 *
 * An associated logo.
 *
 * http://schema.org/logo
 */
export declare const logo: Property;
/**
 * longitude
 *
 * The longitude of a location. For example <code>-122.08585</code> (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).
 *
 * http://schema.org/longitude
 */
export declare const longitude: Property;
/**
 * loser
 *
 * A sub property of participant. The loser of the action.
 *
 * http://schema.org/loser
 */
export declare const loser: Property;
/**
 * lowPrice
 *
 * The lowest price of all offers available.<br/><br/>
 *
 * Usage guidelines:<br/><br/>
 *
 * <ul>
 * <li>Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.</li>
 * <li>Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.</li>
 * </ul>
 *
 *
 * http://schema.org/lowPrice
 */
export declare const lowPrice: Property;
/**
 * lyricist
 *
 * The person who wrote the words.
 *
 * http://schema.org/lyricist
 */
export declare const lyricist: Property;
/**
 * lyrics
 *
 * The words in the song.
 *
 * http://schema.org/lyrics
 */
export declare const lyrics: Property;
/**
 * mainContentOfPage
 *
 * Indicates if this web page element is the main subject of the page.
 *
 * http://schema.org/mainContentOfPage
 */
export declare const mainContentOfPage: Property;
/**
 * manufacturer
 *
 * The manufacturer of the product.
 *
 * http://schema.org/manufacturer
 */
export declare const manufacturer: Property;
/**
 * map
 *
 * A URL to a map of the place.
 *
 * http://schema.org/map
 */
export declare const map: Property;
/**
 * mapType
 *
 * Indicates the kind of Map, from the MapCategoryType Enumeration.
 *
 * http://schema.org/mapType
 */
export declare const mapType: Property;
/**
 * maps
 *
 * A URL to a map of the place.
 *
 * http://schema.org/maps
 */
export declare const maps: Property;
/**
 * maxPrice
 *
 * The highest price if the price is a range.
 *
 * http://schema.org/maxPrice
 */
export declare const maxPrice: Property;
/**
 * maxValue
 *
 * The upper value of some characteristic or property.
 *
 * http://schema.org/maxValue
 */
export declare const maxValue: Property;
/**
 * maximumAttendeeCapacity
 *
 * The total number of individuals that may attend an event or venue.
 *
 * http://schema.org/maximumAttendeeCapacity
 */
export declare const maximumAttendeeCapacity: Property;
/**
 * mealService
 *
 * Description of the meals that will be provided or available for purchase.
 *
 * http://schema.org/mealService
 */
export declare const mealService: Property;
/**
 * median
 *
 * The median value.
 *
 * http://schema.org/median
 */
export declare const median: Property;
/**
 * members
 *
 * A member of this organization.
 *
 * http://schema.org/members
 */
export declare const members: Property;
/**
 * membershipNumber
 *
 * A unique identifier for the membership.
 *
 * http://schema.org/membershipNumber
 */
export declare const membershipNumber: Property;
/**
 * memoryRequirements
 *
 * Minimum memory requirements.
 *
 * http://schema.org/memoryRequirements
 */
export declare const memoryRequirements: Property;
/**
 * mentions
 *
 * Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept.
 *
 * http://schema.org/mentions
 */
export declare const mentions: Property;
/**
 * menu
 *
 * Either the actual menu as a structured representation, as text, or a URL of the menu.
 *
 * http://schema.org/menu
 */
export declare const menu: Property;
/**
 * menuAddOn
 *
 * Additional menu item(s) such as a side dish of salad or side order of fries that can be added to this menu item. Additionally it can be a menu section containing allowed add-on menu items for this menu item.
 *
 * http://schema.org/menuAddOn
 */
export declare const menuAddOn: Property;
/**
 * merchant
 *
 * 'merchant' is an out-dated term for 'seller'.
 *
 * http://schema.org/merchant
 */
export declare const merchant: Property;
/**
 * messageAttachment
 *
 * A CreativeWork attached to the message.
 *
 * http://schema.org/messageAttachment
 */
export declare const messageAttachment: Property;
/**
 * mileageFromOdometer
 *
 * The total distance travelled by the particular vehicle since its initial production, as read from its odometer.<br/><br/>
 *
 * Typical unit code(s): KMT for kilometers, SMI for statute miles
 *
 * http://schema.org/mileageFromOdometer
 */
export declare const mileageFromOdometer: Property;
/**
 * minPrice
 *
 * The lowest price if the price is a range.
 *
 * http://schema.org/minPrice
 */
export declare const minPrice: Property;
/**
 * minValue
 *
 * The lower value of some characteristic or property.
 *
 * http://schema.org/minValue
 */
export declare const minValue: Property;
/**
 * minimumPaymentDue
 *
 * The minimum payment required at this time.
 *
 * http://schema.org/minimumPaymentDue
 */
export declare const minimumPaymentDue: Property;
/**
 * model
 *
 * The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.
 *
 * http://schema.org/model
 */
export declare const model: Property;
/**
 * modifiedTime
 *
 * The date and time the reservation was modified.
 *
 * http://schema.org/modifiedTime
 */
export declare const modifiedTime: Property;
/**
 * mpn
 *
 * The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.
 *
 * http://schema.org/mpn
 */
export declare const mpn: Property;
/**
 * multipleValues
 *
 * Whether multiple values are allowed for the property.  Default is false.
 *
 * http://schema.org/multipleValues
 */
export declare const multipleValues: Property;
/**
 * musicArrangement
 *
 * An arrangement derived from the composition.
 *
 * http://schema.org/musicArrangement
 */
export declare const musicArrangement: Property;
/**
 * musicBy
 *
 * The composer of the soundtrack.
 *
 * http://schema.org/musicBy
 */
export declare const musicBy: Property;
/**
 * musicCompositionForm
 *
 * The type of composition (e.g. overture, sonata, symphony, etc.).
 *
 * http://schema.org/musicCompositionForm
 */
export declare const musicCompositionForm: Property;
/**
 * musicGroupMember
 *
 * A member of a music group&#x2014;for example, John, Paul, George, or Ringo.
 *
 * http://schema.org/musicGroupMember
 */
export declare const musicGroupMember: Property;
/**
 * musicReleaseFormat
 *
 * Format of this release (the type of recording media used, ie. compact disc, digital media, LP, etc.).
 *
 * http://schema.org/musicReleaseFormat
 */
export declare const musicReleaseFormat: Property;
/**
 * musicalKey
 *
 * The key, mode, or scale this composition uses.
 *
 * http://schema.org/musicalKey
 */
export declare const musicalKey: Property;
/**
 * naics
 *
 * The North American Industry Classification System (NAICS) code for a particular organization or business person.
 *
 * http://schema.org/naics
 */
export declare const naics: Property;
/**
 * name
 *
 * The name of the item.
 *
 * http://schema.org/name
 */
export declare const name: Property;
/**
 * namedPosition
 *
 * A position played, performed or filled by a person or organization, as part of an organization. For example, an athlete in a SportsTeam might play in the position named 'Quarterback'.
 *
 * http://schema.org/namedPosition
 */
export declare const namedPosition: Property;
/**
 * nationality
 *
 * Nationality of the person.
 *
 * http://schema.org/nationality
 */
export declare const nationality: Property;
/**
 * netWorth
 *
 * The total financial value of the person as calculated by subtracting assets from liabilities.
 *
 * http://schema.org/netWorth
 */
export declare const netWorth: Property;
/**
 * nextItem
 *
 * A link to the ListItem that follows the current one.
 *
 * http://schema.org/nextItem
 */
export declare const nextItem: Property;
/**
 * nonEqual
 *
 * This ordering relation for qualitative values indicates that the subject is not equal to the object.
 *
 * http://schema.org/nonEqual
 */
export declare const nonEqual: Property;
/**
 * numAdults
 *
 * The number of adults staying in the unit.
 *
 * http://schema.org/numAdults
 */
export declare const numAdults: Property;
/**
 * numChildren
 *
 * The number of children staying in the unit.
 *
 * http://schema.org/numChildren
 */
export declare const numChildren: Property;
/**
 * numTracks
 *
 * The number of tracks in this album or playlist.
 *
 * http://schema.org/numTracks
 */
export declare const numTracks: Property;
/**
 * numberOfAirbags
 *
 * The number or type of airbags in the vehicle.
 *
 * http://schema.org/numberOfAirbags
 */
export declare const numberOfAirbags: Property;
/**
 * numberOfAxles
 *
 * The number of axles.<br/><br/>
 *
 * Typical unit code(s): C62
 *
 * http://schema.org/numberOfAxles
 */
export declare const numberOfAxles: Property;
/**
 * numberOfBeds
 *
 * The quantity of the given bed type available in the HotelRoom, Suite, House, or Apartment.
 *
 * http://schema.org/numberOfBeds
 */
export declare const numberOfBeds: Property;
/**
 * numberOfDoors
 *
 * The number of doors.<br/><br/>
 *
 * Typical unit code(s): C62
 *
 * http://schema.org/numberOfDoors
 */
export declare const numberOfDoors: Property;
/**
 * numberOfEmployees
 *
 * The number of employees in an organization e.g. business.
 *
 * http://schema.org/numberOfEmployees
 */
export declare const numberOfEmployees: Property;
/**
 * numberOfEpisodes
 *
 * The number of episodes in this season or series.
 *
 * http://schema.org/numberOfEpisodes
 */
export declare const numberOfEpisodes: Property;
/**
 * numberOfForwardGears
 *
 * The total number of forward gears available for the transmission system of the vehicle.<br/><br/>
 *
 * Typical unit code(s): C62
 *
 * http://schema.org/numberOfForwardGears
 */
export declare const numberOfForwardGears: Property;
/**
 * numberOfItems
 *
 * The number of items in an ItemList. Note that some descriptions might not fully describe all items in a list (e.g., multi-page pagination); in such cases, the numberOfItems would be for the entire list.
 *
 * http://schema.org/numberOfItems
 */
export declare const numberOfItems: Property;
/**
 * numberOfPages
 *
 * The number of pages in the book.
 *
 * http://schema.org/numberOfPages
 */
export declare const numberOfPages: Property;
/**
 * numberOfPlayers
 *
 * Indicate how many people can play this game (minimum, maximum, or range).
 *
 * http://schema.org/numberOfPlayers
 */
export declare const numberOfPlayers: Property;
/**
 * numberOfPreviousOwners
 *
 * The number of owners of the vehicle, including the current one.<br/><br/>
 *
 * Typical unit code(s): C62
 *
 * http://schema.org/numberOfPreviousOwners
 */
export declare const numberOfPreviousOwners: Property;
/**
 * numberOfRooms
 *
 * The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
 * Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
 *
 * http://schema.org/numberOfRooms
 */
export declare const numberOfRooms: Property;
/**
 * numberOfSeasons
 *
 * The number of seasons in this series.
 *
 * http://schema.org/numberOfSeasons
 */
export declare const numberOfSeasons: Property;
/**
 * numberedPosition
 *
 * A number associated with a role in an organization, for example, the number on an athlete's jersey.
 *
 * http://schema.org/numberedPosition
 */
export declare const numberedPosition: Property;
/**
 * nutrition
 *
 * Nutrition information about the recipe or menu item.
 *
 * http://schema.org/nutrition
 */
export declare const nutrition: Property;
/**
 * occupancy
 *
 * The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).
 * Typical unit code(s): C62 for person
 *
 * http://schema.org/occupancy
 */
export declare const occupancy: Property;
/**
 * occupationLocation
 *
 * The region/country for which this occupational description is appropriate. Note that educational requirements and qualifications can vary between jurisdictions.
 *
 * http://schema.org/occupationLocation
 */
export declare const occupationLocation: Property;
/**
 * occupationalCategory
 *
 * A category describing the job, preferably using a term from a taxonomy such as <a href="http://www.onetcenter.org/taxonomy.html">BLS O*NET-SOC</a>, <a href="https://www.ilo.org/public/english/bureau/stat/isco/isco08/">ISCO-08</a> or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/><br/>
 *
 * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
 *
 * http://schema.org/occupationalCategory
 */
export declare const occupationalCategory: Property;
/**
 * offerCount
 *
 * The number of offers for the product.
 *
 * http://schema.org/offerCount
 */
export declare const offerCount: Property;
/**
 * offers
 *
 * An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event.
 *
 * http://schema.org/offers
 */
export declare const offers: Property;
/**
 * openingHours
 *
 * The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day. Day or time ranges are specified using a hyphen '-'.<br/><br/>
 *
 * <ul>
 * <li>Days are specified using the following two-letter combinations: <code>Mo</code>, <code>Tu</code>, <code>We</code>, <code>Th</code>, <code>Fr</code>, <code>Sa</code>, <code>Su</code>.</li>
 * <li>Times are specified using 24:00 time. For example, 3pm is specified as <code>15:00</code>. </li>
 * <li>Here is an example: <code>&lt;time itemprop="openingHours" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays and Thursdays 4-8pm&lt;/time&gt;</code>.</li>
 * <li>If a business is open 7 days a week, then it can be specified as <code>&lt;time itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday through Sunday, all day&lt;/time&gt;</code>.</li>
 * </ul>
 *
 *
 * http://schema.org/openingHours
 */
export declare const openingHours: Property;
/**
 * openingHoursSpecification
 *
 * The opening hours of a certain place.
 *
 * http://schema.org/openingHoursSpecification
 */
export declare const openingHoursSpecification: Property;
/**
 * opens
 *
 * The opening hour of the place or service on the given day(s) of the week.
 *
 * http://schema.org/opens
 */
export declare const opens: Property;
/**
 * operatingSystem
 *
 * Operating systems supported (Windows 7, OSX 10.6, Android 1.6).
 *
 * http://schema.org/operatingSystem
 */
export declare const operatingSystem: Property;
/**
 * opponent
 *
 * A sub property of participant. The opponent on this action.
 *
 * http://schema.org/opponent
 */
export declare const opponent: Property;
/**
 * option
 *
 * A sub property of object. The options subject to this action.
 *
 * http://schema.org/option
 */
export declare const option: Property;
/**
 * orderDate
 *
 * Date order was placed.
 *
 * http://schema.org/orderDate
 */
export declare const orderDate: Property;
/**
 * orderDelivery
 *
 * The delivery of the parcel related to this order or order item.
 *
 * http://schema.org/orderDelivery
 */
export declare const orderDelivery: Property;
/**
 * orderItemNumber
 *
 * The identifier of the order item.
 *
 * http://schema.org/orderItemNumber
 */
export declare const orderItemNumber: Property;
/**
 * orderItemStatus
 *
 * The current status of the order item.
 *
 * http://schema.org/orderItemStatus
 */
export declare const orderItemStatus: Property;
/**
 * orderNumber
 *
 * The identifier of the transaction.
 *
 * http://schema.org/orderNumber
 */
export declare const orderNumber: Property;
/**
 * orderQuantity
 *
 * The number of the item ordered. If the property is not set, assume the quantity is one.
 *
 * http://schema.org/orderQuantity
 */
export declare const orderQuantity: Property;
/**
 * orderStatus
 *
 * The current status of the order.
 *
 * http://schema.org/orderStatus
 */
export declare const orderStatus: Property;
/**
 * orderedItem
 *
 * The item ordered.
 *
 * http://schema.org/orderedItem
 */
export declare const orderedItem: Property;
/**
 * organizer
 *
 * An organizer of an Event.
 *
 * http://schema.org/organizer
 */
export declare const organizer: Property;
/**
 * originAddress
 *
 * Shipper's address.
 *
 * http://schema.org/originAddress
 */
export declare const originAddress: Property;
/**
 * ownedFrom
 *
 * The date and time of obtaining the product.
 *
 * http://schema.org/ownedFrom
 */
export declare const ownedFrom: Property;
/**
 * ownedThrough
 *
 * The date and time of giving up ownership on the product.
 *
 * http://schema.org/ownedThrough
 */
export declare const ownedThrough: Property;
/**
 * owns
 *
 * Products owned by the organization or person.
 *
 * http://schema.org/owns
 */
export declare const owns: Property;
/**
 * pageEnd
 *
 * The page on which the work ends; for example "138" or "xvi".
 *
 * http://schema.org/pageEnd
 */
export declare const pageEnd: Property;
/**
 * pageStart
 *
 * The page on which the work starts; for example "135" or "xiii".
 *
 * http://schema.org/pageStart
 */
export declare const pageStart: Property;
/**
 * pagination
 *
 * Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49".
 *
 * http://schema.org/pagination
 */
export declare const pagination: Property;
/**
 * parentItem
 *
 * The parent of a question, answer or item in general.
 *
 * http://schema.org/parentItem
 */
export declare const parentItem: Property;
/**
 * parentService
 *
 * A broadcast service to which the broadcast service may belong to such as regional variations of a national channel.
 *
 * http://schema.org/parentService
 */
export declare const parentService: Property;
/**
 * parents
 *
 * A parents of the person.
 *
 * http://schema.org/parents
 */
export declare const parents: Property;
/**
 * partOfEpisode
 *
 * The episode to which this clip belongs.
 *
 * http://schema.org/partOfEpisode
 */
export declare const partOfEpisode: Property;
/**
 * partOfInvoice
 *
 * The order is being paid as part of the referenced Invoice.
 *
 * http://schema.org/partOfInvoice
 */
export declare const partOfInvoice: Property;
/**
 * partOfOrder
 *
 * The overall order the items in this delivery were included in.
 *
 * http://schema.org/partOfOrder
 */
export declare const partOfOrder: Property;
/**
 * partOfSeason
 *
 * The season to which this episode belongs.
 *
 * http://schema.org/partOfSeason
 */
export declare const partOfSeason: Property;
/**
 * partOfTVSeries
 *
 * The TV series to which this episode or season belongs.
 *
 * http://schema.org/partOfTVSeries
 */
export declare const partOfTVSeries: Property;
/**
 * partySize
 *
 * Number of people the reservation should accommodate.
 *
 * http://schema.org/partySize
 */
export declare const partySize: Property;
/**
 * passengerPriorityStatus
 *
 * The priority status assigned to a passenger for security or boarding (e.g. FastTrack or Priority).
 *
 * http://schema.org/passengerPriorityStatus
 */
export declare const passengerPriorityStatus: Property;
/**
 * passengerSequenceNumber
 *
 * The passenger's sequence number as assigned by the airline.
 *
 * http://schema.org/passengerSequenceNumber
 */
export declare const passengerSequenceNumber: Property;
/**
 * paymentAccepted
 *
 * Cash, Credit Card, Cryptocurrency, Local Exchange Tradings System, etc.
 *
 * http://schema.org/paymentAccepted
 */
export declare const paymentAccepted: Property;
/**
 * paymentDue
 *
 * The date that payment is due.
 *
 * http://schema.org/paymentDue
 */
export declare const paymentDue: Property;
/**
 * paymentMethod
 *
 * The name of the credit card or other method of payment for the order.
 *
 * http://schema.org/paymentMethod
 */
export declare const paymentMethod: Property;
/**
 * paymentMethodId
 *
 * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
 *
 * http://schema.org/paymentMethodId
 */
export declare const paymentMethodId: Property;
/**
 * paymentStatus
 *
 * The status of payment; whether the invoice has been paid or not.
 *
 * http://schema.org/paymentStatus
 */
export declare const paymentStatus: Property;
/**
 * paymentUrl
 *
 * The URL for sending a payment.
 *
 * http://schema.org/paymentUrl
 */
export declare const paymentUrl: Property;
/**
 * percentile10
 *
 * The 10th percentile value.
 *
 * http://schema.org/percentile10
 */
export declare const percentile10: Property;
/**
 * percentile25
 *
 * The 25th percentile value.
 *
 * http://schema.org/percentile25
 */
export declare const percentile25: Property;
/**
 * percentile75
 *
 * The 75th percentile value.
 *
 * http://schema.org/percentile75
 */
export declare const percentile75: Property;
/**
 * percentile90
 *
 * The 90th percentile value.
 *
 * http://schema.org/percentile90
 */
export declare const percentile90: Property;
/**
 * performerIn
 *
 * Event that this person is a performer or participant in.
 *
 * http://schema.org/performerIn
 */
export declare const performerIn: Property;
/**
 * performers
 *
 * The main performer or performers of the event&#x2014;for example, a presenter, musician, or actor.
 *
 * http://schema.org/performers
 */
export declare const performers: Property;
/**
 * permissionType
 *
 * The type of permission granted the person, organization, or audience.
 *
 * http://schema.org/permissionType
 */
export declare const permissionType: Property;
/**
 * permissions
 *
 * Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
 *
 * http://schema.org/permissions
 */
export declare const permissions: Property;
/**
 * permitAudience
 *
 * The target audience for this permit.
 *
 * http://schema.org/permitAudience
 */
export declare const permitAudience: Property;
/**
 * permittedUsage
 *
 * Indications regarding the permitted usage of the accommodation.
 *
 * http://schema.org/permittedUsage
 */
export declare const permittedUsage: Property;
/**
 * petsAllowed
 *
 * Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value.
 *
 * http://schema.org/petsAllowed
 */
export declare const petsAllowed: Property;
/**
 * photos
 *
 * Photographs of this place.
 *
 * http://schema.org/photos
 */
export declare const photos: Property;
/**
 * pickupLocation
 *
 * Where a taxi will pick up a passenger or a rental car can be picked up.
 *
 * http://schema.org/pickupLocation
 */
export declare const pickupLocation: Property;
/**
 * pickupTime
 *
 * When a taxi will pickup a passenger or a rental car can be picked up.
 *
 * http://schema.org/pickupTime
 */
export declare const pickupTime: Property;
/**
 * playMode
 *
 * Indicates whether this game is multi-player, co-op or single-player.  The game can be marked as multi-player, co-op and single-player at the same time.
 *
 * http://schema.org/playMode
 */
export declare const playMode: Property;
/**
 * playerType
 *
 * Player type required&#x2014;for example, Flash or Silverlight.
 *
 * http://schema.org/playerType
 */
export declare const playerType: Property;
/**
 * playersOnline
 *
 * Number of players on the server.
 *
 * http://schema.org/playersOnline
 */
export declare const playersOnline: Property;
/**
 * polygon
 *
 * A polygon is the area enclosed by a point-to-point path for which the starting and ending points are the same. A polygon is expressed as a series of four or more space delimited points where the first and final points are identical.
 *
 * http://schema.org/polygon
 */
export declare const polygon: Property;
/**
 * postOfficeBoxNumber
 *
 * The post office box number for PO box addresses.
 *
 * http://schema.org/postOfficeBoxNumber
 */
export declare const postOfficeBoxNumber: Property;
/**
 * postalCode
 *
 * The postal code. For example, 94043.
 *
 * http://schema.org/postalCode
 */
export declare const postalCode: Property;
/**
 * potentialAction
 *
 * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
 *
 * http://schema.org/potentialAction
 */
export declare const potentialAction: Property;
/**
 * predecessorOf
 *
 * A pointer from a previous, often discontinued variant of the product to its newer variant.
 *
 * http://schema.org/predecessorOf
 */
export declare const predecessorOf: Property;
/**
 * prepTime
 *
 * The length of time it takes to prepare the items to be used in instructions or a direction, in <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601 duration format</a>.
 *
 * http://schema.org/prepTime
 */
export declare const prepTime: Property;
/**
 * previousItem
 *
 * A link to the ListItem that preceeds the current one.
 *
 * http://schema.org/previousItem
 */
export declare const previousItem: Property;
/**
 * previousStartDate
 *
 * Used in conjunction with eventStatus for rescheduled or cancelled events. This property contains the previously scheduled start date. For rescheduled events, the startDate property should be used for the newly scheduled start date. In the (rare) case of an event that has been postponed and rescheduled multiple times, this field may be repeated.
 *
 * http://schema.org/previousStartDate
 */
export declare const previousStartDate: Property;
/**
 * price
 *
 * The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.<br/><br/>
 *
 * Usage guidelines:<br/><br/>
 *
 * <ul>
 * <li>Use the <a class="localLink" href="http://schema.org/priceCurrency">priceCurrency</a> property (with standard formats: <a href="http://en.wikipedia.org/wiki/ISO_4217">ISO 4217 currency format</a> e.g. "USD"; <a href="https://en.wikipedia.org/wiki/List_of_cryptocurrencies">Ticker symbol</a> for cryptocurrencies e.g. "BTC"; well known names for <a href="https://en.wikipedia.org/wiki/Local_exchange_trading_system">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. "Ithaca HOUR") instead of including <a href="http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign">ambiguous symbols</a> such as '$' in the value.</li>
 * <li>Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.</li>
 * <li>Note that both <a href="http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute">RDFa</a> and Microdata syntax allow the use of a "content=" attribute for publishing simple machine-readable values alongside more human-friendly formatting.</li>
 * <li>Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.</li>
 * </ul>
 *
 *
 * http://schema.org/price
 */
export declare const price: Property;
/**
 * priceComponent
 *
 * This property links to all <a class="localLink" href="http://schema.org/UnitPriceSpecification">UnitPriceSpecification</a> nodes that apply in parallel for the <a class="localLink" href="http://schema.org/CompoundPriceSpecification">CompoundPriceSpecification</a> node.
 *
 * http://schema.org/priceComponent
 */
export declare const priceComponent: Property;
/**
 * priceCurrency
 *
 * The currency of the price, or a price component when attached to <a class="localLink" href="http://schema.org/PriceSpecification">PriceSpecification</a> and its subtypes.<br/><br/>
 *
 * Use standard formats: <a href="http://en.wikipedia.org/wiki/ISO_4217">ISO 4217 currency format</a> e.g. "USD"; <a href="https://en.wikipedia.org/wiki/List_of_cryptocurrencies">Ticker symbol</a> for cryptocurrencies e.g. "BTC"; well known names for <a href="https://en.wikipedia.org/wiki/Local_exchange_trading_system">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. "Ithaca HOUR".
 *
 * http://schema.org/priceCurrency
 */
export declare const priceCurrency: Property;
/**
 * priceRange
 *
 * The price range of the business, for example <code>$$$</code>.
 *
 * http://schema.org/priceRange
 */
export declare const priceRange: Property;
/**
 * priceSpecification
 *
 * One or more detailed price specifications, indicating the unit price and delivery or payment charges.
 *
 * http://schema.org/priceSpecification
 */
export declare const priceSpecification: Property;
/**
 * priceType
 *
 * A short text or acronym indicating multiple price specifications for the same offer, e.g. SRP for the suggested retail price or INVOICE for the invoice price, mostly used in the car industry.
 *
 * http://schema.org/priceType
 */
export declare const priceType: Property;
/**
 * priceValidUntil
 *
 * The date after which the price is no longer available.
 *
 * http://schema.org/priceValidUntil
 */
export declare const priceValidUntil: Property;
/**
 * primaryImageOfPage
 *
 * Indicates the main image on the page.
 *
 * http://schema.org/primaryImageOfPage
 */
export declare const primaryImageOfPage: Property;
/**
 * printColumn
 *
 * The number of the column in which the NewsArticle appears in the print edition.
 *
 * http://schema.org/printColumn
 */
export declare const printColumn: Property;
/**
 * printEdition
 *
 * The edition of the print product in which the NewsArticle appears.
 *
 * http://schema.org/printEdition
 */
export declare const printEdition: Property;
/**
 * printPage
 *
 * If this NewsArticle appears in print, this field indicates the name of the page on which the article is found. Please note that this field is intended for the exact page name (e.g. A5, B18).
 *
 * http://schema.org/printPage
 */
export declare const printPage: Property;
/**
 * printSection
 *
 * If this NewsArticle appears in print, this field indicates the print section in which the article appeared.
 *
 * http://schema.org/printSection
 */
export declare const printSection: Property;
/**
 * processingTime
 *
 * Estimated processing time for the service using this channel.
 *
 * http://schema.org/processingTime
 */
export declare const processingTime: Property;
/**
 * processorRequirements
 *
 * Processor architecture required to run the application (e.g. IA64).
 *
 * http://schema.org/processorRequirements
 */
export declare const processorRequirements: Property;
/**
 * producer
 *
 * The person or organization who produced the work (e.g. music album, movie, tv/radio series etc.).
 *
 * http://schema.org/producer
 */
export declare const producer: Property;
/**
 * produces
 *
 * The tangible thing generated by the service, e.g. a passport, permit, etc.
 *
 * http://schema.org/produces
 */
export declare const produces: Property;
/**
 * productID
 *
 * The product identifier, such as ISBN. For example: <code>meta itemprop="productID" content="isbn:123-456-789"</code>.
 *
 * http://schema.org/productID
 */
export declare const productID: Property;
/**
 * productSupported
 *
 * The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").
 *
 * http://schema.org/productSupported
 */
export declare const productSupported: Property;
/**
 * productionCompany
 *
 * The production company or studio responsible for the item e.g. series, video game, episode etc.
 *
 * http://schema.org/productionCompany
 */
export declare const productionCompany: Property;
/**
 * productionDate
 *
 * The date of production of the item, e.g. vehicle.
 *
 * http://schema.org/productionDate
 */
export declare const productionDate: Property;
/**
 * proficiencyLevel
 *
 * Proficiency needed for this content; expected values: 'Beginner', 'Expert'.
 *
 * http://schema.org/proficiencyLevel
 */
export declare const proficiencyLevel: Property;
/**
 * programMembershipUsed
 *
 * Any membership in a frequent flyer, hotel loyalty program, etc. being applied to the reservation.
 *
 * http://schema.org/programMembershipUsed
 */
export declare const programMembershipUsed: Property;
/**
 * programName
 *
 * The program providing the membership.
 *
 * http://schema.org/programName
 */
export declare const programName: Property;
/**
 * programmingLanguage
 *
 * The computer programming language.
 *
 * http://schema.org/programmingLanguage
 */
export declare const programmingLanguage: Property;
/**
 * programmingModel
 *
 * Indicates whether API is managed or unmanaged.
 *
 * http://schema.org/programmingModel
 */
export declare const programmingModel: Property;
/**
 * propertyID
 *
 * A commonly used identifier for the characteristic represented by the property, e.g. a manufacturer or a standard code for a property. propertyID can be
 * (1) a prefixed string, mainly meant to be used with standards for product properties; (2) a site-specific, non-prefixed string (e.g. the primary key of the property or the vendor-specific id of the property), or (3)
 * a URL indicating the type of the property, either pointing to an external vocabulary, or a Web resource that describes the property (e.g. a glossary entry).
 * Standards bodies should promote a standard prefix for the identifiers of properties from their standards.
 *
 * http://schema.org/propertyID
 */
export declare const propertyID: Property;
/**
 * proteinContent
 *
 * The number of grams of protein.
 *
 * http://schema.org/proteinContent
 */
export declare const proteinContent: Property;
/**
 * providerMobility
 *
 * Indicates the mobility of a provided service (e.g. 'static', 'dynamic').
 *
 * http://schema.org/providerMobility
 */
export declare const providerMobility: Property;
/**
 * providesService
 *
 * The service provided by this channel.
 *
 * http://schema.org/providesService
 */
export declare const providesService: Property;
/**
 * publicAccess
 *
 * A flag to signal that the <a class="localLink" href="http://schema.org/Place">Place</a> is open to public visitors.  If this property is omitted there is no assumed default boolean value
 *
 * http://schema.org/publicAccess
 */
export declare const publicAccess: Property;
/**
 * publication
 *
 * A publication event associated with the item.
 *
 * http://schema.org/publication
 */
export declare const publication: Property;
/**
 * publishedOn
 *
 * A broadcast service associated with the publication event.
 *
 * http://schema.org/publishedOn
 */
export declare const publishedOn: Property;
/**
 * publisher
 *
 * The publisher of the creative work.
 *
 * http://schema.org/publisher
 */
export declare const publisher: Property;
/**
 * publishingPrinciples
 *
 * The publishingPrinciples property indicates (typically via <a class="localLink" href="http://schema.org/URL">URL</a>) a document describing the editorial principles of an <a class="localLink" href="http://schema.org/Organization">Organization</a> (or individual e.g. a <a class="localLink" href="http://schema.org/Person">Person</a> writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a <a class="localLink" href="http://schema.org/CreativeWork">CreativeWork</a> (e.g. <a class="localLink" href="http://schema.org/NewsArticle">NewsArticle</a>) the principles are those of the party primarily responsible for the creation of the <a class="localLink" href="http://schema.org/CreativeWork">CreativeWork</a>.<br/><br/>
 *
 * While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a <a class="localLink" href="http://schema.org/funder">funder</a>) can be expressed using schema.org terminology.
 *
 * http://schema.org/publishingPrinciples
 */
export declare const publishingPrinciples: Property;
/**
 * purchaseDate
 *
 * The date the item e.g. vehicle was purchased by the current owner.
 *
 * http://schema.org/purchaseDate
 */
export declare const purchaseDate: Property;
/**
 * query
 *
 * A sub property of instrument. The query used on this action.
 *
 * http://schema.org/query
 */
export declare const query: Property;
/**
 * quest
 *
 * The task that a player-controlled character, or group of characters may complete in order to gain a reward.
 *
 * http://schema.org/quest
 */
export declare const quest: Property;
/**
 * question
 *
 * A sub property of object. A question.
 *
 * http://schema.org/question
 */
export declare const question: Property;
/**
 * ratingCount
 *
 * The count of total number of ratings.
 *
 * http://schema.org/ratingCount
 */
export declare const ratingCount: Property;
/**
 * ratingValue
 *
 * The rating for the content.<br/><br/>
 *
 * Usage guidelines:<br/><br/>
 *
 * <ul>
 * <li>Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.</li>
 * <li>Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.</li>
 * </ul>
 *
 *
 * http://schema.org/ratingValue
 */
export declare const ratingValue: Property;
/**
 * readonlyValue
 *
 * Whether or not a property is mutable.  Default is false. Specifying this for a property that also has a value makes it act similar to a "hidden" input in an HTML form.
 *
 * http://schema.org/readonlyValue
 */
export declare const readonlyValue: Property;
/**
 * realEstateAgent
 *
 * A sub property of participant. The real estate agent involved in the action.
 *
 * http://schema.org/realEstateAgent
 */
export declare const realEstateAgent: Property;
/**
 * recipe
 *
 * A sub property of instrument. The recipe/instructions used to perform the action.
 *
 * http://schema.org/recipe
 */
export declare const recipe: Property;
/**
 * recipeCategory
 *
 * The category of the recipe—for example, appetizer, entree, etc.
 *
 * http://schema.org/recipeCategory
 */
export declare const recipeCategory: Property;
/**
 * recipeCuisine
 *
 * The cuisine of the recipe (for example, French or Ethiopian).
 *
 * http://schema.org/recipeCuisine
 */
export declare const recipeCuisine: Property;
/**
 * recipeInstructions
 *
 * A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered list with HowToStep and/or HowToSection items.
 *
 * http://schema.org/recipeInstructions
 */
export declare const recipeInstructions: Property;
/**
 * recipeYield
 *
 * The quantity produced by the recipe (for example, number of people served, number of servings, etc).
 *
 * http://schema.org/recipeYield
 */
export declare const recipeYield: Property;
/**
 * recordLabel
 *
 * The label that issued the release.
 *
 * http://schema.org/recordLabel
 */
export declare const recordLabel: Property;
/**
 * referenceQuantity
 *
 * The reference quantity for which a certain price applies, e.g. 1 EUR per 4 kWh of electricity. This property is a replacement for unitOfMeasurement for the advanced cases where the price does not relate to a standard unit.
 *
 * http://schema.org/referenceQuantity
 */
export declare const referenceQuantity: Property;
/**
 * referencesOrder
 *
 * The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
 *
 * http://schema.org/referencesOrder
 */
export declare const referencesOrder: Property;
/**
 * regionsAllowed
 *
 * The regions where the media is allowed. If not specified, then it's assumed to be allowed everywhere. Specify the countries in <a href="http://en.wikipedia.org/wiki/ISO_3166">ISO 3166 format</a>.
 *
 * http://schema.org/regionsAllowed
 */
export declare const regionsAllowed: Property;
/**
 * relatedLink
 *
 * A link related to this web page, for example to other related web pages.
 *
 * http://schema.org/relatedLink
 */
export declare const relatedLink: Property;
/**
 * relatedTo
 *
 * The most generic familial relation.
 *
 * http://schema.org/relatedTo
 */
export declare const relatedTo: Property;
/**
 * releaseDate
 *
 * The release date of a product or product model. This can be used to distinguish the exact variant of a product.
 *
 * http://schema.org/releaseDate
 */
export declare const releaseDate: Property;
/**
 * releaseNotes
 *
 * Description of what changed in this version.
 *
 * http://schema.org/releaseNotes
 */
export declare const releaseNotes: Property;
/**
 * releasedEvent
 *
 * The place and time the release was issued, expressed as a PublicationEvent.
 *
 * http://schema.org/releasedEvent
 */
export declare const releasedEvent: Property;
/**
 * relevantOccupation
 *
 * The Occupation for the JobPosting.
 *
 * http://schema.org/relevantOccupation
 */
export declare const relevantOccupation: Property;
/**
 * remainingAttendeeCapacity
 *
 * The number of attendee places for an event that remain unallocated.
 *
 * http://schema.org/remainingAttendeeCapacity
 */
export declare const remainingAttendeeCapacity: Property;
/**
 * replacee
 *
 * A sub property of object. The object that is being replaced.
 *
 * http://schema.org/replacee
 */
export declare const replacee: Property;
/**
 * replacer
 *
 * A sub property of object. The object that replaces.
 *
 * http://schema.org/replacer
 */
export declare const replacer: Property;
/**
 * replyToUrl
 *
 * The URL at which a reply may be posted to the specified UserComment.
 *
 * http://schema.org/replyToUrl
 */
export declare const replyToUrl: Property;
/**
 * reportNumber
 *
 * The number or other unique designator assigned to a Report by the publishing organization.
 *
 * http://schema.org/reportNumber
 */
export declare const reportNumber: Property;
/**
 * representativeOfPage
 *
 * Indicates whether this image is representative of the content of the page.
 *
 * http://schema.org/representativeOfPage
 */
export declare const representativeOfPage: Property;
/**
 * requiredCollateral
 *
 * Assets required to secure loan or credit repayments. It may take form of third party pledge, goods, financial instruments (cash, securities, etc.)
 *
 * http://schema.org/requiredCollateral
 */
export declare const requiredCollateral: Property;
/**
 * requiredGender
 *
 * Audiences defined by a person's gender.
 *
 * http://schema.org/requiredGender
 */
export declare const requiredGender: Property;
/**
 * requiredMaxAge
 *
 * Audiences defined by a person's maximum age.
 *
 * http://schema.org/requiredMaxAge
 */
export declare const requiredMaxAge: Property;
/**
 * requiredMinAge
 *
 * Audiences defined by a person's minimum age.
 *
 * http://schema.org/requiredMinAge
 */
export declare const requiredMinAge: Property;
/**
 * requiredQuantity
 *
 * The required quantity of the item(s).
 *
 * http://schema.org/requiredQuantity
 */
export declare const requiredQuantity: Property;
/**
 * requirements
 *
 * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
 *
 * http://schema.org/requirements
 */
export declare const requirements: Property;
/**
 * requiresSubscription
 *
 * Indicates if use of the media require a subscription  (either paid or free). Allowed values are <code>true</code> or <code>false</code> (note that an earlier version had 'yes', 'no').
 *
 * http://schema.org/requiresSubscription
 */
export declare const requiresSubscription: Property;
/**
 * reservationFor
 *
 * The thing -- flight, event, restaurant,etc. being reserved.
 *
 * http://schema.org/reservationFor
 */
export declare const reservationFor: Property;
/**
 * reservationId
 *
 * A unique identifier for the reservation.
 *
 * http://schema.org/reservationId
 */
export declare const reservationId: Property;
/**
 * reservationStatus
 *
 * The current status of the reservation.
 *
 * http://schema.org/reservationStatus
 */
export declare const reservationStatus: Property;
/**
 * reservedTicket
 *
 * A ticket associated with the reservation.
 *
 * http://schema.org/reservedTicket
 */
export declare const reservedTicket: Property;
/**
 * responsibilities
 *
 * Responsibilities associated with this role or Occupation.
 *
 * http://schema.org/responsibilities
 */
export declare const responsibilities: Property;
/**
 * resultComment
 *
 * A sub property of result. The Comment created or sent as a result of this action.
 *
 * http://schema.org/resultComment
 */
export declare const resultComment: Property;
/**
 * resultReview
 *
 * A sub property of result. The review that resulted in the performing of the action.
 *
 * http://schema.org/resultReview
 */
export declare const resultReview: Property;
/**
 * reviewAspect
 *
 * This Review or Rating is relevant to this part or facet of the itemReviewed.
 *
 * http://schema.org/reviewAspect
 */
export declare const reviewAspect: Property;
/**
 * reviewBody
 *
 * The actual body of the review.
 *
 * http://schema.org/reviewBody
 */
export declare const reviewBody: Property;
/**
 * reviewCount
 *
 * The count of total number of reviews.
 *
 * http://schema.org/reviewCount
 */
export declare const reviewCount: Property;
/**
 * reviewRating
 *
 * The rating given in this review. Note that reviews can themselves be rated. The <code>reviewRating</code> applies to rating given by the review. The <a class="localLink" href="http://schema.org/aggregateRating">aggregateRating</a> property applies to the review itself, as a creative work.
 *
 * http://schema.org/reviewRating
 */
export declare const reviewRating: Property;
/**
 * reviewedBy
 *
 * People or organizations that have reviewed the content on this web page for accuracy and/or completeness.
 *
 * http://schema.org/reviewedBy
 */
export declare const reviewedBy: Property;
/**
 * reviews
 *
 * Review of the item.
 *
 * http://schema.org/reviews
 */
export declare const reviews: Property;
/**
 * rsvpResponse
 *
 * The response (yes, no, maybe) to the RSVP.
 *
 * http://schema.org/rsvpResponse
 */
export declare const rsvpResponse: Property;
/**
 * runtime
 *
 * Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).
 *
 * http://schema.org/runtime
 */
export declare const runtime: Property;
/**
 * salaryCurrency
 *
 * The currency (coded using <a href="http://en.wikipedia.org/wiki/ISO_4217">ISO 4217</a> ) used for the main salary information in this job posting or for this employee.
 *
 * http://schema.org/salaryCurrency
 */
export declare const salaryCurrency: Property;
/**
 * sameAs
 *
 * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
 *
 * http://schema.org/sameAs
 */
export declare const sameAs: Property;
/**
 * sampleType
 *
 * What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.
 *
 * http://schema.org/sampleType
 */
export declare const sampleType: Property;
/**
 * saturatedFatContent
 *
 * The number of grams of saturated fat.
 *
 * http://schema.org/saturatedFatContent
 */
export declare const saturatedFatContent: Property;
/**
 * scheduledPaymentDate
 *
 * The date the invoice is scheduled to be paid.
 *
 * http://schema.org/scheduledPaymentDate
 */
export declare const scheduledPaymentDate: Property;
/**
 * scheduledTime
 *
 * The time the object is scheduled to.
 *
 * http://schema.org/scheduledTime
 */
export declare const scheduledTime: Property;
/**
 * schemaVersion
 *
 * Indicates (by URL or string) a particular version of a schema used in some CreativeWork. For example, a document could declare a schemaVersion using an URL such as http://schema.org/version/2.0/ if precise indication of schema version was required by some application.
 *
 * http://schema.org/schemaVersion
 */
export declare const schemaVersion: Property;
/**
 * screenCount
 *
 * The number of screens in the movie theater.
 *
 * http://schema.org/screenCount
 */
export declare const screenCount: Property;
/**
 * screenshot
 *
 * A link to a screenshot image of the app.
 *
 * http://schema.org/screenshot
 */
export declare const screenshot: Property;
/**
 * seasonNumber
 *
 * Position of the season within an ordered group of seasons.
 *
 * http://schema.org/seasonNumber
 */
export declare const seasonNumber: Property;
/**
 * seasons
 *
 * A season in a media series.
 *
 * http://schema.org/seasons
 */
export declare const seasons: Property;
/**
 * seatNumber
 *
 * The location of the reserved seat (e.g., 27).
 *
 * http://schema.org/seatNumber
 */
export declare const seatNumber: Property;
/**
 * seatRow
 *
 * The row location of the reserved seat (e.g., B).
 *
 * http://schema.org/seatRow
 */
export declare const seatRow: Property;
/**
 * seatSection
 *
 * The section location of the reserved seat (e.g. Orchestra).
 *
 * http://schema.org/seatSection
 */
export declare const seatSection: Property;
/**
 * seatingType
 *
 * The type/class of the seat.
 *
 * http://schema.org/seatingType
 */
export declare const seatingType: Property;
/**
 * securityScreening
 *
 * The type of security screening the passenger is subject to.
 *
 * http://schema.org/securityScreening
 */
export declare const securityScreening: Property;
/**
 * seeks
 *
 * A pointer to products or services sought by the organization or person (demand).
 *
 * http://schema.org/seeks
 */
export declare const seeks: Property;
/**
 * sender
 *
 * A sub property of participant. The participant who is at the sending end of the action.
 *
 * http://schema.org/sender
 */
export declare const sender: Property;
/**
 * serverStatus
 *
 * Status of a game server.
 *
 * http://schema.org/serverStatus
 */
export declare const serverStatus: Property;
/**
 * servesCuisine
 *
 * The cuisine of the restaurant.
 *
 * http://schema.org/servesCuisine
 */
export declare const servesCuisine: Property;
/**
 * serviceAudience
 *
 * The audience eligible for this service.
 *
 * http://schema.org/serviceAudience
 */
export declare const serviceAudience: Property;
/**
 * serviceLocation
 *
 * The location (e.g. civic structure, local business, etc.) where a person can go to access the service.
 *
 * http://schema.org/serviceLocation
 */
export declare const serviceLocation: Property;
/**
 * serviceOperator
 *
 * The operating organization, if different from the provider.  This enables the representation of services that are provided by an organization, but operated by another organization like a subcontractor.
 *
 * http://schema.org/serviceOperator
 */
export declare const serviceOperator: Property;
/**
 * servicePhone
 *
 * The phone number to use to access the service.
 *
 * http://schema.org/servicePhone
 */
export declare const servicePhone: Property;
/**
 * servicePostalAddress
 *
 * The address for accessing the service by mail.
 *
 * http://schema.org/servicePostalAddress
 */
export declare const servicePostalAddress: Property;
/**
 * serviceSmsNumber
 *
 * The number to access the service by text message.
 *
 * http://schema.org/serviceSmsNumber
 */
export declare const serviceSmsNumber: Property;
/**
 * serviceType
 *
 * The type of service being offered, e.g. veterans' benefits, emergency relief, etc.
 *
 * http://schema.org/serviceType
 */
export declare const serviceType: Property;
/**
 * serviceUrl
 *
 * The website to access the service.
 *
 * http://schema.org/serviceUrl
 */
export declare const serviceUrl: Property;
/**
 * servingSize
 *
 * The serving size, in terms of the number of volume or mass.
 *
 * http://schema.org/servingSize
 */
export declare const servingSize: Property;
/**
 * sharedContent
 *
 * A CreativeWork such as an image, video, or audio clip shared as part of this posting.
 *
 * http://schema.org/sharedContent
 */
export declare const sharedContent: Property;
/**
 * siblings
 *
 * A sibling of the person.
 *
 * http://schema.org/siblings
 */
export declare const siblings: Property;
/**
 * significantLinks
 *
 * The most significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most.
 *
 * http://schema.org/significantLinks
 */
export declare const significantLinks: Property;
/**
 * skills
 *
 * Skills required to fulfill this role or in this Occupation.
 *
 * http://schema.org/skills
 */
export declare const skills: Property;
/**
 * sku
 *
 * The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers.
 *
 * http://schema.org/sku
 */
export declare const sku: Property;
/**
 * slogan
 *
 * A slogan or motto associated with the item.
 *
 * http://schema.org/slogan
 */
export declare const slogan: Property;
/**
 * smokingAllowed
 *
 * Indicates whether it is allowed to smoke in the place, e.g. in the restaurant, hotel or hotel room.
 *
 * http://schema.org/smokingAllowed
 */
export declare const smokingAllowed: Property;
/**
 * sodiumContent
 *
 * The number of milligrams of sodium.
 *
 * http://schema.org/sodiumContent
 */
export declare const sodiumContent: Property;
/**
 * softwareAddOn
 *
 * Additional content for a software application.
 *
 * http://schema.org/softwareAddOn
 */
export declare const softwareAddOn: Property;
/**
 * softwareHelp
 *
 * Software application help.
 *
 * http://schema.org/softwareHelp
 */
export declare const softwareHelp: Property;
/**
 * softwareVersion
 *
 * Version of the software instance.
 *
 * http://schema.org/softwareVersion
 */
export declare const softwareVersion: Property;
/**
 * sourceOrganization
 *
 * The Organization on whose behalf the creator was working.
 *
 * http://schema.org/sourceOrganization
 */
export declare const sourceOrganization: Property;
/**
 * spatial
 *
 * The "spatial" property can be used in cases when more specific properties
 * (e.g. <a class="localLink" href="http://schema.org/locationCreated">locationCreated</a>, <a class="localLink" href="http://schema.org/spatialCoverage">spatialCoverage</a>, <a class="localLink" href="http://schema.org/contentLocation">contentLocation</a>) are not known to be appropriate.
 *
 * http://schema.org/spatial
 */
export declare const spatial: Property;
/**
 * spatialCoverage
 *
 * The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of the content. It is a subproperty of
 *       contentLocation intended primarily for more technical and detailed materials. For example with a Dataset, it indicates
 *       areas that the dataset describes: a dataset of New York weather would have spatialCoverage which was the place: the state of New York.
 *
 * http://schema.org/spatialCoverage
 */
export declare const spatialCoverage: Property;
/**
 * speakable
 *
 * Indicates sections of a Web page that are particularly 'speakable' in the sense of being highlighted as being especially appropriate for text-to-speech conversion. Other sections of a page may also be usefully spoken in particular circumstances; the 'speakable' property serves to indicate the parts most likely to be generally useful for speech.<br/><br/>
 *
 * The <em>speakable</em> property can be repeated an arbitrary number of times, with three kinds of possible 'content-locator' values:<br/><br/>
 *
 * 1.) <em>id-value</em> URL references - uses <em>id-value</em> of an element in the page being annotated. The simplest use of <em>speakable</em> has (potentially relative) URL values, referencing identified sections of the document concerned.<br/><br/>
 *
 * 2.) CSS Selectors - addresses content in the annotated page, eg. via class attribute. Use the <a class="localLink" href="http://schema.org/cssSelector">cssSelector</a> property.<br/><br/>
 *
 * 3.)  XPaths - addresses content via XPaths (assuming an XML view of the content). Use the <a class="localLink" href="http://schema.org/xpath">xpath</a> property.<br/><br/>
 *
 * For more sophisticated markup of speakable sections beyond simple ID references, either CSS selectors or XPath expressions to pick out document section(s) as speakable. For this
 * we define a supporting type, <a class="localLink" href="http://schema.org/SpeakableSpecification">SpeakableSpecification</a>  which is defined to be a possible value of the <em>speakable</em> property.
 *
 * http://schema.org/speakable
 */
export declare const speakable: Property;
/**
 * specialCommitments
 *
 * Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc.
 *
 * http://schema.org/specialCommitments
 */
export declare const specialCommitments: Property;
/**
 * specialOpeningHoursSpecification
 *
 * The special opening hours of a certain place.<br/><br/>
 *
 * Use this to explicitly override general opening hours brought in scope by <a class="localLink" href="http://schema.org/openingHoursSpecification">openingHoursSpecification</a> or <a class="localLink" href="http://schema.org/openingHours">openingHours</a>.
 *
 * http://schema.org/specialOpeningHoursSpecification
 */
export declare const specialOpeningHoursSpecification: Property;
/**
 * specialty
 *
 * One of the domain specialities to which this web page's content applies.
 *
 * http://schema.org/specialty
 */
export declare const specialty: Property;
/**
 * sport
 *
 * A type of sport (e.g. Baseball).
 *
 * http://schema.org/sport
 */
export declare const sport: Property;
/**
 * sportsActivityLocation
 *
 * A sub property of location. The sports activity location where this action occurred.
 *
 * http://schema.org/sportsActivityLocation
 */
export declare const sportsActivityLocation: Property;
/**
 * sportsEvent
 *
 * A sub property of location. The sports event where this action occurred.
 *
 * http://schema.org/sportsEvent
 */
export declare const sportsEvent: Property;
/**
 * sportsTeam
 *
 * A sub property of participant. The sports team that participated on this action.
 *
 * http://schema.org/sportsTeam
 */
export declare const sportsTeam: Property;
/**
 * spouse
 *
 * The person's spouse.
 *
 * http://schema.org/spouse
 */
export declare const spouse: Property;
/**
 * starRating
 *
 * An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
 *
 * http://schema.org/starRating
 */
export declare const starRating: Property;
/**
 * startDate
 *
 * The start date and time of the item (in <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601 date format</a>).
 *
 * http://schema.org/startDate
 */
export declare const startDate: Property;
/**
 * startTime
 *
 * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from <em>January</em> to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.<br/><br/>
 *
 * Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
 *
 * http://schema.org/startTime
 */
export declare const startTime: Property;
/**
 * steeringPosition
 *
 * The position of the steering wheel or similar device (mostly for cars).
 *
 * http://schema.org/steeringPosition
 */
export declare const steeringPosition: Property;
/**
 * stepValue
 *
 * The stepValue attribute indicates the granularity that is expected (and required) of the value in a PropertyValueSpecification.
 *
 * http://schema.org/stepValue
 */
export declare const stepValue: Property;
/**
 * steps
 *
 * A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally misnamed 'steps'; 'step' is preferred).
 *
 * http://schema.org/steps
 */
export declare const steps: Property;
/**
 * storageRequirements
 *
 * Storage requirements (free space required).
 *
 * http://schema.org/storageRequirements
 */
export declare const storageRequirements: Property;
/**
 * streetAddress
 *
 * The street address. For example, 1600 Amphitheatre Pkwy.
 *
 * http://schema.org/streetAddress
 */
export declare const streetAddress: Property;
/**
 * subEvents
 *
 * Events that are a part of this event. For example, a conference event includes many presentations, each subEvents of the conference.
 *
 * http://schema.org/subEvents
 */
export declare const subEvents: Property;
/**
 * subReservation
 *
 * The individual reservations included in the package. Typically a repeated property.
 *
 * http://schema.org/subReservation
 */
export declare const subReservation: Property;
/**
 * subtitleLanguage
 *
 * Languages in which subtitles/captions are available, in <a href="http://tools.ietf.org/html/bcp47">IETF BCP 47 standard format</a>.
 *
 * http://schema.org/subtitleLanguage
 */
export declare const subtitleLanguage: Property;
/**
 * successorOf
 *
 * A pointer from a newer variant of a product  to its previous, often discontinued predecessor.
 *
 * http://schema.org/successorOf
 */
export declare const successorOf: Property;
/**
 * sugarContent
 *
 * The number of grams of sugar.
 *
 * http://schema.org/sugarContent
 */
export declare const sugarContent: Property;
/**
 * suggestedGender
 *
 * The gender of the person or audience.
 *
 * http://schema.org/suggestedGender
 */
export declare const suggestedGender: Property;
/**
 * suggestedMaxAge
 *
 * Maximal age recommended for viewing content.
 *
 * http://schema.org/suggestedMaxAge
 */
export declare const suggestedMaxAge: Property;
/**
 * suggestedMinAge
 *
 * Minimal age recommended for viewing content.
 *
 * http://schema.org/suggestedMinAge
 */
export declare const suggestedMinAge: Property;
/**
 * suitableForDiet
 *
 * Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc.
 *
 * http://schema.org/suitableForDiet
 */
export declare const suitableForDiet: Property;
/**
 * supportingData
 *
 * Supporting data for a SoftwareApplication.
 *
 * http://schema.org/supportingData
 */
export declare const supportingData: Property;
/**
 * surface
 *
 * A material used as a surface in some artwork, e.g. Canvas, Paper, Wood, Board, etc.
 *
 * http://schema.org/surface
 */
export declare const surface: Property;
/**
 * target
 *
 * Indicates a target EntryPoint for an Action.
 *
 * http://schema.org/target
 */
export declare const target: Property;
/**
 * targetDescription
 *
 * The description of a node in an established educational framework.
 *
 * http://schema.org/targetDescription
 */
export declare const targetDescription: Property;
/**
 * targetName
 *
 * The name of a node in an established educational framework.
 *
 * http://schema.org/targetName
 */
export declare const targetName: Property;
/**
 * targetPlatform
 *
 * Type of app development: phone, Metro style, desktop, XBox, etc.
 *
 * http://schema.org/targetPlatform
 */
export declare const targetPlatform: Property;
/**
 * targetProduct
 *
 * Target Operating System / Product to which the code applies.  If applies to several versions, just the product name can be used.
 *
 * http://schema.org/targetProduct
 */
export declare const targetProduct: Property;
/**
 * targetUrl
 *
 * The URL of a node in an established educational framework.
 *
 * http://schema.org/targetUrl
 */
export declare const targetUrl: Property;
/**
 * taxID
 *
 * The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.
 *
 * http://schema.org/taxID
 */
export declare const taxID: Property;
/**
 * telephone
 *
 * The telephone number.
 *
 * http://schema.org/telephone
 */
export declare const telephone: Property;
/**
 * temporal
 *
 * The "temporal" property can be used in cases where more specific properties
 * (e.g. <a class="localLink" href="http://schema.org/temporalCoverage">temporalCoverage</a>, <a class="localLink" href="http://schema.org/dateCreated">dateCreated</a>, <a class="localLink" href="http://schema.org/dateModified">dateModified</a>, <a class="localLink" href="http://schema.org/datePublished">datePublished</a>) are not known to be appropriate.
 *
 * http://schema.org/temporal
 */
export declare const temporal: Property;
/**
 * text
 *
 * The textual content of this CreativeWork.
 *
 * http://schema.org/text
 */
export declare const text: Property;
/**
 * thumbnail
 *
 * Thumbnail image for an image or video.
 *
 * http://schema.org/thumbnail
 */
export declare const thumbnail: Property;
/**
 * thumbnailUrl
 *
 * A thumbnail image relevant to the Thing.
 *
 * http://schema.org/thumbnailUrl
 */
export declare const thumbnailUrl: Property;
/**
 * tickerSymbol
 *
 * The exchange traded instrument associated with a Corporation object. The tickerSymbol is expressed as an exchange and an instrument name separated by a space character. For the exchange component of the tickerSymbol attribute, we recommend using the controlled vocabulary of Market Identifier Codes (MIC) specified in ISO15022.
 *
 * http://schema.org/tickerSymbol
 */
export declare const tickerSymbol: Property;
/**
 * ticketNumber
 *
 * The unique identifier for the ticket.
 *
 * http://schema.org/ticketNumber
 */
export declare const ticketNumber: Property;
/**
 * ticketToken
 *
 * Reference to an asset (e.g., Barcode, QR code image or PDF) usable for entrance.
 *
 * http://schema.org/ticketToken
 */
export declare const ticketToken: Property;
/**
 * ticketedSeat
 *
 * The seat associated with the ticket.
 *
 * http://schema.org/ticketedSeat
 */
export declare const ticketedSeat: Property;
/**
 * timeRequired
 *
 * Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience, e.g. 'PT30M', 'PT1H25M'.
 *
 * http://schema.org/timeRequired
 */
export declare const timeRequired: Property;
/**
 * title
 *
 * The title of the job.
 *
 * http://schema.org/title
 */
export declare const title: Property;
/**
 * toLocation
 *
 * A sub property of location. The final location of the object or the agent after the action.
 *
 * http://schema.org/toLocation
 */
export declare const toLocation: Property;
/**
 * toRecipient
 *
 * A sub property of recipient. The recipient who was directly sent the message.
 *
 * http://schema.org/toRecipient
 */
export declare const toRecipient: Property;
/**
 * tool
 *
 * A sub property of instrument. An object used (but not consumed) when performing instructions or a direction.
 *
 * http://schema.org/tool
 */
export declare const tool: Property;
/**
 * totalPaymentDue
 *
 * The total amount due.
 *
 * http://schema.org/totalPaymentDue
 */
export declare const totalPaymentDue: Property;
/**
 * totalPrice
 *
 * The total price for the reservation or ticket, including applicable taxes, shipping, etc.<br/><br/>
 *
 * Usage guidelines:<br/><br/>
 *
 * <ul>
 * <li>Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.</li>
 * <li>Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.</li>
 * </ul>
 *
 *
 * http://schema.org/totalPrice
 */
export declare const totalPrice: Property;
/**
 * totalTime
 *
 * The total time required to perform instructions or a direction (including time to prepare the supplies), in <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601 duration format</a>.
 *
 * http://schema.org/totalTime
 */
export declare const totalTime: Property;
/**
 * touristType
 *
 * Attraction suitable for type(s) of tourist. eg. Children, visitors from a particular country, etc.
 *
 * http://schema.org/touristType
 */
export declare const touristType: Property;
/**
 * trackingNumber
 *
 * Shipper tracking number.
 *
 * http://schema.org/trackingNumber
 */
export declare const trackingNumber: Property;
/**
 * trackingUrl
 *
 * Tracking url for the parcel delivery.
 *
 * http://schema.org/trackingUrl
 */
export declare const trackingUrl: Property;
/**
 * tracks
 *
 * A music recording (track)&#x2014;usually a single song.
 *
 * http://schema.org/tracks
 */
export declare const tracks: Property;
/**
 * trailer
 *
 * The trailer of a movie or tv/radio series, season, episode, etc.
 *
 * http://schema.org/trailer
 */
export declare const trailer: Property;
/**
 * trainName
 *
 * The name of the train (e.g. The Orient Express).
 *
 * http://schema.org/trainName
 */
export declare const trainName: Property;
/**
 * trainNumber
 *
 * The unique identifier for the train.
 *
 * http://schema.org/trainNumber
 */
export declare const trainNumber: Property;
/**
 * transFatContent
 *
 * The number of grams of trans fat.
 *
 * http://schema.org/transFatContent
 */
export declare const transFatContent: Property;
/**
 * transcript
 *
 * If this MediaObject is an AudioObject or VideoObject, the transcript of that object.
 *
 * http://schema.org/transcript
 */
export declare const transcript: Property;
/**
 * translator
 *
 * Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.
 *
 * http://schema.org/translator
 */
export declare const translator: Property;
/**
 * typeOfBed
 *
 * The type of bed to which the BedDetail refers, i.e. the type of bed available in the quantity indicated by quantity.
 *
 * http://schema.org/typeOfBed
 */
export declare const typeOfBed: Property;
/**
 * typeOfGood
 *
 * The product that this structured value is referring to.
 *
 * http://schema.org/typeOfGood
 */
export declare const typeOfGood: Property;
/**
 * typicalAgeRange
 *
 * The typical expected age range, e.g. '7-9', '11-'.
 *
 * http://schema.org/typicalAgeRange
 */
export declare const typicalAgeRange: Property;
/**
 * underName
 *
 * The person or organization the reservation or ticket is for.
 *
 * http://schema.org/underName
 */
export declare const underName: Property;
/**
 * unitCode
 *
 * The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
 *
 * http://schema.org/unitCode
 */
export declare const unitCode: Property;
/**
 * unitText
 *
 * A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for
 * <a href='unitCode'>unitCode</a>.
 *
 * http://schema.org/unitText
 */
export declare const unitText: Property;
/**
 * unsaturatedFatContent
 *
 * The number of grams of unsaturated fat.
 *
 * http://schema.org/unsaturatedFatContent
 */
export declare const unsaturatedFatContent: Property;
/**
 * uploadDate
 *
 * Date when this media object was uploaded to this site.
 *
 * http://schema.org/uploadDate
 */
export declare const uploadDate: Property;
/**
 * upvoteCount
 *
 * The number of upvotes this question, answer or comment has received from the community.
 *
 * http://schema.org/upvoteCount
 */
export declare const upvoteCount: Property;
/**
 * url
 *
 * URL of the item.
 *
 * http://schema.org/url
 */
export declare const url: Property;
/**
 * urlTemplate
 *
 * An url template (RFC6570) that will be used to construct the target of the execution of the action.
 *
 * http://schema.org/urlTemplate
 */
export declare const urlTemplate: Property;
/**
 * userInteractionCount
 *
 * The number of interactions for the CreativeWork using the WebSite or SoftwareApplication.
 *
 * http://schema.org/userInteractionCount
 */
export declare const userInteractionCount: Property;
/**
 * validFor
 *
 * The duration of validity of a permit or similar thing.
 *
 * http://schema.org/validFor
 */
export declare const validFor: Property;
/**
 * validFrom
 *
 * The date when the item becomes valid.
 *
 * http://schema.org/validFrom
 */
export declare const validFrom: Property;
/**
 * validIn
 *
 * The geographic area where a permit or similar thing is valid.
 *
 * http://schema.org/validIn
 */
export declare const validIn: Property;
/**
 * validThrough
 *
 * The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
 *
 * http://schema.org/validThrough
 */
export declare const validThrough: Property;
/**
 * validUntil
 *
 * The date when the item is no longer valid.
 *
 * http://schema.org/validUntil
 */
export declare const validUntil: Property;
/**
 * value
 *
 * The value of the quantitative value or property value node.<br/><br/>
 *
 * <ul>
 * <li>For <a class="localLink" href="http://schema.org/QuantitativeValue">QuantitativeValue</a> and <a class="localLink" href="http://schema.org/MonetaryAmount">MonetaryAmount</a>, the recommended type for values is 'Number'.</li>
 * <li>For <a class="localLink" href="http://schema.org/PropertyValue">PropertyValue</a>, it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.</li>
 * <li>Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.</li>
 * <li>Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.</li>
 * </ul>
 *
 *
 * http://schema.org/value
 */
export declare const value: Property;
/**
 * valueAddedTaxIncluded
 *
 * Specifies whether the applicable value-added tax (VAT) is included in the price specification or not.
 *
 * http://schema.org/valueAddedTaxIncluded
 */
export declare const valueAddedTaxIncluded: Property;
/**
 * valueMaxLength
 *
 * Specifies the allowed range for number of characters in a literal value.
 *
 * http://schema.org/valueMaxLength
 */
export declare const valueMaxLength: Property;
/**
 * valueMinLength
 *
 * Specifies the minimum allowed range for number of characters in a literal value.
 *
 * http://schema.org/valueMinLength
 */
export declare const valueMinLength: Property;
/**
 * valueName
 *
 * Indicates the name of the PropertyValueSpecification to be used in URL templates and form encoding in a manner analogous to HTML's input@name.
 *
 * http://schema.org/valueName
 */
export declare const valueName: Property;
/**
 * valuePattern
 *
 * Specifies a regular expression for testing literal values according to the HTML spec.
 *
 * http://schema.org/valuePattern
 */
export declare const valuePattern: Property;
/**
 * valueReference
 *
 * A pointer to a secondary value that provides additional information on the original value, e.g. a reference temperature.
 *
 * http://schema.org/valueReference
 */
export declare const valueReference: Property;
/**
 * valueRequired
 *
 * Whether the property must be filled in to complete the action.  Default is false.
 *
 * http://schema.org/valueRequired
 */
export declare const valueRequired: Property;
/**
 * vatID
 *
 * The Value-added Tax ID of the organization or person.
 *
 * http://schema.org/vatID
 */
export declare const vatID: Property;
/**
 * vehicleConfiguration
 *
 * A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'.
 *
 * http://schema.org/vehicleConfiguration
 */
export declare const vehicleConfiguration: Property;
/**
 * vehicleEngine
 *
 * Information about the engine or engines of the vehicle.
 *
 * http://schema.org/vehicleEngine
 */
export declare const vehicleEngine: Property;
/**
 * vehicleIdentificationNumber
 *
 * The Vehicle Identification Number (VIN) is a unique serial number used by the automotive industry to identify individual motor vehicles.
 *
 * http://schema.org/vehicleIdentificationNumber
 */
export declare const vehicleIdentificationNumber: Property;
/**
 * vehicleInteriorColor
 *
 * The color or color combination of the interior of the vehicle.
 *
 * http://schema.org/vehicleInteriorColor
 */
export declare const vehicleInteriorColor: Property;
/**
 * vehicleInteriorType
 *
 * The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.). While most interior types are characterized by the material used, an interior type can also be based on vehicle usage or target audience.
 *
 * http://schema.org/vehicleInteriorType
 */
export declare const vehicleInteriorType: Property;
/**
 * vehicleModelDate
 *
 * The release date of a vehicle model (often used to differentiate versions of the same make and model).
 *
 * http://schema.org/vehicleModelDate
 */
export declare const vehicleModelDate: Property;
/**
 * vehicleSeatingCapacity
 *
 * The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in terms of limitations set by law.<br/><br/>
 *
 * Typical unit code(s): C62 for persons.
 *
 * http://schema.org/vehicleSeatingCapacity
 */
export declare const vehicleSeatingCapacity: Property;
/**
 * vehicleTransmission
 *
 * The type of component used for transmitting the power from a rotating power source to the wheels or other relevant component(s) ("gearbox" for cars).
 *
 * http://schema.org/vehicleTransmission
 */
export declare const vehicleTransmission: Property;
/**
 * vendor
 *
 * 'vendor' is an earlier term for 'seller'.
 *
 * http://schema.org/vendor
 */
export declare const vendor: Property;
/**
 * version
 *
 * The version of the CreativeWork embodied by a specified resource.
 *
 * http://schema.org/version
 */
export declare const version: Property;
/**
 * video
 *
 * An embedded video object.
 *
 * http://schema.org/video
 */
export declare const video: Property;
/**
 * videoFormat
 *
 * The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.).
 *
 * http://schema.org/videoFormat
 */
export declare const videoFormat: Property;
/**
 * videoFrameSize
 *
 * The frame size of the video.
 *
 * http://schema.org/videoFrameSize
 */
export declare const videoFrameSize: Property;
/**
 * videoQuality
 *
 * The quality of the video.
 *
 * http://schema.org/videoQuality
 */
export declare const videoQuality: Property;
/**
 * volumeNumber
 *
 * Identifies the volume of publication or multi-part work; for example, "iii" or "2".
 *
 * http://schema.org/volumeNumber
 */
export declare const volumeNumber: Property;
/**
 * warrantyPromise
 *
 * The warranty promise(s) included in the offer.
 *
 * http://schema.org/warrantyPromise
 */
export declare const warrantyPromise: Property;
/**
 * warrantyScope
 *
 * The scope of the warranty promise.
 *
 * http://schema.org/warrantyScope
 */
export declare const warrantyScope: Property;
/**
 * webCheckinTime
 *
 * The time when a passenger can check into the flight online.
 *
 * http://schema.org/webCheckinTime
 */
export declare const webCheckinTime: Property;
/**
 * weight
 *
 * The weight of the product or person.
 *
 * http://schema.org/weight
 */
export declare const weight: Property;
/**
 * width
 *
 * The width of the item.
 *
 * http://schema.org/width
 */
export declare const width: Property;
/**
 * winner
 *
 * A sub property of participant. The winner of the action.
 *
 * http://schema.org/winner
 */
export declare const winner: Property;
/**
 * wordCount
 *
 * The number of words in the text of the Article.
 *
 * http://schema.org/wordCount
 */
export declare const wordCount: Property;
/**
 * workHours
 *
 * The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).
 *
 * http://schema.org/workHours
 */
export declare const workHours: Property;
/**
 * workLocation
 *
 * A contact location for a person's place of work.
 *
 * http://schema.org/workLocation
 */
export declare const workLocation: Property;
/**
 * workPerformed
 *
 * A work performed in some event, for example a play performed in a TheaterEvent.
 *
 * http://schema.org/workPerformed
 */
export declare const workPerformed: Property;
/**
 * workPresented
 *
 * The movie presented during this event.
 *
 * http://schema.org/workPresented
 */
export declare const workPresented: Property;
/**
 * worksFor
 *
 * Organizations that the person works for.
 *
 * http://schema.org/worksFor
 */
export declare const worksFor: Property;
/**
 * worstRating
 *
 * The lowest value allowed in this rating system. If worstRating is omitted, 1 is assumed.
 *
 * http://schema.org/worstRating
 */
export declare const worstRating: Property;
/**
 * xpath
 *
 * An XPath, e.g. of a <a class="localLink" href="http://schema.org/SpeakableSpecification">SpeakableSpecification</a> or <a class="localLink" href="http://schema.org/WebPageElement">WebPageElement</a>. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element".
 *
 * http://schema.org/xpath
 */
export declare const xpath: Property;
/**
 * yearlyRevenue
 *
 * The size of the business in annual revenue.
 *
 * http://schema.org/yearlyRevenue
 */
export declare const yearlyRevenue: Property;
/**
 * yearsInOperation
 *
 * The age of the business.
 *
 * http://schema.org/yearsInOperation
 */
export declare const yearsInOperation: Property;
/**
 * actionApplication
 *
 * An application that can complete the request.
 *
 * http://schema.org/actionApplication
 */
export declare const actionApplication: Property;
/**
 * actionOption
 *
 * A sub property of object. The options subject to this action.
 *
 * http://schema.org/actionOption
 */
export declare const actionOption: Property;
/**
 * actor
 *
 * An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
 *
 * http://schema.org/actor
 */
export declare const actor: Property;
/**
 * album
 *
 * A music album.
 *
 * http://schema.org/album
 */
export declare const album: Property;
/**
 * albumRelease
 *
 * A release of this album.
 *
 * http://schema.org/albumRelease
 */
export declare const albumRelease: Property;
/**
 * alumni
 *
 * Alumni of an organization.
 *
 * http://schema.org/alumni
 */
export declare const alumni: Property;
/**
 * alumniOf
 *
 * An organization that the person is an alumni of.
 *
 * http://schema.org/alumniOf
 */
export declare const alumniOf: Property;
/**
 * artworkSurface
 *
 * The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc.
 *
 * http://schema.org/artworkSurface
 */
export declare const artworkSurface: Property;
/**
 * attendee
 *
 * A person or organization attending the event.
 *
 * http://schema.org/attendee
 */
export declare const attendee: Property;
/**
 * audience
 *
 * An intended audience, i.e. a group for whom something was created.
 *
 * http://schema.org/audience
 */
export declare const audience: Property;
/**
 * availableOnDevice
 *
 * Device required to run the application. Used in cases where a specific make/model is required to run the application.
 *
 * http://schema.org/availableOnDevice
 */
export declare const availableOnDevice: Property;
/**
 * award
 *
 * An award won by or for this item.
 *
 * http://schema.org/award
 */
export declare const award: Property;
/**
 * blogPost
 *
 * A posting that is part of this blog.
 *
 * http://schema.org/blogPost
 */
export declare const blogPost: Property;
/**
 * broker
 *
 * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
 *
 * http://schema.org/broker
 */
export declare const broker: Property;
/**
 * codeSampleType
 *
 * What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.
 *
 * http://schema.org/codeSampleType
 */
export declare const codeSampleType: Property;
/**
 * colleague
 *
 * A colleague of the person.
 *
 * http://schema.org/colleague
 */
export declare const colleague: Property;
/**
 * contactPoint
 *
 * A contact point for a person or organization.
 *
 * http://schema.org/contactPoint
 */
export declare const contactPoint: Property;
/**
 * containsPlace
 *
 * The basic containment relation between a place and another that it contains.
 *
 * http://schema.org/containsPlace
 */
export declare const containsPlace: Property;
/**
 * containsSeason
 *
 * A season that is part of the media series.
 *
 * http://schema.org/containsSeason
 */
export declare const containsSeason: Property;
/**
 * contentLocation
 *
 * The location depicted or described in the content. For example, the location in a photograph or painting.
 *
 * http://schema.org/contentLocation
 */
export declare const contentLocation: Property;
/**
 * dataset
 *
 * A dataset contained in this catalog.
 *
 * http://schema.org/dataset
 */
export declare const dataset: Property;
/**
 * description
 *
 * A description of the item.
 *
 * http://schema.org/description
 */
export declare const description: Property;
/**
 * director
 *
 * A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
 *
 * http://schema.org/director
 */
export declare const director: Property;
/**
 * duration
 *
 * The duration of the item (movie, audio recording, event, etc.) in <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601 date format</a>.
 *
 * http://schema.org/duration
 */
export declare const duration: Property;
/**
 * employee
 *
 * Someone working for this organization.
 *
 * http://schema.org/employee
 */
export declare const employee: Property;
/**
 * encodesCreativeWork
 *
 * The CreativeWork encoded by this media object.
 *
 * http://schema.org/encodesCreativeWork
 */
export declare const encodesCreativeWork: Property;
/**
 * encodingFormat
 *
 * Media type typically expressed using a MIME format (see <a href="http://www.iana.org/assignments/media-types/media-types.xhtml">IANA site</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MDN reference</a>) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).<br/><br/>
 *
 * In cases where a <a class="localLink" href="http://schema.org/CreativeWork">CreativeWork</a> has several media type representations, <a class="localLink" href="http://schema.org/encoding">encoding</a> can be used to indicate each <a class="localLink" href="http://schema.org/MediaObject">MediaObject</a> alongside particular <a class="localLink" href="http://schema.org/encodingFormat">encodingFormat</a> information.<br/><br/>
 *
 * Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.
 *
 * http://schema.org/encodingFormat
 */
export declare const encodingFormat: Property;
/**
 * episode
 *
 * An episode of a tv, radio or game media within a series or season.
 *
 * http://schema.org/episode
 */
export declare const episode: Property;
/**
 * event
 *
 * Upcoming or past event associated with this place, organization, or action.
 *
 * http://schema.org/event
 */
export declare const event: Property;
/**
 * exampleOfWork
 *
 * A creative work that this work is an example/instance/realization/derivation of.
 *
 * http://schema.org/exampleOfWork
 */
export declare const exampleOfWork: Property;
/**
 * executableLibraryName
 *
 * Library file name e.g., mscorlib.dll, system.web.dll.
 *
 * http://schema.org/executableLibraryName
 */
export declare const executableLibraryName: Property;
/**
 * exerciseCourse
 *
 * A sub property of location. The course where this action was taken.
 *
 * http://schema.org/exerciseCourse
 */
export declare const exerciseCourse: Property;
/**
 * founder
 *
 * A person who founded this organization.
 *
 * http://schema.org/founder
 */
export declare const founder: Property;
/**
 * game
 *
 * Video game which is played on this server.
 *
 * http://schema.org/game
 */
export declare const game: Property;
/**
 * gameServer
 *
 * The server on which  it is possible to play the game.
 *
 * http://schema.org/gameServer
 */
export declare const gameServer: Property;
/**
 * hasBroadcastChannel
 *
 * A broadcast channel of a broadcast service.
 *
 * http://schema.org/hasBroadcastChannel
 */
export declare const hasBroadcastChannel: Property;
/**
 * hasMenu
 *
 * Either the actual menu as a structured representation, as text, or a URL of the menu.
 *
 * http://schema.org/hasMenu
 */
export declare const hasMenu: Property;
/**
 * inLanguage
 *
 * The language of the content or performance or used in an action. Please use one of the language codes from the <a href="http://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>. See also <a class="localLink" href="http://schema.org/availableLanguage">availableLanguage</a>.
 *
 * http://schema.org/inLanguage
 */
export declare const inLanguage: Property;
/**
 * incentiveCompensation
 *
 * Description of bonus and commission compensation aspects of the job.
 *
 * http://schema.org/incentiveCompensation
 */
export declare const incentiveCompensation: Property;
/**
 * interactionStatistic
 *
 * The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.
 *
 * http://schema.org/interactionStatistic
 */
export declare const interactionStatistic: Property;
/**
 * isAccessibleForFree
 *
 * A flag to signal that the item, event, or place is accessible for free.
 *
 * http://schema.org/isAccessibleForFree
 */
export declare const isAccessibleForFree: Property;
/**
 * isBasedOn
 *
 * A resource from which this work is derived or from which it is a modification or adaption.
 *
 * http://schema.org/isBasedOn
 */
export declare const isBasedOn: Property;
/**
 * jobBenefits
 *
 * Description of benefits associated with the job.
 *
 * http://schema.org/jobBenefits
 */
export declare const jobBenefits: Property;
/**
 * mainEntity
 *
 * Indicates the primary entity described in some page or other CreativeWork.
 *
 * http://schema.org/mainEntity
 */
export declare const mainEntity: Property;
/**
 * mainEntityOfPage
 *
 * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See <a href="/docs/datamodel.html#mainEntityBackground">background notes</a> for details.
 *
 * http://schema.org/mainEntityOfPage
 */
export declare const mainEntityOfPage: Property;
/**
 * makesOffer
 *
 * A pointer to products or services offered by the organization or person.
 *
 * http://schema.org/makesOffer
 */
export declare const makesOffer: Property;
/**
 * offeredBy
 *
 * A pointer to the organization or person making the offer.
 *
 * http://schema.org/offeredBy
 */
export declare const offeredBy: Property;
/**
 * parent
 *
 * A parent of this person.
 *
 * http://schema.org/parent
 */
export declare const parent: Property;
/**
 * partOfSeries
 *
 * The series to which this episode or season belongs.
 *
 * http://schema.org/partOfSeries
 */
export declare const partOfSeries: Property;
/**
 * paymentDueDate
 *
 * The date that payment is due.
 *
 * http://schema.org/paymentDueDate
 */
export declare const paymentDueDate: Property;
/**
 * performTime
 *
 * The length of time it takes to perform instructions or a direction (not including time to prepare the supplies), in <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601 duration format</a>.
 *
 * http://schema.org/performTime
 */
export declare const performTime: Property;
/**
 * performer
 *
 * A performer at the event&#x2014;for example, a presenter, musician, musical group or actor.
 *
 * http://schema.org/performer
 */
export declare const performer: Property;
/**
 * photo
 *
 * A photograph of this place.
 *
 * http://schema.org/photo
 */
export declare const photo: Property;
/**
 * provider
 *
 * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
 *
 * http://schema.org/provider
 */
export declare const provider: Property;
/**
 * providesBroadcastService
 *
 * The BroadcastService offered on this channel.
 *
 * http://schema.org/providesBroadcastService
 */
export declare const providesBroadcastService: Property;
/**
 * recipeIngredient
 *
 * A single ingredient used in the recipe, e.g. sugar, flour or garlic.
 *
 * http://schema.org/recipeIngredient
 */
export declare const recipeIngredient: Property;
/**
 * recordedAs
 *
 * An audio recording of the work.
 *
 * http://schema.org/recordedAs
 */
export declare const recordedAs: Property;
/**
 * recordedAt
 *
 * The Event where the CreativeWork was recorded. The CreativeWork may capture all or part of the event.
 *
 * http://schema.org/recordedAt
 */
export declare const recordedAt: Property;
/**
 * recordedIn
 *
 * The CreativeWork that captured all or part of this Event.
 *
 * http://schema.org/recordedIn
 */
export declare const recordedIn: Property;
/**
 * recordingOf
 *
 * The composition this track is a recording of.
 *
 * http://schema.org/recordingOf
 */
export declare const recordingOf: Property;
/**
 * releaseOf
 *
 * The album this is a release of.
 *
 * http://schema.org/releaseOf
 */
export declare const releaseOf: Property;
/**
 * review
 *
 * A review of the item.
 *
 * http://schema.org/review
 */
export declare const review: Property;
/**
 * roleName
 *
 * A role played, performed or filled by a person or organization. For example, the team of creators for a comic book might fill the roles named 'inker', 'penciller', and 'letterer'; or an athlete in a SportsTeam might play in the position named 'Quarterback'.
 *
 * http://schema.org/roleName
 */
export declare const roleName: Property;
/**
 * runtimePlatform
 *
 * Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).
 *
 * http://schema.org/runtimePlatform
 */
export declare const runtimePlatform: Property;
/**
 * season
 *
 * A season in a media series.
 *
 * http://schema.org/season
 */
export declare const season: Property;
/**
 * serialNumber
 *
 * The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer.
 *
 * http://schema.org/serialNumber
 */
export declare const serialNumber: Property;
/**
 * serviceArea
 *
 * The geographic area where the service is provided.
 *
 * http://schema.org/serviceArea
 */
export declare const serviceArea: Property;
/**
 * serviceOutput
 *
 * The tangible thing generated by the service, e.g. a passport, permit, etc.
 *
 * http://schema.org/serviceOutput
 */
export declare const serviceOutput: Property;
/**
 * sibling
 *
 * A sibling of the person.
 *
 * http://schema.org/sibling
 */
export declare const sibling: Property;
/**
 * significantLink
 *
 * One of the more significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most.
 *
 * http://schema.org/significantLink
 */
export declare const significantLink: Property;
/**
 * softwareRequirements
 *
 * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
 *
 * http://schema.org/softwareRequirements
 */
export declare const softwareRequirements: Property;
/**
 * sponsor
 *
 * A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
 *
 * http://schema.org/sponsor
 */
export declare const sponsor: Property;
/**
 * subOrganization
 *
 * A relationship between two organizations where the first includes the second, e.g., as a subsidiary. See also: the more specific 'department' property.
 *
 * http://schema.org/subOrganization
 */
export declare const subOrganization: Property;
/**
 * subjectOf
 *
 * A CreativeWork or Event about this Thing.
 *
 * http://schema.org/subjectOf
 */
export declare const subjectOf: Property;
/**
 * suggestedAnswer
 *
 * An answer (possibly one of several, possibly incorrect) to a Question, e.g. on a Question/Answer site.
 *
 * http://schema.org/suggestedAnswer
 */
export declare const suggestedAnswer: Property;
/**
 * superEvent
 *
 * An event that this event is a part of. For example, a collection of individual music performances might each have a music festival as their superEvent.
 *
 * http://schema.org/superEvent
 */
export declare const superEvent: Property;
/**
 * targetCollection
 *
 * A sub property of object. The collection target of the action.
 *
 * http://schema.org/targetCollection
 */
export declare const targetCollection: Property;
/**
 * temporalCoverage
 *
 * The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in <a href="https://en.wikipedia.org/wiki/ISO_8601#Time_intervals">ISO 8601 time interval format</a>. In
 *       the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written "2011/2012"). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL.
 *       Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via "1939/1945".<br/><br/>
 *
 * Open-ended date ranges can be written with ".." in place of the end date. For example, "2015-11/.." indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated.
 *
 * http://schema.org/temporalCoverage
 */
export declare const temporalCoverage: Property;
/**
 * track
 *
 * A music recording (track)&#x2014;usually a single song. If an ItemList is given, the list should contain items of type MusicRecording.
 *
 * http://schema.org/track
 */
export declare const track: Property;
/**
 * warranty
 *
 * The warranty promise(s) included in the offer.
 *
 * http://schema.org/warranty
 */
export declare const warranty: Property;
/**
 * workExample
 *
 * Example/instance/realization/derivation of the concept of this creative work. eg. The paperback edition, first edition, or eBook.
 *
 * http://schema.org/workExample
 */
export declare const workExample: Property;
/**
 * yield
 *
 * The quantity that results by performing instructions. For example, a paper airplane, 10 personalized candles.
 * Note that `yield` is a reserved Javascript keyword, and is therefore suffixed by `__workaround`.
 * For a list of reserved keywords, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords.
 *
 * http://schema.org/yield
 */
export declare const yield__workaround: Property;
/**
 * about
 *
 * The subject matter of the content.
 *
 * http://schema.org/about
 */
export declare const about: Property;
/**
 * competitor
 *
 * A competitor in a sports event.
 *
 * http://schema.org/competitor
 */
export declare const competitor: Property;
/**
 * containedInPlace
 *
 * The basic containment relation between a place and one that contains it.
 *
 * http://schema.org/containedInPlace
 */
export declare const containedInPlace: Property;
/**
 * encoding
 *
 * A media object that encodes this CreativeWork. This property is a synonym for associatedMedia.
 *
 * http://schema.org/encoding
 */
export declare const encoding: Property;
/**
 * hasMap
 *
 * A URL to a map of the place.
 *
 * http://schema.org/hasMap
 */
export declare const hasMap: Property;
/**
 * image
 *
 * An image of the item. This can be a <a class="localLink" href="http://schema.org/URL">URL</a> or a fully described <a class="localLink" href="http://schema.org/ImageObject">ImageObject</a>.
 *
 * http://schema.org/image
 */
export declare const image: Property;
/**
 * material
 *
 * A material that something is made from, e.g. leather, wool, cotton, paper.
 *
 * http://schema.org/material
 */
export declare const material: Property;
/**
 * memberOf
 *
 * An Organization (or ProgramMembership) to which this Person or Organization belongs.
 *
 * http://schema.org/memberOf
 */
export declare const memberOf: Property;
/**
 * parentOrganization
 *
 * The larger organization that this organization is a <a class="localLink" href="http://schema.org/subOrganization">subOrganization</a> of, if any.
 *
 * http://schema.org/parentOrganization
 */
export declare const parentOrganization: Property;
/**
 * result
 *
 * The result produced in the action. e.g. John wrote <em>a book</em>.
 *
 * http://schema.org/result
 */
export declare const result: Property;
/**
 * seller
 *
 * An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
 *
 * http://schema.org/seller
 */
export declare const seller: Property;
/**
 * step
 *
 * A single step item (as HowToStep, text, document, video, etc.) or a HowToSection.
 *
 * http://schema.org/step
 */
export declare const step: Property;
/**
 * subEvent
 *
 * An Event that is part of this event. For example, a conference event includes many presentations, each of which is a subEvent of the conference.
 *
 * http://schema.org/subEvent
 */
export declare const subEvent: Property;
/**
 * supply
 *
 * A sub-property of instrument. A supply consumed when performing instructions or a direction.
 *
 * http://schema.org/supply
 */
export declare const supply: Property;
/**
 * workFeatured
 *
 * A work featured in some event, e.g. exhibited in an ExhibitionEvent.
 *        Specific subproperties are available for workPerformed (e.g. a play), or a workPresented (a Movie at a ScreeningEvent).
 *
 * http://schema.org/workFeatured
 */
export declare const workFeatured: Property;
/**
 * areaServed
 *
 * The geographic area where a service or offered item is provided.
 *
 * http://schema.org/areaServed
 */
export declare const areaServed: Property;
/**
 * includedInDataCatalog
 *
 * A data catalog which contains this dataset.
 *
 * http://schema.org/includedInDataCatalog
 */
export declare const includedInDataCatalog: Property;
/**
 * member
 *
 * A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.
 *
 * http://schema.org/member
 */
export declare const member: Property;
/**
 * recipient
 *
 * A sub property of participant. The participant who is at the receiving end of the action.
 *
 * http://schema.org/recipient
 */
export declare const recipient: Property;
/**
 * hasPart
 *
 * Indicates an item or CreativeWork that is part of this item, or CreativeWork (in some sense).
 *
 * http://schema.org/hasPart
 */
export declare const hasPart: Property;
/**
 * isPartOf
 *
 * Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of.
 *
 * http://schema.org/isPartOf
 */
export declare const isPartOf: Property;
/**
 * position
 *
 * The position of an item in a series or sequence of items.
 *
 * http://schema.org/position
 */
export declare const position: Property;
/**
 * instrument
 *
 * The object that helped the agent perform the action. e.g. John wrote a book with <em>a pen</em>.
 *
 * http://schema.org/instrument
 */
export declare const instrument: Property;
/**
 * object
 *
 * The object upon which the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesn't). e.g. John read <em>a book</em>.
 *
 * http://schema.org/object
 */
export declare const object: Property;
/**
 * location
 *
 * The location of for example where the event is happening, an organization is located, or where an action takes place.
 *
 * http://schema.org/location
 */
export declare const location: Property;
/**
 * participant
 *
 * Other co-agents that participated in the action indirectly. e.g. John wrote a book with <em>Steve</em>.
 *
 * http://schema.org/participant
 */
export declare const participant: Property;
/**
 * identifier
 *
 * The identifier property represents any kind of identifier for any kind of <a class="localLink" href="http://schema.org/Thing">Thing</a>, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See <a href="/docs/datamodel.html#identifierBg">background notes</a> for more details.
 *
 * http://schema.org/identifier
 */
export declare const identifier: Property;
/**
 * AMRadioChannel
 *
 * A radio channel that uses AM.
 *
 * http://schema.org/AMRadioChannel
 */
export declare const AMRadioChannel: Class;
/**
 * APIReference
 *
 * Reference documentation for application programming interfaces (APIs).
 *
 * http://schema.org/APIReference
 */
export declare const APIReference: Class;
/**
 * AboutPage
 *
 * Web page type: About page.
 *
 * http://schema.org/AboutPage
 */
export declare const AboutPage: Class;
/**
 * AcceptAction
 *
 * The act of committing to/adopting an object.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/RejectAction">RejectAction</a>: The antonym of AcceptAction.</li>
 * </ul>
 *
 *
 * http://schema.org/AcceptAction
 */
export declare const AcceptAction: Class;
/**
 * Accommodation
 *
 * An accommodation is a place that can accommodate human beings, e.g. a hotel room, a camping pitch, or a meeting room. Many accommodations are for overnight stays, but this is not a mandatory requirement.
 * For more specific types of accommodations not defined in schema.org, one can use additionalType with external vocabularies.
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 * http://schema.org/Accommodation
 */
export declare const Accommodation: Class;
/**
 * AccountingService
 *
 * Accountancy business.<br/><br/>
 *
 * As a <a class="localLink" href="http://schema.org/LocalBusiness">LocalBusiness</a> it can be described as a <a class="localLink" href="http://schema.org/provider">provider</a> of one or more <a class="localLink" href="http://schema.org/Service">Service</a>(s).
 *
 * http://schema.org/AccountingService
 */
export declare const AccountingService: Class;
/**
 * AchieveAction
 *
 * The act of accomplishing something via previous efforts. It is an instantaneous action rather than an ongoing process.
 *
 * http://schema.org/AchieveAction
 */
export declare const AchieveAction: Class;
/**
 * Action
 *
 * An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.<br/><br/>
 *
 * See also <a href="http://blog.schema.org/2014/04/announcing-schemaorg-actions.html">blog post</a> and <a href="http://schema.org/docs/actions.html">Actions overview document</a>.
 *
 * http://schema.org/Action
 */
export declare const Action: Class;
/**
 * ActionAccessSpecification
 *
 * A set of requirements that a must be fulfilled in order to perform an Action.
 *
 * http://schema.org/ActionAccessSpecification
 */
export declare const ActionAccessSpecification: Class;
/**
 * ActionStatusType
 *
 * The status of an Action.
 *
 * http://schema.org/ActionStatusType
 */
export declare const ActionStatusType: Class;
/**
 * ActivateAction
 *
 * The act of starting or activating a device or application (e.g. starting a timer or turning on a flashlight).
 *
 * http://schema.org/ActivateAction
 */
export declare const ActivateAction: Class;
/**
 * AddAction
 *
 * The act of editing by adding an object to a collection.
 *
 * http://schema.org/AddAction
 */
export declare const AddAction: Class;
/**
 * AdministrativeArea
 *
 * A geographical region, typically under the jurisdiction of a particular government.
 *
 * http://schema.org/AdministrativeArea
 */
export declare const AdministrativeArea: Class;
/**
 * AdultEntertainment
 *
 * An adult entertainment establishment.
 *
 * http://schema.org/AdultEntertainment
 */
export declare const AdultEntertainment: Class;
/**
 * AggregateOffer
 *
 * When a single product is associated with multiple offers (for example, the same pair of shoes is offered by different merchants), then AggregateOffer can be used.
 *
 * http://schema.org/AggregateOffer
 */
export declare const AggregateOffer: Class;
/**
 * AggregateRating
 *
 * The average rating based on multiple ratings or reviews.
 *
 * http://schema.org/AggregateRating
 */
export declare const AggregateRating: Class;
/**
 * AgreeAction
 *
 * The act of expressing a consistency of opinion with the object. An agent agrees to/about an object (a proposition, topic or theme) with participants.
 *
 * http://schema.org/AgreeAction
 */
export declare const AgreeAction: Class;
/**
 * Airline
 *
 * An organization that provides flights for passengers.
 *
 * http://schema.org/Airline
 */
export declare const Airline: Class;
/**
 * Airport
 *
 * An airport.
 *
 * http://schema.org/Airport
 */
export declare const Airport: Class;
/**
 * AlignmentObject
 *
 * An intangible item that describes an alignment between a learning resource and a node in an educational framework.
 *
 * http://schema.org/AlignmentObject
 */
export declare const AlignmentObject: Class;
/**
 * AllocateAction
 *
 * The act of organizing tasks/objects/events by associating resources to it.
 *
 * http://schema.org/AllocateAction
 */
export declare const AllocateAction: Class;
/**
 * AmusementPark
 *
 * An amusement park.
 *
 * http://schema.org/AmusementPark
 */
export declare const AmusementPark: Class;
/**
 * AnimalShelter
 *
 * Animal shelter.
 *
 * http://schema.org/AnimalShelter
 */
export declare const AnimalShelter: Class;
/**
 * Answer
 *
 * An answer offered to a question; perhaps correct, perhaps opinionated or wrong.
 *
 * http://schema.org/Answer
 */
export declare const Answer: Class;
/**
 * Apartment
 *
 * An apartment (in American English) or flat (in British English) is a self-contained housing unit (a type of residential real estate) that occupies only part of a building (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Apartment">http://en.wikipedia.org/wiki/Apartment</a>).
 *
 * http://schema.org/Apartment
 */
export declare const Apartment: Class;
/**
 * ApartmentComplex
 *
 * Residence type: Apartment complex.
 *
 * http://schema.org/ApartmentComplex
 */
export declare const ApartmentComplex: Class;
/**
 * AppendAction
 *
 * The act of inserting at the end if an ordered collection.
 *
 * http://schema.org/AppendAction
 */
export declare const AppendAction: Class;
/**
 * ApplyAction
 *
 * The act of registering to an organization/service without the guarantee to receive it.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/RegisterAction">RegisterAction</a>: Unlike RegisterAction, ApplyAction has no guarantees that the application will be accepted.</li>
 * </ul>
 *
 *
 * http://schema.org/ApplyAction
 */
export declare const ApplyAction: Class;
/**
 * Aquarium
 *
 * Aquarium.
 *
 * http://schema.org/Aquarium
 */
export declare const Aquarium: Class;
/**
 * ArriveAction
 *
 * The act of arriving at a place. An agent arrives at a destination from a fromLocation, optionally with participants.
 *
 * http://schema.org/ArriveAction
 */
export declare const ArriveAction: Class;
/**
 * ArtGallery
 *
 * An art gallery.
 *
 * http://schema.org/ArtGallery
 */
export declare const ArtGallery: Class;
/**
 * Article
 *
 * An article, such as a news article or piece of investigative report. Newspapers and magazines have articles of many different types and this is intended to cover them all.<br/><br/>
 *
 * See also <a href="http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html">blog post</a>.
 *
 * http://schema.org/Article
 */
export declare const Article: Class;
/**
 * AskAction
 *
 * The act of posing a question / favor to someone.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/ReplyAction">ReplyAction</a>: Appears generally as a response to AskAction.</li>
 * </ul>
 *
 *
 * http://schema.org/AskAction
 */
export declare const AskAction: Class;
/**
 * AssessAction
 *
 * The act of forming one's opinion, reaction or sentiment.
 *
 * http://schema.org/AssessAction
 */
export declare const AssessAction: Class;
/**
 * AssignAction
 *
 * The act of allocating an action/event/task to some destination (someone or something).
 *
 * http://schema.org/AssignAction
 */
export declare const AssignAction: Class;
/**
 * Attorney
 *
 * Professional service: Attorney. <br/><br/>
 *
 * This type is deprecated - <a class="localLink" href="http://schema.org/LegalService">LegalService</a> is more inclusive and less ambiguous.
 *
 * http://schema.org/Attorney
 */
export declare const Attorney: Class;
/**
 * Audience
 *
 * Intended audience for an item, i.e. the group for whom the item was created.
 *
 * http://schema.org/Audience
 */
export declare const Audience: Class;
/**
 * AudioObject
 *
 * An audio file.
 *
 * http://schema.org/AudioObject
 */
export declare const AudioObject: Class;
/**
 * AuthorizeAction
 *
 * The act of granting permission to an object.
 *
 * http://schema.org/AuthorizeAction
 */
export declare const AuthorizeAction: Class;
/**
 * AutoBodyShop
 *
 * Auto body shop.
 *
 * http://schema.org/AutoBodyShop
 */
export declare const AutoBodyShop: Class;
/**
 * AutoDealer
 *
 * An car dealership.
 *
 * http://schema.org/AutoDealer
 */
export declare const AutoDealer: Class;
/**
 * AutoPartsStore
 *
 * An auto parts store.
 *
 * http://schema.org/AutoPartsStore
 */
export declare const AutoPartsStore: Class;
/**
 * AutoRental
 *
 * A car rental business.
 *
 * http://schema.org/AutoRental
 */
export declare const AutoRental: Class;
/**
 * AutoRepair
 *
 * Car repair business.
 *
 * http://schema.org/AutoRepair
 */
export declare const AutoRepair: Class;
/**
 * AutoWash
 *
 * A car wash business.
 *
 * http://schema.org/AutoWash
 */
export declare const AutoWash: Class;
/**
 * AutomatedTeller
 *
 * ATM/cash machine.
 *
 * http://schema.org/AutomatedTeller
 */
export declare const AutomatedTeller: Class;
/**
 * AutomotiveBusiness
 *
 * Car repair, sales, or parts.
 *
 * http://schema.org/AutomotiveBusiness
 */
export declare const AutomotiveBusiness: Class;
/**
 * Bakery
 *
 * A bakery.
 *
 * http://schema.org/Bakery
 */
export declare const Bakery: Class;
/**
 * BankAccount
 *
 * A product or service offered by a bank whereby one may deposit, withdraw or transfer money and in some cases be paid interest.
 *
 * http://schema.org/BankAccount
 */
export declare const BankAccount: Class;
/**
 * BankOrCreditUnion
 *
 * Bank or credit union.
 *
 * http://schema.org/BankOrCreditUnion
 */
export declare const BankOrCreditUnion: Class;
/**
 * BarOrPub
 *
 * A bar or pub.
 *
 * http://schema.org/BarOrPub
 */
export declare const BarOrPub: Class;
/**
 * Barcode
 *
 * An image of a visual machine-readable code such as a barcode or QR code.
 *
 * http://schema.org/Barcode
 */
export declare const Barcode: Class;
/**
 * Beach
 *
 * Beach.
 *
 * http://schema.org/Beach
 */
export declare const Beach: Class;
/**
 * BeautySalon
 *
 * Beauty salon.
 *
 * http://schema.org/BeautySalon
 */
export declare const BeautySalon: Class;
/**
 * BedAndBreakfast
 *
 * Bed and breakfast.
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 * http://schema.org/BedAndBreakfast
 */
export declare const BedAndBreakfast: Class;
/**
 * BedDetails
 *
 * An entity holding detailed information about the available bed types, e.g. the quantity of twin beds for a hotel room. For the single case of just one bed of a certain type, you can use bed directly with a text. See also <a class="localLink" href="http://schema.org/BedType">BedType</a> (under development).
 *
 * http://schema.org/BedDetails
 */
export declare const BedDetails: Class;
/**
 * BedType
 *
 * A type of bed. This is used for indicating the bed or beds available in an accommodation.
 *
 * http://schema.org/BedType
 */
export declare const BedType: Class;
/**
 * BefriendAction
 *
 * The act of forming a personal connection with someone (object) mutually/bidirectionally/symmetrically.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/FollowAction">FollowAction</a>: Unlike FollowAction, BefriendAction implies that the connection is reciprocal.</li>
 * </ul>
 *
 *
 * http://schema.org/BefriendAction
 */
export declare const BefriendAction: Class;
/**
 * BikeStore
 *
 * A bike store.
 *
 * http://schema.org/BikeStore
 */
export declare const BikeStore: Class;
/**
 * Blog
 *
 * A blog.
 *
 * http://schema.org/Blog
 */
export declare const Blog: Class;
/**
 * BlogPosting
 *
 * A blog post.
 *
 * http://schema.org/BlogPosting
 */
export declare const BlogPosting: Class;
/**
 * BoardingPolicyType
 *
 * A type of boarding policy used by an airline.
 *
 * http://schema.org/BoardingPolicyType
 */
export declare const BoardingPolicyType: Class;
/**
 * BodyOfWater
 *
 * A body of water, such as a sea, ocean, or lake.
 *
 * http://schema.org/BodyOfWater
 */
export declare const BodyOfWater: Class;
/**
 * Book
 *
 * A book.
 *
 * http://schema.org/Book
 */
export declare const Book: Class;
/**
 * BookFormatType
 *
 * The publication format of the book.
 *
 * http://schema.org/BookFormatType
 */
export declare const BookFormatType: Class;
/**
 * BookSeries
 *
 * A series of books. Included books can be indicated with the hasPart property.
 *
 * http://schema.org/BookSeries
 */
export declare const BookSeries: Class;
/**
 * BookStore
 *
 * A bookstore.
 *
 * http://schema.org/BookStore
 */
export declare const BookStore: Class;
/**
 * BookmarkAction
 *
 * An agent bookmarks/flags/labels/tags/marks an object.
 *
 * http://schema.org/BookmarkAction
 */
export declare const BookmarkAction: Class;
/**
 * Boolean
 *
 * Boolean: True or False.
 *
 * http://schema.org/Boolean
 */
export declare const Boolean: string;
/**
 * BorrowAction
 *
 * The act of obtaining an object under an agreement to return it at a later date. Reciprocal of LendAction.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/LendAction">LendAction</a>: Reciprocal of BorrowAction.</li>
 * </ul>
 *
 *
 * http://schema.org/BorrowAction
 */
export declare const BorrowAction: Class;
/**
 * BowlingAlley
 *
 * A bowling alley.
 *
 * http://schema.org/BowlingAlley
 */
export declare const BowlingAlley: Class;
/**
 * Brand
 *
 * A brand is a name used by an organization or business person for labeling a product, product group, or similar.
 *
 * http://schema.org/Brand
 */
export declare const Brand: Class;
/**
 * BreadcrumbList
 *
 * A BreadcrumbList is an ItemList consisting of a chain of linked Web pages, typically described using at least their URL and their name, and typically ending with the current page.<br/><br/>
 *
 * The <a class="localLink" href="http://schema.org/position">position</a> property is used to reconstruct the order of the items in a BreadcrumbList The convention is that a breadcrumb list has an <a class="localLink" href="http://schema.org/itemListOrder">itemListOrder</a> of <a class="localLink" href="http://schema.org/ItemListOrderAscending">ItemListOrderAscending</a> (lower values listed first), and that the first items in this list correspond to the "top" or beginning of the breadcrumb trail, e.g. with a site or section homepage. The specific values of 'position' are not assigned meaning for a BreadcrumbList, but they should be integers, e.g. beginning with '1' for the first item in the list.
 *
 * http://schema.org/BreadcrumbList
 */
export declare const BreadcrumbList: Class;
/**
 * Brewery
 *
 * Brewery.
 *
 * http://schema.org/Brewery
 */
export declare const Brewery: Class;
/**
 * Bridge
 *
 * A bridge.
 *
 * http://schema.org/Bridge
 */
export declare const Bridge: Class;
/**
 * BroadcastChannel
 *
 * A unique instance of a BroadcastService on a CableOrSatelliteService lineup.
 *
 * http://schema.org/BroadcastChannel
 */
export declare const BroadcastChannel: Class;
/**
 * BroadcastEvent
 *
 * An over the air or online broadcast event.
 *
 * http://schema.org/BroadcastEvent
 */
export declare const BroadcastEvent: Class;
/**
 * BroadcastFrequencySpecification
 *
 * The frequency in MHz and the modulation used for a particular BroadcastService.
 *
 * http://schema.org/BroadcastFrequencySpecification
 */
export declare const BroadcastFrequencySpecification: Class;
/**
 * BroadcastService
 *
 * A delivery service through which content is provided via broadcast over the air or online.
 *
 * http://schema.org/BroadcastService
 */
export declare const BroadcastService: Class;
/**
 * BuddhistTemple
 *
 * A Buddhist temple.
 *
 * http://schema.org/BuddhistTemple
 */
export declare const BuddhistTemple: Class;
/**
 * BusReservation
 *
 * A reservation for bus travel. <br/><br/>
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use <a class="localLink" href="http://schema.org/Offer">Offer</a>.
 *
 * http://schema.org/BusReservation
 */
export declare const BusReservation: Class;
/**
 * BusStation
 *
 * A bus station.
 *
 * http://schema.org/BusStation
 */
export declare const BusStation: Class;
/**
 * BusStop
 *
 * A bus stop.
 *
 * http://schema.org/BusStop
 */
export declare const BusStop: Class;
/**
 * BusTrip
 *
 * A trip on a commercial bus line.
 *
 * http://schema.org/BusTrip
 */
export declare const BusTrip: Class;
/**
 * BusinessAudience
 *
 * A set of characteristics belonging to businesses, e.g. who compose an item's target audience.
 *
 * http://schema.org/BusinessAudience
 */
export declare const BusinessAudience: Class;
/**
 * BusinessEntityType
 *
 * A business entity type is a conceptual entity representing the legal form, the size, the main line of business, the position in the value chain, or any combination thereof, of an organization or business person.<br/><br/>
 *
 * Commonly used values:<br/><br/>
 *
 * <ul>
 * <li>http://purl.org/goodrelations/v1#Business</li>
 * <li>http://purl.org/goodrelations/v1#Enduser</li>
 * <li>http://purl.org/goodrelations/v1#PublicInstitution</li>
 * <li>http://purl.org/goodrelations/v1#Reseller</li>
 * </ul>
 *
 *
 * http://schema.org/BusinessEntityType
 */
export declare const BusinessEntityType: Class;
/**
 * BusinessEvent
 *
 * Event type: Business event.
 *
 * http://schema.org/BusinessEvent
 */
export declare const BusinessEvent: Class;
/**
 * BusinessFunction
 *
 * The business function specifies the type of activity or access (i.e., the bundle of rights) offered by the organization or business person through the offer. Typical are sell, rental or lease, maintenance or repair, manufacture / produce, recycle / dispose, engineering / construction, or installation. Proprietary specifications of access rights are also instances of this class.<br/><br/>
 *
 * Commonly used values:<br/><br/>
 *
 * <ul>
 * <li>http://purl.org/goodrelations/v1#ConstructionInstallation</li>
 * <li>http://purl.org/goodrelations/v1#Dispose</li>
 * <li>http://purl.org/goodrelations/v1#LeaseOut</li>
 * <li>http://purl.org/goodrelations/v1#Maintain</li>
 * <li>http://purl.org/goodrelations/v1#ProvideService</li>
 * <li>http://purl.org/goodrelations/v1#Repair</li>
 * <li>http://purl.org/goodrelations/v1#Sell</li>
 * <li>http://purl.org/goodrelations/v1#Buy</li>
 * </ul>
 *
 *
 * http://schema.org/BusinessFunction
 */
export declare const BusinessFunction: Class;
/**
 * BuyAction
 *
 * The act of giving money to a seller in exchange for goods or services rendered. An agent buys an object, product, or service from a seller for a price. Reciprocal of SellAction.
 *
 * http://schema.org/BuyAction
 */
export declare const BuyAction: Class;
/**
 * CableOrSatelliteService
 *
 * A service which provides access to media programming like TV or radio. Access may be via cable or satellite.
 *
 * http://schema.org/CableOrSatelliteService
 */
export declare const CableOrSatelliteService: Class;
/**
 * CafeOrCoffeeShop
 *
 * A cafe or coffee shop.
 *
 * http://schema.org/CafeOrCoffeeShop
 */
export declare const CafeOrCoffeeShop: Class;
/**
 * Campground
 *
 * A camping site, campsite, or <a class="localLink" href="http://schema.org/Campground">Campground</a> is a place used for overnight stay in the outdoors, typically containing individual <a class="localLink" href="http://schema.org/CampingPitch">CampingPitch</a> locations. <br/><br/>
 *
 * In British English a campsite is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites (Source: Wikipedia see <a href="https://en.wikipedia.org/wiki/Campsite">https://en.wikipedia.org/wiki/Campsite</a>).<br/><br/>
 *
 * See also the dedicated <a href="/docs/hotels.html">document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 * http://schema.org/Campground
 */
export declare const Campground: Class;
/**
 * CampingPitch
 *
 * A <a class="localLink" href="http://schema.org/CampingPitch">CampingPitch</a> is an individual place for overnight stay in the outdoors, typically being part of a larger camping site, or <a class="localLink" href="http://schema.org/Campground">Campground</a>.<br/><br/>
 *
 * In British English a campsite, or campground, is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites.
 * (Source: Wikipedia see <a href="https://en.wikipedia.org/wiki/Campsite">https://en.wikipedia.org/wiki/Campsite</a>).<br/><br/>
 *
 * See also the dedicated <a href="/docs/hotels.html">document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 * http://schema.org/CampingPitch
 */
export declare const CampingPitch: Class;
/**
 * Canal
 *
 * A canal, like the Panama Canal.
 *
 * http://schema.org/Canal
 */
export declare const Canal: Class;
/**
 * CancelAction
 *
 * The act of asserting that a future event/action is no longer going to happen.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/ConfirmAction">ConfirmAction</a>: The antonym of CancelAction.</li>
 * </ul>
 *
 *
 * http://schema.org/CancelAction
 */
export declare const CancelAction: Class;
/**
 * Car
 *
 * A car is a wheeled, self-powered motor vehicle used for transportation.
 *
 * http://schema.org/Car
 */
export declare const Car: Class;
/**
 * Casino
 *
 * A casino.
 *
 * http://schema.org/Casino
 */
export declare const Casino: Class;
/**
 * CatholicChurch
 *
 * A Catholic church.
 *
 * http://schema.org/CatholicChurch
 */
export declare const CatholicChurch: Class;
/**
 * Cemetery
 *
 * A graveyard.
 *
 * http://schema.org/Cemetery
 */
export declare const Cemetery: Class;
/**
 * CheckAction
 *
 * An agent inspects, determines, investigates, inquires, or examines an object's accuracy, quality, condition, or state.
 *
 * http://schema.org/CheckAction
 */
export declare const CheckAction: Class;
/**
 * CheckInAction
 *
 * The act of an agent communicating (service provider, social media, etc) their arrival by registering/confirming for a previously reserved service (e.g. flight check in) or at a place (e.g. hotel), possibly resulting in a result (boarding pass, etc).<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/CheckOutAction">CheckOutAction</a>: The antonym of CheckInAction.</li>
 * <li><a class="localLink" href="http://schema.org/ArriveAction">ArriveAction</a>: Unlike ArriveAction, CheckInAction implies that the agent is informing/confirming the start of a previously reserved service.</li>
 * <li><a class="localLink" href="http://schema.org/ConfirmAction">ConfirmAction</a>: Unlike ConfirmAction, CheckInAction implies that the agent is informing/confirming the <em>start</em> of a previously reserved service rather than its validity/existence.</li>
 * </ul>
 *
 *
 * http://schema.org/CheckInAction
 */
export declare const CheckInAction: Class;
/**
 * CheckOutAction
 *
 * The act of an agent communicating (service provider, social media, etc) their departure of a previously reserved service (e.g. flight check in) or place (e.g. hotel).<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/CheckInAction">CheckInAction</a>: The antonym of CheckOutAction.</li>
 * <li><a class="localLink" href="http://schema.org/DepartAction">DepartAction</a>: Unlike DepartAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.</li>
 * <li><a class="localLink" href="http://schema.org/CancelAction">CancelAction</a>: Unlike CancelAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.</li>
 * </ul>
 *
 *
 * http://schema.org/CheckOutAction
 */
export declare const CheckOutAction: Class;
/**
 * CheckoutPage
 *
 * Web page type: Checkout page.
 *
 * http://schema.org/CheckoutPage
 */
export declare const CheckoutPage: Class;
/**
 * ChildCare
 *
 * A Childcare center.
 *
 * http://schema.org/ChildCare
 */
export declare const ChildCare: Class;
/**
 * ChildrensEvent
 *
 * Event type: Children's event.
 *
 * http://schema.org/ChildrensEvent
 */
export declare const ChildrensEvent: Class;
/**
 * ChooseAction
 *
 * The act of expressing a preference from a set of options or a large or unbounded set of choices/options.
 *
 * http://schema.org/ChooseAction
 */
export declare const ChooseAction: Class;
/**
 * Church
 *
 * A church.
 *
 * http://schema.org/Church
 */
export declare const Church: Class;
/**
 * City
 *
 * A city or town.
 *
 * http://schema.org/City
 */
export declare const City: Class;
/**
 * CityHall
 *
 * A city hall.
 *
 * http://schema.org/CityHall
 */
export declare const CityHall: Class;
/**
 * CivicStructure
 *
 * A public structure, such as a town hall or concert hall.
 *
 * http://schema.org/CivicStructure
 */
export declare const CivicStructure: Class;
/**
 * ClaimReview
 *
 * A fact-checking review of claims made (or reported) in some creative work (referenced via itemReviewed).
 *
 * http://schema.org/ClaimReview
 */
export declare const ClaimReview: Class;
/**
 * Clip
 *
 * A short TV or radio program or a segment/part of a program.
 *
 * http://schema.org/Clip
 */
export declare const Clip: Class;
/**
 * ClothingStore
 *
 * A clothing store.
 *
 * http://schema.org/ClothingStore
 */
export declare const ClothingStore: Class;
/**
 * Code
 *
 * Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.
 *
 * http://schema.org/Code
 */
export declare const Code: Class;
/**
 * CollectionPage
 *
 * Web page type: Collection page.
 *
 * http://schema.org/CollectionPage
 */
export declare const CollectionPage: Class;
/**
 * CollegeOrUniversity
 *
 * A college, university, or other third-level educational institution.
 *
 * http://schema.org/CollegeOrUniversity
 */
export declare const CollegeOrUniversity: Class;
/**
 * ComedyClub
 *
 * A comedy club.
 *
 * http://schema.org/ComedyClub
 */
export declare const ComedyClub: Class;
/**
 * ComedyEvent
 *
 * Event type: Comedy event.
 *
 * http://schema.org/ComedyEvent
 */
export declare const ComedyEvent: Class;
/**
 * Comment
 *
 * A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the <a class="localLink" href="http://schema.org/text">text</a> property, and its topic via <a class="localLink" href="http://schema.org/about">about</a>, properties shared with all CreativeWorks.
 *
 * http://schema.org/Comment
 */
export declare const Comment: Class;
/**
 * CommentAction
 *
 * The act of generating a comment about a subject.
 *
 * http://schema.org/CommentAction
 */
export declare const CommentAction: Class;
/**
 * CommunicateAction
 *
 * The act of conveying information to another person via a communication medium (instrument) such as speech, email, or telephone conversation.
 *
 * http://schema.org/CommunicateAction
 */
export declare const CommunicateAction: Class;
/**
 * CompoundPriceSpecification
 *
 * A compound price specification is one that bundles multiple prices that all apply in combination for different dimensions of consumption. Use the name property of the attached unit price specification for indicating the dimension of a price component (e.g. "electricity" or "final cleaning").
 *
 * http://schema.org/CompoundPriceSpecification
 */
export declare const CompoundPriceSpecification: Class;
/**
 * ComputerLanguage
 *
 * This type covers computer programming languages such as Scheme and Lisp, as well as other language-like computer representations. Natural languages are best represented with the <a class="localLink" href="http://schema.org/Language">Language</a> type.
 *
 * http://schema.org/ComputerLanguage
 */
export declare const ComputerLanguage: Class;
/**
 * ComputerStore
 *
 * A computer store.
 *
 * http://schema.org/ComputerStore
 */
export declare const ComputerStore: Class;
/**
 * ConfirmAction
 *
 * The act of notifying someone that a future event/action is going to happen as expected.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/CancelAction">CancelAction</a>: The antonym of ConfirmAction.</li>
 * </ul>
 *
 *
 * http://schema.org/ConfirmAction
 */
export declare const ConfirmAction: Class;
/**
 * ConsumeAction
 *
 * The act of ingesting information/resources/food.
 *
 * http://schema.org/ConsumeAction
 */
export declare const ConsumeAction: Class;
/**
 * ContactPage
 *
 * Web page type: Contact page.
 *
 * http://schema.org/ContactPage
 */
export declare const ContactPage: Class;
/**
 * ContactPoint
 *
 * A contact point&#x2014;for example, a Customer Complaints department.
 *
 * http://schema.org/ContactPoint
 */
export declare const ContactPoint: Class;
/**
 * ContactPointOption
 *
 * Enumerated options related to a ContactPoint.
 *
 * http://schema.org/ContactPointOption
 */
export declare const ContactPointOption: Class;
/**
 * Continent
 *
 * One of the continents (for example, Europe or Africa).
 *
 * http://schema.org/Continent
 */
export declare const Continent: Class;
/**
 * ControlAction
 *
 * An agent controls a device or application.
 *
 * http://schema.org/ControlAction
 */
export declare const ControlAction: Class;
/**
 * ConvenienceStore
 *
 * A convenience store.
 *
 * http://schema.org/ConvenienceStore
 */
export declare const ConvenienceStore: Class;
/**
 * Conversation
 *
 * One or more messages between organizations or people on a particular topic. Individual messages can be linked to the conversation with isPartOf or hasPart properties.
 *
 * http://schema.org/Conversation
 */
export declare const Conversation: Class;
/**
 * CookAction
 *
 * The act of producing/preparing food.
 *
 * http://schema.org/CookAction
 */
export declare const CookAction: Class;
/**
 * Corporation
 *
 * Organization: A business corporation.
 *
 * http://schema.org/Corporation
 */
export declare const Corporation: Class;
/**
 * Country
 *
 * A country.
 *
 * http://schema.org/Country
 */
export declare const Country: Class;
/**
 * Course
 *
 * A description of an educational course which may be offered as distinct instances at which take place at different times or take place at different locations, or be offered through different media or modes of study. An educational course is a sequence of one or more educational events and/or creative works which aims to build knowledge, competence or ability of learners.
 *
 * http://schema.org/Course
 */
export declare const Course: Class;
/**
 * CourseInstance
 *
 * An instance of a <a class="localLink" href="http://schema.org/Course">Course</a> which is distinct from other instances because it is offered at a different time or location or through different media or modes of study or to a specific section of students.
 *
 * http://schema.org/CourseInstance
 */
export declare const CourseInstance: Class;
/**
 * Courthouse
 *
 * A courthouse.
 *
 * http://schema.org/Courthouse
 */
export declare const Courthouse: Class;
/**
 * CreateAction
 *
 * The act of deliberately creating/producing/generating/building a result out of the agent.
 *
 * http://schema.org/CreateAction
 */
export declare const CreateAction: Class;
/**
 * CreativeWork
 *
 * The most generic kind of creative work, including books, movies, photographs, software programs, etc.
 *
 * http://schema.org/CreativeWork
 */
export declare const CreativeWork: Class;
/**
 * CreativeWorkSeason
 *
 * A media season e.g. tv, radio, video game etc.
 *
 * http://schema.org/CreativeWorkSeason
 */
export declare const CreativeWorkSeason: Class;
/**
 * CreativeWorkSeries
 *
 * A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily of the same kind. CreativeWorkSeries are usually organized into some order, often chronological. Unlike <a class="localLink" href="http://schema.org/ItemList">ItemList</a> which is a general purpose data structure for lists of things, the emphasis with CreativeWorkSeries is on published materials (written e.g. books and periodicals, or media such as tv, radio and games).<br/><br/>
 *
 * Specific subtypes are available for describing <a class="localLink" href="http://schema.org/TVSeries">TVSeries</a>, <a class="localLink" href="http://schema.org/RadioSeries">RadioSeries</a>, <a class="localLink" href="http://schema.org/MovieSeries">MovieSeries</a>, <a class="localLink" href="http://schema.org/BookSeries">BookSeries</a>, <a class="localLink" href="http://schema.org/Periodical">Periodical</a> and <a class="localLink" href="http://schema.org/VideoGameSeries">VideoGameSeries</a>. In each case, the <a class="localLink" href="http://schema.org/hasPart">hasPart</a> / <a class="localLink" href="http://schema.org/isPartOf">isPartOf</a> properties can be used to relate the CreativeWorkSeries to its parts. The general CreativeWorkSeries type serves largely just to organize these more specific and practical subtypes.<br/><br/>
 *
 * It is common for properties applicable to an item from the series to be usefully applied to the containing group. Schema.org attempts to anticipate some of these cases, but publishers should be free to apply properties of the series parts to the series as a whole wherever they seem appropriate.
 *
 * http://schema.org/CreativeWorkSeries
 */
export declare const CreativeWorkSeries: Class;
/**
 * CreditCard
 *
 * A card payment method of a particular brand or name.  Used to mark up a particular payment method and/or the financial product/service that supplies the card account.<br/><br/>
 *
 * Commonly used values:<br/><br/>
 *
 * <ul>
 * <li>http://purl.org/goodrelations/v1#AmericanExpress</li>
 * <li>http://purl.org/goodrelations/v1#DinersClub</li>
 * <li>http://purl.org/goodrelations/v1#Discover</li>
 * <li>http://purl.org/goodrelations/v1#JCB</li>
 * <li>http://purl.org/goodrelations/v1#MasterCard</li>
 * <li>http://purl.org/goodrelations/v1#VISA</li>
 * </ul>
 *
 *
 * http://schema.org/CreditCard
 */
export declare const CreditCard: Class;
/**
 * Crematorium
 *
 * A crematorium.
 *
 * http://schema.org/Crematorium
 */
export declare const Crematorium: Class;
/**
 * CurrencyConversionService
 *
 * A service to convert funds from one currency to another currency.
 *
 * http://schema.org/CurrencyConversionService
 */
export declare const CurrencyConversionService: Class;
/**
 * DanceEvent
 *
 * Event type: A social dance.
 *
 * http://schema.org/DanceEvent
 */
export declare const DanceEvent: Class;
/**
 * DanceGroup
 *
 * A dance group&#x2014;for example, the Alvin Ailey Dance Theater or Riverdance.
 *
 * http://schema.org/DanceGroup
 */
export declare const DanceGroup: Class;
/**
 * DataCatalog
 *
 * A collection of datasets.
 *
 * http://schema.org/DataCatalog
 */
export declare const DataCatalog: Class;
/**
 * DataDownload
 *
 * A dataset in downloadable form.
 *
 * http://schema.org/DataDownload
 */
export declare const DataDownload: Class;
/**
 * DataFeed
 *
 * A single feed providing structured information about one or more entities or topics.
 *
 * http://schema.org/DataFeed
 */
export declare const DataFeed: Class;
/**
 * DataFeedItem
 *
 * A single item within a larger data feed.
 *
 * http://schema.org/DataFeedItem
 */
export declare const DataFeedItem: Class;
/**
 * DataType
 *
 * The basic data types such as Integers, Strings, etc.
 *
 * http://schema.org/DataType
 */
export declare const DataType: Class;
/**
 * Dataset
 *
 * A body of structured information describing some topic(s) of interest.
 *
 * http://schema.org/Dataset
 */
export declare const Dataset: Class;
/**
 * Date
 *
 * A date value in <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601 date format</a>.
 *
 * http://schema.org/Date
 */
export declare const Date: string;
/**
 * DateTime
 *
 * A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
 *
 * http://schema.org/DateTime
 */
export declare const DateTime: string;
/**
 * DatedMoneySpecification
 *
 * A DatedMoneySpecification represents monetary values with optional start and end dates. For example, this could represent an employee's salary over a specific period of time. <strong>Note:</strong> This type has been superseded by <a class="localLink" href="http://schema.org/MonetaryAmount">MonetaryAmount</a> use of that type is recommended
 *
 * http://schema.org/DatedMoneySpecification
 */
export declare const DatedMoneySpecification: Class;
/**
 * DayOfWeek
 *
 * The day of the week, e.g. used to specify to which day the opening hours of an OpeningHoursSpecification refer.<br/><br/>
 *
 * Originally, URLs from <a href="http://purl.org/goodrelations/v1">GoodRelations</a> were used (for <a class="localLink" href="http://schema.org/Monday">Monday</a>, <a class="localLink" href="http://schema.org/Tuesday">Tuesday</a>, <a class="localLink" href="http://schema.org/Wednesday">Wednesday</a>, <a class="localLink" href="http://schema.org/Thursday">Thursday</a>, <a class="localLink" href="http://schema.org/Friday">Friday</a>, <a class="localLink" href="http://schema.org/Saturday">Saturday</a>, <a class="localLink" href="http://schema.org/Sunday">Sunday</a> plus a special entry for <a class="localLink" href="http://schema.org/PublicHolidays">PublicHolidays</a>); these have now been integrated directly into schema.org.
 *
 * http://schema.org/DayOfWeek
 */
export declare const DayOfWeek: Class;
/**
 * DaySpa
 *
 * A day spa.
 *
 * http://schema.org/DaySpa
 */
export declare const DaySpa: Class;
/**
 * DeactivateAction
 *
 * The act of stopping or deactivating a device or application (e.g. stopping a timer or turning off a flashlight).
 *
 * http://schema.org/DeactivateAction
 */
export declare const DeactivateAction: Class;
/**
 * DefenceEstablishment
 *
 * A defence establishment, such as an army or navy base.
 *
 * http://schema.org/DefenceEstablishment
 */
export declare const DefenceEstablishment: Class;
/**
 * DeleteAction
 *
 * The act of editing a recipient by removing one of its objects.
 *
 * http://schema.org/DeleteAction
 */
export declare const DeleteAction: Class;
/**
 * DeliveryChargeSpecification
 *
 * The price for the delivery of an offer using a particular delivery method.
 *
 * http://schema.org/DeliveryChargeSpecification
 */
export declare const DeliveryChargeSpecification: Class;
/**
 * DeliveryEvent
 *
 * An event involving the delivery of an item.
 *
 * http://schema.org/DeliveryEvent
 */
export declare const DeliveryEvent: Class;
/**
 * DeliveryMethod
 *
 * A delivery method is a standardized procedure for transferring the product or service to the destination of fulfillment chosen by the customer. Delivery methods are characterized by the means of transportation used, and by the organization or group that is the contracting party for the sending organization or person.<br/><br/>
 *
 * Commonly used values:<br/><br/>
 *
 * <ul>
 * <li>http://purl.org/goodrelations/v1#DeliveryModeDirectDownload</li>
 * <li>http://purl.org/goodrelations/v1#DeliveryModeFreight</li>
 * <li>http://purl.org/goodrelations/v1#DeliveryModeMail</li>
 * <li>http://purl.org/goodrelations/v1#DeliveryModeOwnFleet</li>
 * <li>http://purl.org/goodrelations/v1#DeliveryModePickUp</li>
 * <li>http://purl.org/goodrelations/v1#DHL</li>
 * <li>http://purl.org/goodrelations/v1#FederalExpress</li>
 * <li>http://purl.org/goodrelations/v1#UPS</li>
 * </ul>
 *
 *
 * http://schema.org/DeliveryMethod
 */
export declare const DeliveryMethod: Class;
/**
 * Demand
 *
 * A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
 *
 * http://schema.org/Demand
 */
export declare const Demand: Class;
/**
 * Dentist
 *
 * A dentist.
 *
 * http://schema.org/Dentist
 */
export declare const Dentist: Class;
/**
 * DepartAction
 *
 * The act of  departing from a place. An agent departs from an fromLocation for a destination, optionally with participants.
 *
 * http://schema.org/DepartAction
 */
export declare const DepartAction: Class;
/**
 * DepartmentStore
 *
 * A department store.
 *
 * http://schema.org/DepartmentStore
 */
export declare const DepartmentStore: Class;
/**
 * DepositAccount
 *
 * A type of Bank Account with a main purpose of depositing funds to gain interest or other benefits.
 *
 * http://schema.org/DepositAccount
 */
export declare const DepositAccount: Class;
/**
 * DigitalDocument
 *
 * An electronic file or document.
 *
 * http://schema.org/DigitalDocument
 */
export declare const DigitalDocument: Class;
/**
 * DigitalDocumentPermission
 *
 * A permission for a particular person or group to access a particular file.
 *
 * http://schema.org/DigitalDocumentPermission
 */
export declare const DigitalDocumentPermission: Class;
/**
 * DigitalDocumentPermissionType
 *
 * A type of permission which can be granted for accessing a digital document.
 *
 * http://schema.org/DigitalDocumentPermissionType
 */
export declare const DigitalDocumentPermissionType: Class;
/**
 * DisagreeAction
 *
 * The act of expressing a difference of opinion with the object. An agent disagrees to/about an object (a proposition, topic or theme) with participants.
 *
 * http://schema.org/DisagreeAction
 */
export declare const DisagreeAction: Class;
/**
 * DiscoverAction
 *
 * The act of discovering/finding an object.
 *
 * http://schema.org/DiscoverAction
 */
export declare const DiscoverAction: Class;
/**
 * DiscussionForumPosting
 *
 * A posting to a discussion forum.
 *
 * http://schema.org/DiscussionForumPosting
 */
export declare const DiscussionForumPosting: Class;
/**
 * DislikeAction
 *
 * The act of expressing a negative sentiment about the object. An agent dislikes an object (a proposition, topic or theme) with participants.
 *
 * http://schema.org/DislikeAction
 */
export declare const DislikeAction: Class;
/**
 * Distance
 *
 * Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
 *
 * http://schema.org/Distance
 */
export declare const Distance: Class;
/**
 * Distillery
 *
 * A distillery.
 *
 * http://schema.org/Distillery
 */
export declare const Distillery: Class;
/**
 * DonateAction
 *
 * The act of providing goods, services, or money without compensation, often for philanthropic reasons.
 *
 * http://schema.org/DonateAction
 */
export declare const DonateAction: Class;
/**
 * DownloadAction
 *
 * The act of downloading an object.
 *
 * http://schema.org/DownloadAction
 */
export declare const DownloadAction: Class;
/**
 * DrawAction
 *
 * The act of producing a visual/graphical representation of an object, typically with a pen/pencil and paper as instruments.
 *
 * http://schema.org/DrawAction
 */
export declare const DrawAction: Class;
/**
 * DrinkAction
 *
 * The act of swallowing liquids.
 *
 * http://schema.org/DrinkAction
 */
export declare const DrinkAction: Class;
/**
 * DriveWheelConfigurationValue
 *
 * A value indicating which roadwheels will receive torque.
 *
 * http://schema.org/DriveWheelConfigurationValue
 */
export declare const DriveWheelConfigurationValue: Class;
/**
 * DryCleaningOrLaundry
 *
 * A dry-cleaning business.
 *
 * http://schema.org/DryCleaningOrLaundry
 */
export declare const DryCleaningOrLaundry: Class;
/**
 * Duration
 *
 * Quantity: Duration (use <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601 duration format</a>).
 *
 * http://schema.org/Duration
 */
export declare const Duration: Class;
/**
 * EatAction
 *
 * The act of swallowing solid objects.
 *
 * http://schema.org/EatAction
 */
export declare const EatAction: Class;
/**
 * EducationEvent
 *
 * Event type: Education event.
 *
 * http://schema.org/EducationEvent
 */
export declare const EducationEvent: Class;
/**
 * EducationalAudience
 *
 * An EducationalAudience.
 *
 * http://schema.org/EducationalAudience
 */
export declare const EducationalAudience: Class;
/**
 * EducationalOrganization
 *
 * An educational organization.
 *
 * http://schema.org/EducationalOrganization
 */
export declare const EducationalOrganization: Class;
/**
 * Electrician
 *
 * An electrician.
 *
 * http://schema.org/Electrician
 */
export declare const Electrician: Class;
/**
 * ElectronicsStore
 *
 * An electronics store.
 *
 * http://schema.org/ElectronicsStore
 */
export declare const ElectronicsStore: Class;
/**
 * ElementarySchool
 *
 * An elementary school.
 *
 * http://schema.org/ElementarySchool
 */
export declare const ElementarySchool: Class;
/**
 * EmailMessage
 *
 * An email message.
 *
 * http://schema.org/EmailMessage
 */
export declare const EmailMessage: Class;
/**
 * Embassy
 *
 * An embassy.
 *
 * http://schema.org/Embassy
 */
export declare const Embassy: Class;
/**
 * EmergencyService
 *
 * An emergency service, such as a fire station or ER.
 *
 * http://schema.org/EmergencyService
 */
export declare const EmergencyService: Class;
/**
 * EmployeeRole
 *
 * A subclass of OrganizationRole used to describe employee relationships.
 *
 * http://schema.org/EmployeeRole
 */
export declare const EmployeeRole: Class;
/**
 * EmployerAggregateRating
 *
 * An aggregate rating of an Organization related to its role as an employer.
 *
 * http://schema.org/EmployerAggregateRating
 */
export declare const EmployerAggregateRating: Class;
/**
 * EmploymentAgency
 *
 * An employment agency.
 *
 * http://schema.org/EmploymentAgency
 */
export declare const EmploymentAgency: Class;
/**
 * EndorseAction
 *
 * An agent approves/certifies/likes/supports/sanction an object.
 *
 * http://schema.org/EndorseAction
 */
export declare const EndorseAction: Class;
/**
 * EndorsementRating
 *
 * An EndorsementRating is a rating that expresses some level of endorsement, for example inclusion in a "critic's pick" blog, a
 * "Like" or "+1" on a social network. It can be considered the <a class="localLink" href="http://schema.org/result">result</a> of an <a class="localLink" href="http://schema.org/EndorseAction">EndorseAction</a> in which the <a class="localLink" href="http://schema.org/object">object</a> of the action is rated positively by
 * some <a class="localLink" href="http://schema.org/agent">agent</a>. As is common elsewhere in schema.org, it is sometimes more useful to describe the results of such an action without explicitly describing the <a class="localLink" href="http://schema.org/Action">Action</a>.<br/><br/>
 *
 * An <a class="localLink" href="http://schema.org/EndorsementRating">EndorsementRating</a> may be part of a numeric scale or organized system, but this is not required: having an explicit type for indicating a positive,
 * endorsement rating is particularly useful in the absence of numeric scales as it helps consumers understand that the rating is broadly positive.
 *
 * http://schema.org/EndorsementRating
 */
export declare const EndorsementRating: Class;
/**
 * Energy
 *
 * Properties that take Energy as values are of the form '&lt;Number&gt; &lt;Energy unit of measure&gt;'.
 *
 * http://schema.org/Energy
 */
export declare const Energy: Class;
/**
 * EngineSpecification
 *
 * Information about the engine of the vehicle. A vehicle can have multiple engines represented by multiple engine specification entities.
 *
 * http://schema.org/EngineSpecification
 */
export declare const EngineSpecification: Class;
/**
 * EntertainmentBusiness
 *
 * A business providing entertainment.
 *
 * http://schema.org/EntertainmentBusiness
 */
export declare const EntertainmentBusiness: Class;
/**
 * EntryPoint
 *
 * An entry point, within some Web-based protocol.
 *
 * http://schema.org/EntryPoint
 */
export declare const EntryPoint: Class;
/**
 * Enumeration
 *
 * Lists or enumerations—for example, a list of cuisines or music genres, etc.
 *
 * http://schema.org/Enumeration
 */
export declare const Enumeration: Class;
/**
 * Episode
 *
 * A media episode (e.g. TV, radio, video game) which can be part of a series or season.
 *
 * http://schema.org/Episode
 */
export declare const Episode: Class;
/**
 * Event
 *
 * An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the <a class="localLink" href="http://schema.org/offers">offers</a> property. Repeated events may be structured as separate Event objects.
 *
 * http://schema.org/Event
 */
export declare const Event: Class;
/**
 * EventReservation
 *
 * A reservation for an event like a concert, sporting event, or lecture.<br/><br/>
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use <a class="localLink" href="http://schema.org/Offer">Offer</a>.
 *
 * http://schema.org/EventReservation
 */
export declare const EventReservation: Class;
/**
 * EventStatusType
 *
 * EventStatusType is an enumeration type whose instances represent several states that an Event may be in.
 *
 * http://schema.org/EventStatusType
 */
export declare const EventStatusType: Class;
/**
 * EventVenue
 *
 * An event venue.
 *
 * http://schema.org/EventVenue
 */
export declare const EventVenue: Class;
/**
 * ExerciseAction
 *
 * The act of participating in exertive activity for the purposes of improving health and fitness.
 *
 * http://schema.org/ExerciseAction
 */
export declare const ExerciseAction: Class;
/**
 * ExerciseGym
 *
 * A gym.
 *
 * http://schema.org/ExerciseGym
 */
export declare const ExerciseGym: Class;
/**
 * ExhibitionEvent
 *
 * Event type: Exhibition event, e.g. at a museum, library, archive, tradeshow, ...
 *
 * http://schema.org/ExhibitionEvent
 */
export declare const ExhibitionEvent: Class;
/**
 * FAQPage
 *
 * A <a class="localLink" href="http://schema.org/FAQPage">FAQPage</a> is a <a class="localLink" href="http://schema.org/WebPage">WebPage</a> presenting one or more "<a href="https://en.wikipedia.org/wiki/FAQ">Frequently asked questions</a>" (see also <a class="localLink" href="http://schema.org/QAPage">QAPage</a>).
 *
 * http://schema.org/FAQPage
 */
export declare const FAQPage: Class;
/**
 * FMRadioChannel
 *
 * A radio channel that uses FM.
 *
 * http://schema.org/FMRadioChannel
 */
export declare const FMRadioChannel: Class;
/**
 * FastFoodRestaurant
 *
 * A fast-food restaurant.
 *
 * http://schema.org/FastFoodRestaurant
 */
export declare const FastFoodRestaurant: Class;
/**
 * Festival
 *
 * Event type: Festival.
 *
 * http://schema.org/Festival
 */
export declare const Festival: Class;
/**
 * FilmAction
 *
 * The act of capturing sound and moving images on film, video, or digitally.
 *
 * http://schema.org/FilmAction
 */
export declare const FilmAction: Class;
/**
 * FinancialProduct
 *
 * A product provided to consumers and businesses by financial institutions such as banks, insurance companies, brokerage firms, consumer finance companies, and investment companies which comprise the financial services industry.
 *
 * http://schema.org/FinancialProduct
 */
export declare const FinancialProduct: Class;
/**
 * FinancialService
 *
 * Financial services business.
 *
 * http://schema.org/FinancialService
 */
export declare const FinancialService: Class;
/**
 * FindAction
 *
 * The act of finding an object.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/SearchAction">SearchAction</a>: FindAction is generally lead by a SearchAction, but not necessarily.</li>
 * </ul>
 *
 *
 * http://schema.org/FindAction
 */
export declare const FindAction: Class;
/**
 * FireStation
 *
 * A fire station. With firemen.
 *
 * http://schema.org/FireStation
 */
export declare const FireStation: Class;
/**
 * Flight
 *
 * An airline flight.
 *
 * http://schema.org/Flight
 */
export declare const Flight: Class;
/**
 * FlightReservation
 *
 * A reservation for air travel.<br/><br/>
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use <a class="localLink" href="http://schema.org/Offer">Offer</a>.
 *
 * http://schema.org/FlightReservation
 */
export declare const FlightReservation: Class;
/**
 * Float
 *
 * Data type: Floating number.
 *
 * http://schema.org/Float
 */
export declare const Float: Class;
/**
 * Florist
 *
 * A florist.
 *
 * http://schema.org/Florist
 */
export declare const Florist: Class;
/**
 * FollowAction
 *
 * The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates polled from.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/BefriendAction">BefriendAction</a>: Unlike BefriendAction, FollowAction implies that the connection is <em>not</em> necessarily reciprocal.</li>
 * <li><a class="localLink" href="http://schema.org/SubscribeAction">SubscribeAction</a>: Unlike SubscribeAction, FollowAction implies that the follower acts as an active agent constantly/actively polling for updates.</li>
 * <li><a class="localLink" href="http://schema.org/RegisterAction">RegisterAction</a>: Unlike RegisterAction, FollowAction implies that the agent is interested in continuing receiving updates from the object.</li>
 * <li><a class="localLink" href="http://schema.org/JoinAction">JoinAction</a>: Unlike JoinAction, FollowAction implies that the agent is interested in getting updates from the object.</li>
 * <li><a class="localLink" href="http://schema.org/TrackAction">TrackAction</a>: Unlike TrackAction, FollowAction refers to the polling of updates of all aspects of animate objects rather than the location of inanimate objects (e.g. you track a package, but you don't follow it).</li>
 * </ul>
 *
 *
 * http://schema.org/FollowAction
 */
export declare const FollowAction: Class;
/**
 * FoodEstablishment
 *
 * A food-related business.
 *
 * http://schema.org/FoodEstablishment
 */
export declare const FoodEstablishment: Class;
/**
 * FoodEstablishmentReservation
 *
 * A reservation to dine at a food-related business.<br/><br/>
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
 *
 * http://schema.org/FoodEstablishmentReservation
 */
export declare const FoodEstablishmentReservation: Class;
/**
 * FoodEvent
 *
 * Event type: Food event.
 *
 * http://schema.org/FoodEvent
 */
export declare const FoodEvent: Class;
/**
 * FoodService
 *
 * A food service, like breakfast, lunch, or dinner.
 *
 * http://schema.org/FoodService
 */
export declare const FoodService: Class;
/**
 * FurnitureStore
 *
 * A furniture store.
 *
 * http://schema.org/FurnitureStore
 */
export declare const FurnitureStore: Class;
/**
 * Game
 *
 * The Game type represents things which are games. These are typically rule-governed recreational activities, e.g. role-playing games in which players assume the role of characters in a fictional setting.
 *
 * http://schema.org/Game
 */
export declare const Game: Class;
/**
 * GamePlayMode
 *
 * Indicates whether this game is multi-player, co-op or single-player.
 *
 * http://schema.org/GamePlayMode
 */
export declare const GamePlayMode: Class;
/**
 * GameServer
 *
 * Server that provides game interaction in a multiplayer game.
 *
 * http://schema.org/GameServer
 */
export declare const GameServer: Class;
/**
 * GameServerStatus
 *
 * Status of a game server.
 *
 * http://schema.org/GameServerStatus
 */
export declare const GameServerStatus: Class;
/**
 * GardenStore
 *
 * A garden store.
 *
 * http://schema.org/GardenStore
 */
export declare const GardenStore: Class;
/**
 * GasStation
 *
 * A gas station.
 *
 * http://schema.org/GasStation
 */
export declare const GasStation: Class;
/**
 * GatedResidenceCommunity
 *
 * Residence type: Gated community.
 *
 * http://schema.org/GatedResidenceCommunity
 */
export declare const GatedResidenceCommunity: Class;
/**
 * GenderType
 *
 * An enumeration of genders.
 *
 * http://schema.org/GenderType
 */
export declare const GenderType: Class;
/**
 * GeneralContractor
 *
 * A general contractor.
 *
 * http://schema.org/GeneralContractor
 */
export declare const GeneralContractor: Class;
/**
 * GeoCircle
 *
 * A GeoCircle is a GeoShape representing a circular geographic area. As it is a GeoShape
 *           it provides the simple textual property 'circle', but also allows the combination of postalCode alongside geoRadius.
 *           The center of the circle can be indicated via the 'geoMidpoint' property, or more approximately using 'address', 'postalCode'.
 *
 * http://schema.org/GeoCircle
 */
export declare const GeoCircle: Class;
/**
 * GeoCoordinates
 *
 * The geographic coordinates of a place or event.
 *
 * http://schema.org/GeoCoordinates
 */
export declare const GeoCoordinates: Class;
/**
 * GeoShape
 *
 * The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
 *
 * http://schema.org/GeoShape
 */
export declare const GeoShape: Class;
/**
 * GiveAction
 *
 * The act of transferring ownership of an object to a destination. Reciprocal of TakeAction.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/TakeAction">TakeAction</a>: Reciprocal of GiveAction.</li>
 * <li><a class="localLink" href="http://schema.org/SendAction">SendAction</a>: Unlike SendAction, GiveAction implies that ownership is being transferred (e.g. I may send my laptop to you, but that doesn't mean I'm giving it to you).</li>
 * </ul>
 *
 *
 * http://schema.org/GiveAction
 */
export declare const GiveAction: Class;
/**
 * GolfCourse
 *
 * A golf course.
 *
 * http://schema.org/GolfCourse
 */
export declare const GolfCourse: Class;
/**
 * GovernmentBuilding
 *
 * A government building.
 *
 * http://schema.org/GovernmentBuilding
 */
export declare const GovernmentBuilding: Class;
/**
 * GovernmentOffice
 *
 * A government office&#x2014;for example, an IRS or DMV office.
 *
 * http://schema.org/GovernmentOffice
 */
export declare const GovernmentOffice: Class;
/**
 * GovernmentOrganization
 *
 * A governmental organization or agency.
 *
 * http://schema.org/GovernmentOrganization
 */
export declare const GovernmentOrganization: Class;
/**
 * GovernmentPermit
 *
 * A permit issued by a government agency.
 *
 * http://schema.org/GovernmentPermit
 */
export declare const GovernmentPermit: Class;
/**
 * GovernmentService
 *
 * A service provided by a government organization, e.g. food stamps, veterans benefits, etc.
 *
 * http://schema.org/GovernmentService
 */
export declare const GovernmentService: Class;
/**
 * GroceryStore
 *
 * A grocery store.
 *
 * http://schema.org/GroceryStore
 */
export declare const GroceryStore: Class;
/**
 * HVACBusiness
 *
 * A business that provide Heating, Ventilation and Air Conditioning services.
 *
 * http://schema.org/HVACBusiness
 */
export declare const HVACBusiness: Class;
/**
 * HairSalon
 *
 * A hair salon.
 *
 * http://schema.org/HairSalon
 */
export declare const HairSalon: Class;
/**
 * HardwareStore
 *
 * A hardware store.
 *
 * http://schema.org/HardwareStore
 */
export declare const HardwareStore: Class;
/**
 * HealthAndBeautyBusiness
 *
 * Health and beauty.
 *
 * http://schema.org/HealthAndBeautyBusiness
 */
export declare const HealthAndBeautyBusiness: Class;
/**
 * HealthClub
 *
 * A health club.
 *
 * http://schema.org/HealthClub
 */
export declare const HealthClub: Class;
/**
 * HighSchool
 *
 * A high school.
 *
 * http://schema.org/HighSchool
 */
export declare const HighSchool: Class;
/**
 * HinduTemple
 *
 * A Hindu temple.
 *
 * http://schema.org/HinduTemple
 */
export declare const HinduTemple: Class;
/**
 * HobbyShop
 *
 * A store that sells materials useful or necessary for various hobbies.
 *
 * http://schema.org/HobbyShop
 */
export declare const HobbyShop: Class;
/**
 * HomeAndConstructionBusiness
 *
 * A construction business.<br/><br/>
 *
 * A HomeAndConstructionBusiness is a <a class="localLink" href="http://schema.org/LocalBusiness">LocalBusiness</a> that provides services around homes and buildings.<br/><br/>
 *
 * As a <a class="localLink" href="http://schema.org/LocalBusiness">LocalBusiness</a> it can be described as a <a class="localLink" href="http://schema.org/provider">provider</a> of one or more <a class="localLink" href="http://schema.org/Service">Service</a>(s).
 *
 * http://schema.org/HomeAndConstructionBusiness
 */
export declare const HomeAndConstructionBusiness: Class;
/**
 * HomeGoodsStore
 *
 * A home goods store.
 *
 * http://schema.org/HomeGoodsStore
 */
export declare const HomeGoodsStore: Class;
/**
 * Hospital
 *
 * A hospital.
 *
 * http://schema.org/Hospital
 */
export declare const Hospital: Class;
/**
 * Hostel
 *
 * A hostel - cheap accommodation, often in shared dormitories.
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 * http://schema.org/Hostel
 */
export declare const Hostel: Class;
/**
 * Hotel
 *
 * A hotel is an establishment that provides lodging paid on a short-term basis (Source: Wikipedia, the free encyclopedia, see http://en.wikipedia.org/wiki/Hotel).
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 * http://schema.org/Hotel
 */
export declare const Hotel: Class;
/**
 * HotelRoom
 *
 * A hotel room is a single room in a hotel.
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 * http://schema.org/HotelRoom
 */
export declare const HotelRoom: Class;
/**
 * House
 *
 * A house is a building or structure that has the ability to be occupied for habitation by humans or other creatures (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/House">http://en.wikipedia.org/wiki/House</a>).
 *
 * http://schema.org/House
 */
export declare const House: Class;
/**
 * HousePainter
 *
 * A house painting service.
 *
 * http://schema.org/HousePainter
 */
export declare const HousePainter: Class;
/**
 * HowTo
 *
 * Instructions that explain how to achieve a result by performing a sequence of steps.
 *
 * http://schema.org/HowTo
 */
export declare const HowTo: Class;
/**
 * HowToDirection
 *
 * A direction indicating a single action to do in the instructions for how to achieve a result.
 *
 * http://schema.org/HowToDirection
 */
export declare const HowToDirection: Class;
/**
 * HowToItem
 *
 * An item used as either a tool or supply when performing the instructions for how to to achieve a result.
 *
 * http://schema.org/HowToItem
 */
export declare const HowToItem: Class;
/**
 * HowToSection
 *
 * A sub-grouping of steps in the instructions for how to achieve a result (e.g. steps for making a pie crust within a pie recipe).
 *
 * http://schema.org/HowToSection
 */
export declare const HowToSection: Class;
/**
 * HowToStep
 *
 * A step in the instructions for how to achieve a result. It is an ordered list with HowToDirection and/or HowToTip items.
 *
 * http://schema.org/HowToStep
 */
export declare const HowToStep: Class;
/**
 * HowToSupply
 *
 * A supply consumed when performing the instructions for how to achieve a result.
 *
 * http://schema.org/HowToSupply
 */
export declare const HowToSupply: Class;
/**
 * HowToTip
 *
 * An explanation in the instructions for how to achieve a result. It provides supplementary information about a technique, supply, author's preference, etc. It can explain what could be done, or what should not be done, but doesn't specify what should be done (see HowToDirection).
 *
 * http://schema.org/HowToTip
 */
export declare const HowToTip: Class;
/**
 * HowToTool
 *
 * A tool used (but not consumed) when performing instructions for how to achieve a result.
 *
 * http://schema.org/HowToTool
 */
export declare const HowToTool: Class;
/**
 * IceCreamShop
 *
 * An ice cream shop.
 *
 * http://schema.org/IceCreamShop
 */
export declare const IceCreamShop: Class;
/**
 * IgnoreAction
 *
 * The act of intentionally disregarding the object. An agent ignores an object.
 *
 * http://schema.org/IgnoreAction
 */
export declare const IgnoreAction: Class;
/**
 * ImageGallery
 *
 * Web page type: Image gallery page.
 *
 * http://schema.org/ImageGallery
 */
export declare const ImageGallery: Class;
/**
 * ImageObject
 *
 * An image file.
 *
 * http://schema.org/ImageObject
 */
export declare const ImageObject: Class;
/**
 * IndividualProduct
 *
 * A single, identifiable product instance (e.g. a laptop with a particular serial number).
 *
 * http://schema.org/IndividualProduct
 */
export declare const IndividualProduct: Class;
/**
 * InformAction
 *
 * The act of notifying someone of information pertinent to them, with no expectation of a response.
 *
 * http://schema.org/InformAction
 */
export declare const InformAction: Class;
/**
 * InsertAction
 *
 * The act of adding at a specific location in an ordered collection.
 *
 * http://schema.org/InsertAction
 */
export declare const InsertAction: Class;
/**
 * InstallAction
 *
 * The act of installing an application.
 *
 * http://schema.org/InstallAction
 */
export declare const InstallAction: Class;
/**
 * InsuranceAgency
 *
 * An Insurance agency.
 *
 * http://schema.org/InsuranceAgency
 */
export declare const InsuranceAgency: Class;
/**
 * Intangible
 *
 * A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc.
 *
 * http://schema.org/Intangible
 */
export declare const Intangible: Class;
/**
 * Integer
 *
 * Data type: Integer.
 *
 * http://schema.org/Integer
 */
export declare const Integer: Class;
/**
 * InteractAction
 *
 * The act of interacting with another person or organization.
 *
 * http://schema.org/InteractAction
 */
export declare const InteractAction: Class;
/**
 * InteractionCounter
 *
 * A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
 *
 * http://schema.org/InteractionCounter
 */
export declare const InteractionCounter: Class;
/**
 * InternetCafe
 *
 * An internet cafe.
 *
 * http://schema.org/InternetCafe
 */
export declare const InternetCafe: Class;
/**
 * InvestmentOrDeposit
 *
 * A type of financial product that typically requires the client to transfer funds to a financial service in return for potential beneficial financial return.
 *
 * http://schema.org/InvestmentOrDeposit
 */
export declare const InvestmentOrDeposit: Class;
/**
 * InviteAction
 *
 * The act of asking someone to attend an event. Reciprocal of RsvpAction.
 *
 * http://schema.org/InviteAction
 */
export declare const InviteAction: Class;
/**
 * Invoice
 *
 * A statement of the money due for goods or services; a bill.
 *
 * http://schema.org/Invoice
 */
export declare const Invoice: Class;
/**
 * ItemAvailability
 *
 * A list of possible product availability options.
 *
 * http://schema.org/ItemAvailability
 */
export declare const ItemAvailability: Class;
/**
 * ItemList
 *
 * A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
 *
 * http://schema.org/ItemList
 */
export declare const ItemList: Class;
/**
 * ItemListOrderType
 *
 * Enumerated for values for itemListOrder for indicating how an ordered ItemList is organized.
 *
 * http://schema.org/ItemListOrderType
 */
export declare const ItemListOrderType: Class;
/**
 * ItemPage
 *
 * A page devoted to a single item, such as a particular product or hotel.
 *
 * http://schema.org/ItemPage
 */
export declare const ItemPage: Class;
/**
 * JewelryStore
 *
 * A jewelry store.
 *
 * http://schema.org/JewelryStore
 */
export declare const JewelryStore: Class;
/**
 * JobPosting
 *
 * A listing that describes a job opening in a certain organization.
 *
 * http://schema.org/JobPosting
 */
export declare const JobPosting: Class;
/**
 * JoinAction
 *
 * An agent joins an event/group with participants/friends at a location.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/RegisterAction">RegisterAction</a>: Unlike RegisterAction, JoinAction refers to joining a group/team of people.</li>
 * <li><a class="localLink" href="http://schema.org/SubscribeAction">SubscribeAction</a>: Unlike SubscribeAction, JoinAction does not imply that you'll be receiving updates.</li>
 * <li><a class="localLink" href="http://schema.org/FollowAction">FollowAction</a>: Unlike FollowAction, JoinAction does not imply that you'll be polling for updates.</li>
 * </ul>
 *
 *
 * http://schema.org/JoinAction
 */
export declare const JoinAction: Class;
/**
 * LakeBodyOfWater
 *
 * A lake (for example, Lake Pontrachain).
 *
 * http://schema.org/LakeBodyOfWater
 */
export declare const LakeBodyOfWater: Class;
/**
 * Landform
 *
 * A landform or physical feature.  Landform elements include mountains, plains, lakes, rivers, seascape and oceanic waterbody interface features such as bays, peninsulas, seas and so forth, including sub-aqueous terrain features such as submersed mountain ranges, volcanoes, and the great ocean basins.
 *
 * http://schema.org/Landform
 */
export declare const Landform: Class;
/**
 * LandmarksOrHistoricalBuildings
 *
 * An historical landmark or building.
 *
 * http://schema.org/LandmarksOrHistoricalBuildings
 */
export declare const LandmarksOrHistoricalBuildings: Class;
/**
 * Language
 *
 * Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in <a href="https://en.wikipedia.org/wiki/IETF_language_tag">BCP 47</a> can be used via the <a class="localLink" href="http://schema.org/alternateName">alternateName</a> property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using <a class="localLink" href="http://schema.org/ComputerLanguage">ComputerLanguage</a>.
 *
 * http://schema.org/Language
 */
export declare const Language: Class;
/**
 * LeaveAction
 *
 * An agent leaves an event / group with participants/friends at a location.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/JoinAction">JoinAction</a>: The antonym of LeaveAction.</li>
 * <li><a class="localLink" href="http://schema.org/UnRegisterAction">UnRegisterAction</a>: Unlike UnRegisterAction, LeaveAction implies leaving a group/team of people rather than a service.</li>
 * </ul>
 *
 *
 * http://schema.org/LeaveAction
 */
export declare const LeaveAction: Class;
/**
 * LegalService
 *
 * A LegalService is a business that provides legally-oriented services, advice and representation, e.g. law firms.<br/><br/>
 *
 * As a <a class="localLink" href="http://schema.org/LocalBusiness">LocalBusiness</a> it can be described as a <a class="localLink" href="http://schema.org/provider">provider</a> of one or more <a class="localLink" href="http://schema.org/Service">Service</a>(s).
 *
 * http://schema.org/LegalService
 */
export declare const LegalService: Class;
/**
 * LegislativeBuilding
 *
 * A legislative building&#x2014;for example, the state capitol.
 *
 * http://schema.org/LegislativeBuilding
 */
export declare const LegislativeBuilding: Class;
/**
 * LendAction
 *
 * The act of providing an object under an agreement that it will be returned at a later date. Reciprocal of BorrowAction.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/BorrowAction">BorrowAction</a>: Reciprocal of LendAction.</li>
 * </ul>
 *
 *
 * http://schema.org/LendAction
 */
export declare const LendAction: Class;
/**
 * Library
 *
 * A library.
 *
 * http://schema.org/Library
 */
export declare const Library: Class;
/**
 * LikeAction
 *
 * The act of expressing a positive sentiment about the object. An agent likes an object (a proposition, topic or theme) with participants.
 *
 * http://schema.org/LikeAction
 */
export declare const LikeAction: Class;
/**
 * LiquorStore
 *
 * A shop that sells alcoholic drinks such as wine, beer, whisky and other spirits.
 *
 * http://schema.org/LiquorStore
 */
export declare const LiquorStore: Class;
/**
 * ListItem
 *
 * An list item, e.g. a step in a checklist or how-to description.
 *
 * http://schema.org/ListItem
 */
export declare const ListItem: Class;
/**
 * ListenAction
 *
 * The act of consuming audio content.
 *
 * http://schema.org/ListenAction
 */
export declare const ListenAction: Class;
/**
 * LiteraryEvent
 *
 * Event type: Literary event.
 *
 * http://schema.org/LiteraryEvent
 */
export declare const LiteraryEvent: Class;
/**
 * LiveBlogPosting
 *
 * A blog post intended to provide a rolling textual coverage of an ongoing event through continuous updates.
 *
 * http://schema.org/LiveBlogPosting
 */
export declare const LiveBlogPosting: Class;
/**
 * LoanOrCredit
 *
 * A financial product for the loaning of an amount of money under agreed terms and charges.
 *
 * http://schema.org/LoanOrCredit
 */
export declare const LoanOrCredit: Class;
/**
 * LocalBusiness
 *
 * A particular physical business or branch of an organization. Examples of LocalBusiness include a restaurant, a particular branch of a restaurant chain, a branch of a bank, a medical practice, a club, a bowling alley, etc.
 *
 * http://schema.org/LocalBusiness
 */
export declare const LocalBusiness: Class;
/**
 * LocationFeatureSpecification
 *
 * Specifies a location feature by providing a structured value representing a feature of an accommodation as a property-value pair of varying degrees of formality.
 *
 * http://schema.org/LocationFeatureSpecification
 */
export declare const LocationFeatureSpecification: Class;
/**
 * LockerDelivery
 *
 * A DeliveryMethod in which an item is made available via locker.
 *
 * http://schema.org/LockerDelivery
 */
export declare const LockerDelivery: Class;
/**
 * Locksmith
 *
 * A locksmith.
 *
 * http://schema.org/Locksmith
 */
export declare const Locksmith: Class;
/**
 * LodgingBusiness
 *
 * A lodging business, such as a motel, hotel, or inn.
 *
 * http://schema.org/LodgingBusiness
 */
export declare const LodgingBusiness: Class;
/**
 * LodgingReservation
 *
 * A reservation for lodging at a hotel, motel, inn, etc.<br/><br/>
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
 *
 * http://schema.org/LodgingReservation
 */
export declare const LodgingReservation: Class;
/**
 * LoseAction
 *
 * The act of being defeated in a competitive activity.
 *
 * http://schema.org/LoseAction
 */
export declare const LoseAction: Class;
/**
 * Map
 *
 * A map.
 *
 * http://schema.org/Map
 */
export declare const Map: Class;
/**
 * MapCategoryType
 *
 * An enumeration of several kinds of Map.
 *
 * http://schema.org/MapCategoryType
 */
export declare const MapCategoryType: Class;
/**
 * MarryAction
 *
 * The act of marrying a person.
 *
 * http://schema.org/MarryAction
 */
export declare const MarryAction: Class;
/**
 * Mass
 *
 * Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
 *
 * http://schema.org/Mass
 */
export declare const Mass: Class;
/**
 * MediaObject
 *
 * A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
 *
 * http://schema.org/MediaObject
 */
export declare const MediaObject: Class;
/**
 * MediaSubscription
 *
 * A subscription which allows a user to access media including audio, video, books, etc.
 *
 * http://schema.org/MediaSubscription
 */
export declare const MediaSubscription: Class;
/**
 * MedicalOrganization
 *
 * A medical organization (physical or not), such as hospital, institution or clinic.
 *
 * http://schema.org/MedicalOrganization
 */
export declare const MedicalOrganization: Class;
/**
 * MeetingRoom
 *
 * A meeting room, conference room, or conference hall is a room provided for singular events such as business conferences and meetings (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Conference_hall">http://en.wikipedia.org/wiki/Conference_hall</a>).
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 * http://schema.org/MeetingRoom
 */
export declare const MeetingRoom: Class;
/**
 * MensClothingStore
 *
 * A men's clothing store.
 *
 * http://schema.org/MensClothingStore
 */
export declare const MensClothingStore: Class;
/**
 * Menu
 *
 * A structured representation of food or drink items available from a FoodEstablishment.
 *
 * http://schema.org/Menu
 */
export declare const Menu: Class;
/**
 * MenuItem
 *
 * A food or drink item listed in a menu or menu section.
 *
 * http://schema.org/MenuItem
 */
export declare const MenuItem: Class;
/**
 * MenuSection
 *
 * A sub-grouping of food or drink items in a menu. E.g. courses (such as 'Dinner', 'Breakfast', etc.), specific type of dishes (such as 'Meat', 'Vegan', 'Drinks', etc.), or some other classification made by the menu provider.
 *
 * http://schema.org/MenuSection
 */
export declare const MenuSection: Class;
/**
 * Message
 *
 * A single message from a sender to one or more organizations or people.
 *
 * http://schema.org/Message
 */
export declare const Message: Class;
/**
 * MiddleSchool
 *
 * A middle school (typically for children aged around 11-14, although this varies somewhat).
 *
 * http://schema.org/MiddleSchool
 */
export declare const MiddleSchool: Class;
/**
 * MobileApplication
 *
 * A software application designed specifically to work well on a mobile device such as a telephone.
 *
 * http://schema.org/MobileApplication
 */
export declare const MobileApplication: Class;
/**
 * MobilePhoneStore
 *
 * A store that sells mobile phones and related accessories.
 *
 * http://schema.org/MobilePhoneStore
 */
export declare const MobilePhoneStore: Class;
/**
 * MonetaryAmount
 *
 * A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use <a class="localLink" href="http://schema.org/PriceSpecification">PriceSpecification</a> Types to describe the price of an Offer, Invoice, etc.
 *
 * http://schema.org/MonetaryAmount
 */
export declare const MonetaryAmount: Class;
/**
 * MonetaryAmountDistribution
 *
 * A statistical distribution of monetary amounts.
 *
 * http://schema.org/MonetaryAmountDistribution
 */
export declare const MonetaryAmountDistribution: Class;
/**
 * Mosque
 *
 * A mosque.
 *
 * http://schema.org/Mosque
 */
export declare const Mosque: Class;
/**
 * Motel
 *
 * A motel.
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 * http://schema.org/Motel
 */
export declare const Motel: Class;
/**
 * MotorcycleDealer
 *
 * A motorcycle dealer.
 *
 * http://schema.org/MotorcycleDealer
 */
export declare const MotorcycleDealer: Class;
/**
 * MotorcycleRepair
 *
 * A motorcycle repair shop.
 *
 * http://schema.org/MotorcycleRepair
 */
export declare const MotorcycleRepair: Class;
/**
 * Mountain
 *
 * A mountain, like Mount Whitney or Mount Everest.
 *
 * http://schema.org/Mountain
 */
export declare const Mountain: Class;
/**
 * MoveAction
 *
 * The act of an agent relocating to a place.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/TransferAction">TransferAction</a>: Unlike TransferAction, the subject of the move is a living Person or Organization rather than an inanimate object.</li>
 * </ul>
 *
 *
 * http://schema.org/MoveAction
 */
export declare const MoveAction: Class;
/**
 * Movie
 *
 * A movie.
 *
 * http://schema.org/Movie
 */
export declare const Movie: Class;
/**
 * MovieClip
 *
 * A short segment/part of a movie.
 *
 * http://schema.org/MovieClip
 */
export declare const MovieClip: Class;
/**
 * MovieRentalStore
 *
 * A movie rental store.
 *
 * http://schema.org/MovieRentalStore
 */
export declare const MovieRentalStore: Class;
/**
 * MovieSeries
 *
 * A series of movies. Included movies can be indicated with the hasPart property.
 *
 * http://schema.org/MovieSeries
 */
export declare const MovieSeries: Class;
/**
 * MovieTheater
 *
 * A movie theater.
 *
 * http://schema.org/MovieTheater
 */
export declare const MovieTheater: Class;
/**
 * MovingCompany
 *
 * A moving company.
 *
 * http://schema.org/MovingCompany
 */
export declare const MovingCompany: Class;
/**
 * Museum
 *
 * A museum.
 *
 * http://schema.org/Museum
 */
export declare const Museum: Class;
/**
 * MusicAlbum
 *
 * A collection of music tracks.
 *
 * http://schema.org/MusicAlbum
 */
export declare const MusicAlbum: Class;
/**
 * MusicAlbumProductionType
 *
 * Classification of the album by it's type of content: soundtrack, live album, studio album, etc.
 *
 * http://schema.org/MusicAlbumProductionType
 */
export declare const MusicAlbumProductionType: Class;
/**
 * MusicAlbumReleaseType
 *
 * The kind of release which this album is: single, EP or album.
 *
 * http://schema.org/MusicAlbumReleaseType
 */
export declare const MusicAlbumReleaseType: Class;
/**
 * MusicComposition
 *
 * A musical composition.
 *
 * http://schema.org/MusicComposition
 */
export declare const MusicComposition: Class;
/**
 * MusicEvent
 *
 * Event type: Music event.
 *
 * http://schema.org/MusicEvent
 */
export declare const MusicEvent: Class;
/**
 * MusicGroup
 *
 * A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician.
 *
 * http://schema.org/MusicGroup
 */
export declare const MusicGroup: Class;
/**
 * MusicPlaylist
 *
 * A collection of music tracks in playlist form.
 *
 * http://schema.org/MusicPlaylist
 */
export declare const MusicPlaylist: Class;
/**
 * MusicRecording
 *
 * A music recording (track), usually a single song.
 *
 * http://schema.org/MusicRecording
 */
export declare const MusicRecording: Class;
/**
 * MusicRelease
 *
 * A MusicRelease is a specific release of a music album.
 *
 * http://schema.org/MusicRelease
 */
export declare const MusicRelease: Class;
/**
 * MusicReleaseFormatType
 *
 * Format of this release (the type of recording media used, ie. compact disc, digital media, LP, etc.).
 *
 * http://schema.org/MusicReleaseFormatType
 */
export declare const MusicReleaseFormatType: Class;
/**
 * MusicStore
 *
 * A music store.
 *
 * http://schema.org/MusicStore
 */
export declare const MusicStore: Class;
/**
 * MusicVenue
 *
 * A music venue.
 *
 * http://schema.org/MusicVenue
 */
export declare const MusicVenue: Class;
/**
 * MusicVideoObject
 *
 * A music video file.
 *
 * http://schema.org/MusicVideoObject
 */
export declare const MusicVideoObject: Class;
/**
 * NGO
 *
 * Organization: Non-governmental Organization.
 *
 * http://schema.org/NGO
 */
export declare const NGO: Class;
/**
 * NailSalon
 *
 * A nail salon.
 *
 * http://schema.org/NailSalon
 */
export declare const NailSalon: Class;
/**
 * NewsArticle
 *
 * A NewsArticle is an article whose content reports news, or provides background context and supporting materials for understanding the news.<br/><br/>
 *
 * A more detailed overview of <a href="/docs/news.html">schema.org News markup</a> is also available.
 *
 * http://schema.org/NewsArticle
 */
export declare const NewsArticle: Class;
/**
 * NightClub
 *
 * A nightclub or discotheque.
 *
 * http://schema.org/NightClub
 */
export declare const NightClub: Class;
/**
 * Notary
 *
 * A notary.
 *
 * http://schema.org/Notary
 */
export declare const Notary: Class;
/**
 * NoteDigitalDocument
 *
 * A file containing a note, primarily for the author.
 *
 * http://schema.org/NoteDigitalDocument
 */
export declare const NoteDigitalDocument: Class;
/**
 * Number
 *
 * Data type: Number.<br/><br/>
 *
 * Usage guidelines:<br/><br/>
 *
 * <ul>
 * <li>Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.</li>
 * <li>Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.</li>
 * </ul>
 *
 *
 * http://schema.org/Number
 */
export declare const Number: string;
/**
 * NutritionInformation
 *
 * Nutritional information about the recipe.
 *
 * http://schema.org/NutritionInformation
 */
export declare const NutritionInformation: Class;
/**
 * Occupation
 *
 * A profession, may involve prolonged training and/or a formal qualification.
 *
 * http://schema.org/Occupation
 */
export declare const Occupation: Class;
/**
 * OceanBodyOfWater
 *
 * An ocean (for example, the Pacific).
 *
 * http://schema.org/OceanBodyOfWater
 */
export declare const OceanBodyOfWater: Class;
/**
 * Offer
 *
 * An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.<br/><br/>
 *
 * For <a href="http://www.gs1.org/barcodes/technical/idkeys/gtin">GTIN</a>-related fields, see <a href="http://www.gs1.org/barcodes/support/check_digit_calculator">Check Digit calculator</a> and <a href="http://www.gs1us.org/resources/standards/gtin-validation-guide">validation guide</a> from <a href="http://www.gs1.org/">GS1</a>.
 *
 * http://schema.org/Offer
 */
export declare const Offer: Class;
/**
 * OfferCatalog
 *
 * An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.
 *
 * http://schema.org/OfferCatalog
 */
export declare const OfferCatalog: Class;
/**
 * OfferItemCondition
 *
 * A list of possible conditions for the item.
 *
 * http://schema.org/OfferItemCondition
 */
export declare const OfferItemCondition: Class;
/**
 * OfficeEquipmentStore
 *
 * An office equipment store.
 *
 * http://schema.org/OfficeEquipmentStore
 */
export declare const OfficeEquipmentStore: Class;
/**
 * OnDemandEvent
 *
 * A publication event e.g. catch-up TV or radio podcast, during which a program is available on-demand.
 *
 * http://schema.org/OnDemandEvent
 */
export declare const OnDemandEvent: Class;
/**
 * OpeningHoursSpecification
 *
 * A structured value providing information about the opening hours of a place or a certain service inside a place.<br/><br/>
 *
 * The place is <strong>open</strong> if the <a class="localLink" href="http://schema.org/opens">opens</a> property is specified, and <strong>closed</strong> otherwise.<br/><br/>
 *
 * If the value for the <a class="localLink" href="http://schema.org/closes">closes</a> property is less than the value for the <a class="localLink" href="http://schema.org/opens">opens</a> property then the hour range is assumed to span over the next day.
 *
 * http://schema.org/OpeningHoursSpecification
 */
export declare const OpeningHoursSpecification: Class;
/**
 * Order
 *
 * An order is a confirmation of a transaction (a receipt), which can contain multiple line items, each represented by an Offer that has been accepted by the customer.
 *
 * http://schema.org/Order
 */
export declare const Order: Class;
/**
 * OrderAction
 *
 * An agent orders an object/product/service to be delivered/sent.
 *
 * http://schema.org/OrderAction
 */
export declare const OrderAction: Class;
/**
 * OrderItem
 *
 * An order item is a line of an order. It includes the quantity and shipping details of a bought offer.
 *
 * http://schema.org/OrderItem
 */
export declare const OrderItem: Class;
/**
 * OrderStatus
 *
 * Enumerated status values for Order.
 *
 * http://schema.org/OrderStatus
 */
export declare const OrderStatus: Class;
/**
 * Organization
 *
 * An organization such as a school, NGO, corporation, club, etc.
 *
 * http://schema.org/Organization
 */
export declare const Organization: Class;
/**
 * OrganizationRole
 *
 * A subclass of Role used to describe roles within organizations.
 *
 * http://schema.org/OrganizationRole
 */
export declare const OrganizationRole: Class;
/**
 * OrganizeAction
 *
 * The act of manipulating/administering/supervising/controlling one or more objects.
 *
 * http://schema.org/OrganizeAction
 */
export declare const OrganizeAction: Class;
/**
 * OutletStore
 *
 * An outlet store.
 *
 * http://schema.org/OutletStore
 */
export declare const OutletStore: Class;
/**
 * OwnershipInfo
 *
 * A structured value providing information about when a certain organization or person owned a certain product.
 *
 * http://schema.org/OwnershipInfo
 */
export declare const OwnershipInfo: Class;
/**
 * PaintAction
 *
 * The act of producing a painting, typically with paint and canvas as instruments.
 *
 * http://schema.org/PaintAction
 */
export declare const PaintAction: Class;
/**
 * Painting
 *
 * A painting.
 *
 * http://schema.org/Painting
 */
export declare const Painting: Class;
/**
 * ParcelDelivery
 *
 * The delivery of a parcel either via the postal service or a commercial service.
 *
 * http://schema.org/ParcelDelivery
 */
export declare const ParcelDelivery: Class;
/**
 * ParcelService
 *
 * A private parcel service as the delivery mode available for a certain offer.<br/><br/>
 *
 * Commonly used values:<br/><br/>
 *
 * <ul>
 * <li>http://purl.org/goodrelations/v1#DHL</li>
 * <li>http://purl.org/goodrelations/v1#FederalExpress</li>
 * <li>http://purl.org/goodrelations/v1#UPS</li>
 * </ul>
 *
 *
 * http://schema.org/ParcelService
 */
export declare const ParcelService: Class;
/**
 * ParentAudience
 *
 * A set of characteristics describing parents, who can be interested in viewing some content.
 *
 * http://schema.org/ParentAudience
 */
export declare const ParentAudience: Class;
/**
 * Park
 *
 * A park.
 *
 * http://schema.org/Park
 */
export declare const Park: Class;
/**
 * ParkingFacility
 *
 * A parking lot or other parking facility.
 *
 * http://schema.org/ParkingFacility
 */
export declare const ParkingFacility: Class;
/**
 * PawnShop
 *
 * A shop that will buy, or lend money against the security of, personal possessions.
 *
 * http://schema.org/PawnShop
 */
export declare const PawnShop: Class;
/**
 * PayAction
 *
 * An agent pays a price to a participant.
 *
 * http://schema.org/PayAction
 */
export declare const PayAction: Class;
/**
 * PaymentCard
 *
 * A payment method using a credit, debit, store or other card to associate the payment with an account.
 *
 * http://schema.org/PaymentCard
 */
export declare const PaymentCard: Class;
/**
 * PaymentChargeSpecification
 *
 * The costs of settling the payment using a particular payment method.
 *
 * http://schema.org/PaymentChargeSpecification
 */
export declare const PaymentChargeSpecification: Class;
/**
 * PaymentMethod
 *
 * A payment method is a standardized procedure for transferring the monetary amount for a purchase. Payment methods are characterized by the legal and technical structures used, and by the organization or group carrying out the transaction.<br/><br/>
 *
 * Commonly used values:<br/><br/>
 *
 * <ul>
 * <li>http://purl.org/goodrelations/v1#ByBankTransferInAdvance</li>
 * <li>http://purl.org/goodrelations/v1#ByInvoice</li>
 * <li>http://purl.org/goodrelations/v1#Cash</li>
 * <li>http://purl.org/goodrelations/v1#CheckInAdvance</li>
 * <li>http://purl.org/goodrelations/v1#COD</li>
 * <li>http://purl.org/goodrelations/v1#DirectDebit</li>
 * <li>http://purl.org/goodrelations/v1#GoogleCheckout</li>
 * <li>http://purl.org/goodrelations/v1#PayPal</li>
 * <li>http://purl.org/goodrelations/v1#PaySwarm</li>
 * </ul>
 *
 *
 * http://schema.org/PaymentMethod
 */
export declare const PaymentMethod: Class;
/**
 * PaymentService
 *
 * A Service to transfer funds from a person or organization to a beneficiary person or organization.
 *
 * http://schema.org/PaymentService
 */
export declare const PaymentService: Class;
/**
 * PaymentStatusType
 *
 * A specific payment status. For example, PaymentDue, PaymentComplete, etc.
 *
 * http://schema.org/PaymentStatusType
 */
export declare const PaymentStatusType: Class;
/**
 * PeopleAudience
 *
 * A set of characteristics belonging to people, e.g. who compose an item's target audience.
 *
 * http://schema.org/PeopleAudience
 */
export declare const PeopleAudience: Class;
/**
 * PerformAction
 *
 * The act of participating in performance arts.
 *
 * http://schema.org/PerformAction
 */
export declare const PerformAction: Class;
/**
 * PerformanceRole
 *
 * A PerformanceRole is a Role that some entity places with regard to a theatrical performance, e.g. in a Movie, TVSeries etc.
 *
 * http://schema.org/PerformanceRole
 */
export declare const PerformanceRole: Class;
/**
 * PerformingArtsTheater
 *
 * A theater or other performing art center.
 *
 * http://schema.org/PerformingArtsTheater
 */
export declare const PerformingArtsTheater: Class;
/**
 * PerformingGroup
 *
 * A performance group, such as a band, an orchestra, or a circus.
 *
 * http://schema.org/PerformingGroup
 */
export declare const PerformingGroup: Class;
/**
 * Periodical
 *
 * A publication in any medium issued in successive parts bearing numerical or chronological designations and intended, such as a magazine, scholarly journal, or newspaper to continue indefinitely.<br/><br/>
 *
 * See also <a href="http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html">blog post</a>.
 *
 * http://schema.org/Periodical
 */
export declare const Periodical: Class;
/**
 * Permit
 *
 * A permit issued by an organization, e.g. a parking pass.
 *
 * http://schema.org/Permit
 */
export declare const Permit: Class;
/**
 * Person
 *
 * A person (alive, dead, undead, or fictional).
 *
 * http://schema.org/Person
 */
export declare const Person: Class;
/**
 * PetStore
 *
 * A pet store.
 *
 * http://schema.org/PetStore
 */
export declare const PetStore: Class;
/**
 * Pharmacy
 *
 * A pharmacy or drugstore.
 *
 * http://schema.org/Pharmacy
 */
export declare const Pharmacy: Class;
/**
 * Photograph
 *
 * A photograph.
 *
 * http://schema.org/Photograph
 */
export declare const Photograph: Class;
/**
 * PhotographAction
 *
 * The act of capturing still images of objects using a camera.
 *
 * http://schema.org/PhotographAction
 */
export declare const PhotographAction: Class;
/**
 * Physician
 *
 * A doctor's office.
 *
 * http://schema.org/Physician
 */
export declare const Physician: Class;
/**
 * Place
 *
 * Entities that have a somewhat fixed, physical extension.
 *
 * http://schema.org/Place
 */
export declare const Place: Class;
/**
 * PlaceOfWorship
 *
 * Place of worship, such as a church, synagogue, or mosque.
 *
 * http://schema.org/PlaceOfWorship
 */
export declare const PlaceOfWorship: Class;
/**
 * PlanAction
 *
 * The act of planning the execution of an event/task/action/reservation/plan to a future date.
 *
 * http://schema.org/PlanAction
 */
export declare const PlanAction: Class;
/**
 * PlayAction
 *
 * The act of playing/exercising/training/performing for enjoyment, leisure, recreation, Competition or exercise.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/ListenAction">ListenAction</a>: Unlike ListenAction (which is under ConsumeAction), PlayAction refers to performing for an audience or at an event, rather than consuming music.</li>
 * <li><a class="localLink" href="http://schema.org/WatchAction">WatchAction</a>: Unlike WatchAction (which is under ConsumeAction), PlayAction refers to showing/displaying for an audience or at an event, rather than consuming visual content.</li>
 * </ul>
 *
 *
 * http://schema.org/PlayAction
 */
export declare const PlayAction: Class;
/**
 * Playground
 *
 * A playground.
 *
 * http://schema.org/Playground
 */
export declare const Playground: Class;
/**
 * Plumber
 *
 * A plumbing service.
 *
 * http://schema.org/Plumber
 */
export declare const Plumber: Class;
/**
 * PoliceStation
 *
 * A police station.
 *
 * http://schema.org/PoliceStation
 */
export declare const PoliceStation: Class;
/**
 * Pond
 *
 * A pond.
 *
 * http://schema.org/Pond
 */
export declare const Pond: Class;
/**
 * PostOffice
 *
 * A post office.
 *
 * http://schema.org/PostOffice
 */
export declare const PostOffice: Class;
/**
 * PostalAddress
 *
 * The mailing address.
 *
 * http://schema.org/PostalAddress
 */
export declare const PostalAddress: Class;
/**
 * PreOrderAction
 *
 * An agent orders a (not yet released) object/product/service to be delivered/sent.
 *
 * http://schema.org/PreOrderAction
 */
export declare const PreOrderAction: Class;
/**
 * PrependAction
 *
 * The act of inserting at the beginning if an ordered collection.
 *
 * http://schema.org/PrependAction
 */
export declare const PrependAction: Class;
/**
 * Preschool
 *
 * A preschool.
 *
 * http://schema.org/Preschool
 */
export declare const Preschool: Class;
/**
 * PresentationDigitalDocument
 *
 * A file containing slides or used for a presentation.
 *
 * http://schema.org/PresentationDigitalDocument
 */
export declare const PresentationDigitalDocument: Class;
/**
 * PriceSpecification
 *
 * A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use <a class="localLink" href="http://schema.org/MonetaryAmount">MonetaryAmount</a> to describe independent amounts of money such as a salary, credit card limits, etc.
 *
 * http://schema.org/PriceSpecification
 */
export declare const PriceSpecification: Class;
/**
 * Product
 *
 * Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
 *
 * http://schema.org/Product
 */
export declare const Product: Class;
/**
 * ProductModel
 *
 * A datasheet or vendor specification of a product (in the sense of a prototypical description).
 *
 * http://schema.org/ProductModel
 */
export declare const ProductModel: Class;
/**
 * ProfessionalService
 *
 * Original definition: "provider of professional services."<br/><br/>
 *
 * The general <a class="localLink" href="http://schema.org/ProfessionalService">ProfessionalService</a> type for local businesses was deprecated due to confusion with <a class="localLink" href="http://schema.org/Service">Service</a>. For reference, the types that it included were: <a class="localLink" href="http://schema.org/Dentist">Dentist</a>,
 *         <a class="localLink" href="http://schema.org/AccountingService">AccountingService</a>, <a class="localLink" href="http://schema.org/Attorney">Attorney</a>, <a class="localLink" href="http://schema.org/Notary">Notary</a>, as well as types for several kinds of <a class="localLink" href="http://schema.org/HomeAndConstructionBusiness">HomeAndConstructionBusiness</a>: <a class="localLink" href="http://schema.org/Electrician">Electrician</a>, <a class="localLink" href="http://schema.org/GeneralContractor">GeneralContractor</a>,
 *         <a class="localLink" href="http://schema.org/HousePainter">HousePainter</a>, <a class="localLink" href="http://schema.org/Locksmith">Locksmith</a>, <a class="localLink" href="http://schema.org/Plumber">Plumber</a>, <a class="localLink" href="http://schema.org/RoofingContractor">RoofingContractor</a>. <a class="localLink" href="http://schema.org/LegalService">LegalService</a> was introduced as a more inclusive supertype of <a class="localLink" href="http://schema.org/Attorney">Attorney</a>.
 *
 * http://schema.org/ProfessionalService
 */
export declare const ProfessionalService: Class;
/**
 * ProfilePage
 *
 * Web page type: Profile page.
 *
 * http://schema.org/ProfilePage
 */
export declare const ProfilePage: Class;
/**
 * ProgramMembership
 *
 * Used to describe membership in a loyalty programs (e.g. "StarAliance"), traveler clubs (e.g. "AAA"), purchase clubs ("Safeway Club"), etc.
 *
 * http://schema.org/ProgramMembership
 */
export declare const ProgramMembership: Class;
/**
 * PropertyValue
 *
 * A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.<br/><br/>
 *
 * Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.
 *
 * http://schema.org/PropertyValue
 */
export declare const PropertyValue: Class;
/**
 * PropertyValueSpecification
 *
 * A Property value specification.
 *
 * http://schema.org/PropertyValueSpecification
 */
export declare const PropertyValueSpecification: Class;
/**
 * PublicSwimmingPool
 *
 * A public swimming pool.
 *
 * http://schema.org/PublicSwimmingPool
 */
export declare const PublicSwimmingPool: Class;
/**
 * PublicationEvent
 *
 * A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
 *
 * http://schema.org/PublicationEvent
 */
export declare const PublicationEvent: Class;
/**
 * PublicationIssue
 *
 * A part of a successively published publication such as a periodical or publication volume, often numbered, usually containing a grouping of works such as articles.<br/><br/>
 *
 * See also <a href="http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html">blog post</a>.
 *
 * http://schema.org/PublicationIssue
 */
export declare const PublicationIssue: Class;
/**
 * PublicationVolume
 *
 * A part of a successively published publication such as a periodical or multi-volume work, often numbered. It may represent a time span, such as a year.<br/><br/>
 *
 * See also <a href="http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html">blog post</a>.
 *
 * http://schema.org/PublicationVolume
 */
export declare const PublicationVolume: Class;
/**
 * QAPage
 *
 * A QAPage is a WebPage focussed on a specific Question and its Answer(s), e.g. in a question answering site or documenting Frequently Asked Questions (FAQs).
 *
 * http://schema.org/QAPage
 */
export declare const QAPage: Class;
/**
 * QualitativeValue
 *
 * A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
 *
 * http://schema.org/QualitativeValue
 */
export declare const QualitativeValue: Class;
/**
 * QuantitativeValue
 *
 * A point value or interval for product characteristics and other purposes.
 *
 * http://schema.org/QuantitativeValue
 */
export declare const QuantitativeValue: Class;
/**
 * QuantitativeValueDistribution
 *
 * A statistical distribution of values.
 *
 * http://schema.org/QuantitativeValueDistribution
 */
export declare const QuantitativeValueDistribution: Class;
/**
 * Quantity
 *
 * Quantities such as distance, time, mass, weight, etc. Particular instances of say Mass are entities like '3 Kg' or '4 milligrams'.
 *
 * http://schema.org/Quantity
 */
export declare const Quantity: Class;
/**
 * Question
 *
 * A specific question - e.g. from a user seeking answers online, or collected in a Frequently Asked Questions (FAQ) document.
 *
 * http://schema.org/Question
 */
export declare const Question: Class;
/**
 * QuoteAction
 *
 * An agent quotes/estimates/appraises an object/product/service with a price at a location/store.
 *
 * http://schema.org/QuoteAction
 */
export declare const QuoteAction: Class;
/**
 * RVPark
 *
 * A place offering space for "Recreational Vehicles", Caravans, mobile homes and the like.
 *
 * http://schema.org/RVPark
 */
export declare const RVPark: Class;
/**
 * RadioChannel
 *
 * A unique instance of a radio BroadcastService on a CableOrSatelliteService lineup.
 *
 * http://schema.org/RadioChannel
 */
export declare const RadioChannel: Class;
/**
 * RadioClip
 *
 * A short radio program or a segment/part of a radio program.
 *
 * http://schema.org/RadioClip
 */
export declare const RadioClip: Class;
/**
 * RadioEpisode
 *
 * A radio episode which can be part of a series or season.
 *
 * http://schema.org/RadioEpisode
 */
export declare const RadioEpisode: Class;
/**
 * RadioSeason
 *
 * Season dedicated to radio broadcast and associated online delivery.
 *
 * http://schema.org/RadioSeason
 */
export declare const RadioSeason: Class;
/**
 * RadioSeries
 *
 * CreativeWorkSeries dedicated to radio broadcast and associated online delivery.
 *
 * http://schema.org/RadioSeries
 */
export declare const RadioSeries: Class;
/**
 * RadioStation
 *
 * A radio station.
 *
 * http://schema.org/RadioStation
 */
export declare const RadioStation: Class;
/**
 * Rating
 *
 * A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
 *
 * http://schema.org/Rating
 */
export declare const Rating: Class;
/**
 * ReactAction
 *
 * The act of responding instinctively and emotionally to an object, expressing a sentiment.
 *
 * http://schema.org/ReactAction
 */
export declare const ReactAction: Class;
/**
 * ReadAction
 *
 * The act of consuming written content.
 *
 * http://schema.org/ReadAction
 */
export declare const ReadAction: Class;
/**
 * RealEstateAgent
 *
 * A real-estate agent.
 *
 * http://schema.org/RealEstateAgent
 */
export declare const RealEstateAgent: Class;
/**
 * ReceiveAction
 *
 * The act of physically/electronically taking delivery of an object thathas been transferred from an origin to a destination. Reciprocal of SendAction.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/SendAction">SendAction</a>: The reciprocal of ReceiveAction.</li>
 * <li><a class="localLink" href="http://schema.org/TakeAction">TakeAction</a>: Unlike TakeAction, ReceiveAction does not imply that the ownership has been transfered (e.g. I can receive a package, but it does not mean the package is now mine).</li>
 * </ul>
 *
 *
 * http://schema.org/ReceiveAction
 */
export declare const ReceiveAction: Class;
/**
 * Recipe
 *
 * A recipe. For dietary restrictions covered by the recipe, a few common restrictions are enumerated via <a class="localLink" href="http://schema.org/suitableForDiet">suitableForDiet</a>. The <a class="localLink" href="http://schema.org/keywords">keywords</a> property can also be used to add more detail.
 *
 * http://schema.org/Recipe
 */
export declare const Recipe: Class;
/**
 * RecyclingCenter
 *
 * A recycling center.
 *
 * http://schema.org/RecyclingCenter
 */
export declare const RecyclingCenter: Class;
/**
 * RegisterAction
 *
 * The act of registering to be a user of a service, product or web page.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/JoinAction">JoinAction</a>: Unlike JoinAction, RegisterAction implies you are registering to be a user of a service, <em>not</em> a group/team of people.</li>
 * <li>[FollowAction]]: Unlike FollowAction, RegisterAction doesn't imply that the agent is expecting to poll for updates from the object.</li>
 * <li><a class="localLink" href="http://schema.org/SubscribeAction">SubscribeAction</a>: Unlike SubscribeAction, RegisterAction doesn't imply that the agent is expecting updates from the object.</li>
 * </ul>
 *
 *
 * http://schema.org/RegisterAction
 */
export declare const RegisterAction: Class;
/**
 * RejectAction
 *
 * The act of rejecting to/adopting an object.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/AcceptAction">AcceptAction</a>: The antonym of RejectAction.</li>
 * </ul>
 *
 *
 * http://schema.org/RejectAction
 */
export declare const RejectAction: Class;
/**
 * RentAction
 *
 * The act of giving money in return for temporary use, but not ownership, of an object such as a vehicle or property. For example, an agent rents a property from a landlord in exchange for a periodic payment.
 *
 * http://schema.org/RentAction
 */
export declare const RentAction: Class;
/**
 * RentalCarReservation
 *
 * A reservation for a rental car.<br/><br/>
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
 *
 * http://schema.org/RentalCarReservation
 */
export declare const RentalCarReservation: Class;
/**
 * ReplaceAction
 *
 * The act of editing a recipient by replacing an old object with a new object.
 *
 * http://schema.org/ReplaceAction
 */
export declare const ReplaceAction: Class;
/**
 * ReplyAction
 *
 * The act of responding to a question/message asked/sent by the object. Related to <a class="localLink" href="http://schema.org/AskAction">AskAction</a><br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/AskAction">AskAction</a>: Appears generally as an origin of a ReplyAction.</li>
 * </ul>
 *
 *
 * http://schema.org/ReplyAction
 */
export declare const ReplyAction: Class;
/**
 * Report
 *
 * A Report generated by governmental or non-governmental organization.
 *
 * http://schema.org/Report
 */
export declare const Report: Class;
/**
 * Reservation
 *
 * Describes a reservation for travel, dining or an event. Some reservations require tickets. <br/><br/>
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, restaurant reservations, flights, or rental cars, use <a class="localLink" href="http://schema.org/Offer">Offer</a>.
 *
 * http://schema.org/Reservation
 */
export declare const Reservation: Class;
/**
 * ReservationPackage
 *
 * A group of multiple reservations with common values for all sub-reservations.
 *
 * http://schema.org/ReservationPackage
 */
export declare const ReservationPackage: Class;
/**
 * ReservationStatusType
 *
 * Enumerated status values for Reservation.
 *
 * http://schema.org/ReservationStatusType
 */
export declare const ReservationStatusType: Class;
/**
 * ReserveAction
 *
 * Reserving a concrete object.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/ScheduleAction">ScheduleAction</a></a>: Unlike ScheduleAction, ReserveAction reserves concrete objects (e.g. a table, a hotel) towards a time slot / spatial allocation.</li>
 * </ul>
 *
 *
 * http://schema.org/ReserveAction
 */
export declare const ReserveAction: Class;
/**
 * Reservoir
 *
 * A reservoir of water, typically an artificially created lake, like the Lake Kariba reservoir.
 *
 * http://schema.org/Reservoir
 */
export declare const Reservoir: Class;
/**
 * Residence
 *
 * The place where a person lives.
 *
 * http://schema.org/Residence
 */
export declare const Residence: Class;
/**
 * Resort
 *
 * A resort is a place used for relaxation or recreation, attracting visitors for holidays or vacations. Resorts are places, towns or sometimes commercial establishment operated by a single company (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Resort">http://en.wikipedia.org/wiki/Resort</a>).
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 * http://schema.org/Resort
 */
export declare const Resort: Class;
/**
 * Restaurant
 *
 * A restaurant.
 *
 * http://schema.org/Restaurant
 */
export declare const Restaurant: Class;
/**
 * RestrictedDiet
 *
 * A diet restricted to certain foods or preparations for cultural, religious, health or lifestyle reasons.
 *
 * http://schema.org/RestrictedDiet
 */
export declare const RestrictedDiet: Class;
/**
 * ResumeAction
 *
 * The act of resuming a device or application which was formerly paused (e.g. resume music playback or resume a timer).
 *
 * http://schema.org/ResumeAction
 */
export declare const ResumeAction: Class;
/**
 * ReturnAction
 *
 * The act of returning to the origin that which was previously received (concrete objects) or taken (ownership).
 *
 * http://schema.org/ReturnAction
 */
export declare const ReturnAction: Class;
/**
 * Review
 *
 * A review of an item - for example, of a restaurant, movie, or store.
 *
 * http://schema.org/Review
 */
export declare const Review: Class;
/**
 * ReviewAction
 *
 * The act of producing a balanced opinion about the object for an audience. An agent reviews an object with participants resulting in a review.
 *
 * http://schema.org/ReviewAction
 */
export declare const ReviewAction: Class;
/**
 * RiverBodyOfWater
 *
 * A river (for example, the broad majestic Shannon).
 *
 * http://schema.org/RiverBodyOfWater
 */
export declare const RiverBodyOfWater: Class;
/**
 * Role
 *
 * Represents additional information about a relationship or property. For example a Role can be used to say that a 'member' role linking some SportsTeam to a player occurred during a particular time period. Or that a Person's 'actor' role in a Movie was for some particular characterName. Such properties can be attached to a Role entity, which is then associated with the main entities using ordinary properties like 'member' or 'actor'.<br/><br/>
 *
 * See also <a href="http://blog.schema.org/2014/06/introducing-role.html">blog post</a>.
 *
 * http://schema.org/Role
 */
export declare const Role: Class;
/**
 * RoofingContractor
 *
 * A roofing contractor.
 *
 * http://schema.org/RoofingContractor
 */
export declare const RoofingContractor: Class;
/**
 * Room
 *
 * A room is a distinguishable space within a structure, usually separated from other spaces by interior walls. (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Room">http://en.wikipedia.org/wiki/Room</a>).
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 * http://schema.org/Room
 */
export declare const Room: Class;
/**
 * RsvpAction
 *
 * The act of notifying an event organizer as to whether you expect to attend the event.
 *
 * http://schema.org/RsvpAction
 */
export declare const RsvpAction: Class;
/**
 * RsvpResponseType
 *
 * RsvpResponseType is an enumeration type whose instances represent responding to an RSVP request.
 *
 * http://schema.org/RsvpResponseType
 */
export declare const RsvpResponseType: Class;
/**
 * SaleEvent
 *
 * Event type: Sales event.
 *
 * http://schema.org/SaleEvent
 */
export declare const SaleEvent: Class;
/**
 * ScheduleAction
 *
 * Scheduling future actions, events, or tasks.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/ReserveAction">ReserveAction</a>: Unlike ReserveAction, ScheduleAction allocates future actions (e.g. an event, a task, etc) towards a time slot / spatial allocation.</li>
 * </ul>
 *
 *
 * http://schema.org/ScheduleAction
 */
export declare const ScheduleAction: Class;
/**
 * ScholarlyArticle
 *
 * A scholarly article.
 *
 * http://schema.org/ScholarlyArticle
 */
export declare const ScholarlyArticle: Class;
/**
 * School
 *
 * A school.
 *
 * http://schema.org/School
 */
export declare const School: Class;
/**
 * ScreeningEvent
 *
 * A screening of a movie or other video.
 *
 * http://schema.org/ScreeningEvent
 */
export declare const ScreeningEvent: Class;
/**
 * Sculpture
 *
 * A piece of sculpture.
 *
 * http://schema.org/Sculpture
 */
export declare const Sculpture: Class;
/**
 * SeaBodyOfWater
 *
 * A sea (for example, the Caspian sea).
 *
 * http://schema.org/SeaBodyOfWater
 */
export declare const SeaBodyOfWater: Class;
/**
 * SearchAction
 *
 * The act of searching for an object.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/FindAction">FindAction</a>: SearchAction generally leads to a FindAction, but not necessarily.</li>
 * </ul>
 *
 *
 * http://schema.org/SearchAction
 */
export declare const SearchAction: Class;
/**
 * SearchResultsPage
 *
 * Web page type: Search results page.
 *
 * http://schema.org/SearchResultsPage
 */
export declare const SearchResultsPage: Class;
/**
 * Season
 *
 * A media season e.g. tv, radio, video game etc.
 *
 * http://schema.org/Season
 */
export declare const Season: Class;
/**
 * Seat
 *
 * Used to describe a seat, such as a reserved seat in an event reservation.
 *
 * http://schema.org/Seat
 */
export declare const Seat: Class;
/**
 * SelfStorage
 *
 * A self-storage facility.
 *
 * http://schema.org/SelfStorage
 */
export declare const SelfStorage: Class;
/**
 * SellAction
 *
 * The act of taking money from a buyer in exchange for goods or services rendered. An agent sells an object, product, or service to a buyer for a price. Reciprocal of BuyAction.
 *
 * http://schema.org/SellAction
 */
export declare const SellAction: Class;
/**
 * SendAction
 *
 * The act of physically/electronically dispatching an object for transfer from an origin to a destination.Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/ReceiveAction">ReceiveAction</a>: The reciprocal of SendAction.</li>
 * <li><a class="localLink" href="http://schema.org/GiveAction">GiveAction</a>: Unlike GiveAction, SendAction does not imply the transfer of ownership (e.g. I can send you my laptop, but I'm not necessarily giving it to you).</li>
 * </ul>
 *
 *
 * http://schema.org/SendAction
 */
export declare const SendAction: Class;
/**
 * Series
 *
 * A Series in schema.org is a group of related items, typically but not necessarily of the same kind. See also <a class="localLink" href="http://schema.org/CreativeWorkSeries">CreativeWorkSeries</a>, <a class="localLink" href="http://schema.org/EventSeries">EventSeries</a>.
 *
 * http://schema.org/Series
 */
export declare const Series: Class;
/**
 * Service
 *
 * A service provided by an organization, e.g. delivery service, print services, etc.
 *
 * http://schema.org/Service
 */
export declare const Service: Class;
/**
 * ServiceChannel
 *
 * A means for accessing a service, e.g. a government office location, web site, or phone number.
 *
 * http://schema.org/ServiceChannel
 */
export declare const ServiceChannel: Class;
/**
 * ShareAction
 *
 * The act of distributing content to people for their amusement or edification.
 *
 * http://schema.org/ShareAction
 */
export declare const ShareAction: Class;
/**
 * ShoeStore
 *
 * A shoe store.
 *
 * http://schema.org/ShoeStore
 */
export declare const ShoeStore: Class;
/**
 * ShoppingCenter
 *
 * A shopping center or mall.
 *
 * http://schema.org/ShoppingCenter
 */
export declare const ShoppingCenter: Class;
/**
 * SingleFamilyResidence
 *
 * Residence type: Single-family home.
 *
 * http://schema.org/SingleFamilyResidence
 */
export declare const SingleFamilyResidence: Class;
/**
 * SiteNavigationElement
 *
 * A navigation element of the page.
 *
 * http://schema.org/SiteNavigationElement
 */
export declare const SiteNavigationElement: Class;
/**
 * SkiResort
 *
 * A ski resort.
 *
 * http://schema.org/SkiResort
 */
export declare const SkiResort: Class;
/**
 * SocialEvent
 *
 * Event type: Social event.
 *
 * http://schema.org/SocialEvent
 */
export declare const SocialEvent: Class;
/**
 * SocialMediaPosting
 *
 * A post to a social media platform, including blog posts, tweets, Facebook posts, etc.
 *
 * http://schema.org/SocialMediaPosting
 */
export declare const SocialMediaPosting: Class;
/**
 * SoftwareApplication
 *
 * A software application.
 *
 * http://schema.org/SoftwareApplication
 */
export declare const SoftwareApplication: Class;
/**
 * SoftwareSourceCode
 *
 * Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.
 *
 * http://schema.org/SoftwareSourceCode
 */
export declare const SoftwareSourceCode: Class;
/**
 * SomeProducts
 *
 * A placeholder for multiple similar products of the same kind.
 *
 * http://schema.org/SomeProducts
 */
export declare const SomeProducts: Class;
/**
 * SpeakableSpecification
 *
 * A SpeakableSpecification indicates (typically via <a class="localLink" href="http://schema.org/xpath">xpath</a> or <a class="localLink" href="http://schema.org/cssSelector">cssSelector</a>) sections of a document that are highlighted as particularly <a class="localLink" href="http://schema.org/speakable">speakable</a>. Instances of this type are expected to be used primarily as values of the <a class="localLink" href="http://schema.org/speakable">speakable</a> property.
 *
 * http://schema.org/SpeakableSpecification
 */
export declare const SpeakableSpecification: Class;
/**
 * Specialty
 *
 * Any branch of a field in which people typically develop specific expertise, usually after significant study, time, and effort.
 *
 * http://schema.org/Specialty
 */
export declare const Specialty: Class;
/**
 * SportingGoodsStore
 *
 * A sporting goods store.
 *
 * http://schema.org/SportingGoodsStore
 */
export declare const SportingGoodsStore: Class;
/**
 * SportsActivityLocation
 *
 * A sports location, such as a playing field.
 *
 * http://schema.org/SportsActivityLocation
 */
export declare const SportsActivityLocation: Class;
/**
 * SportsClub
 *
 * A sports club.
 *
 * http://schema.org/SportsClub
 */
export declare const SportsClub: Class;
/**
 * SportsEvent
 *
 * Event type: Sports event.
 *
 * http://schema.org/SportsEvent
 */
export declare const SportsEvent: Class;
/**
 * SportsOrganization
 *
 * Represents the collection of all sports organizations, including sports teams, governing bodies, and sports associations.
 *
 * http://schema.org/SportsOrganization
 */
export declare const SportsOrganization: Class;
/**
 * SportsTeam
 *
 * Organization: Sports team.
 *
 * http://schema.org/SportsTeam
 */
export declare const SportsTeam: Class;
/**
 * SpreadsheetDigitalDocument
 *
 * A spreadsheet file.
 *
 * http://schema.org/SpreadsheetDigitalDocument
 */
export declare const SpreadsheetDigitalDocument: Class;
/**
 * StadiumOrArena
 *
 * A stadium.
 *
 * http://schema.org/StadiumOrArena
 */
export declare const StadiumOrArena: Class;
/**
 * State
 *
 * A state or province of a country.
 *
 * http://schema.org/State
 */
export declare const State: Class;
/**
 * SteeringPositionValue
 *
 * A value indicating a steering position.
 *
 * http://schema.org/SteeringPositionValue
 */
export declare const SteeringPositionValue: Class;
/**
 * Store
 *
 * A retail good store.
 *
 * http://schema.org/Store
 */
export declare const Store: Class;
/**
 * StructuredValue
 *
 * Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
 *
 * http://schema.org/StructuredValue
 */
export declare const StructuredValue: Class;
/**
 * SubscribeAction
 *
 * The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates pushed to.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/FollowAction">FollowAction</a>: Unlike FollowAction, SubscribeAction implies that the subscriber acts as a passive agent being constantly/actively pushed for updates.</li>
 * <li><a class="localLink" href="http://schema.org/RegisterAction">RegisterAction</a>: Unlike RegisterAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.</li>
 * <li><a class="localLink" href="http://schema.org/JoinAction">JoinAction</a>: Unlike JoinAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.</li>
 * </ul>
 *
 *
 * http://schema.org/SubscribeAction
 */
export declare const SubscribeAction: Class;
/**
 * SubwayStation
 *
 * A subway station.
 *
 * http://schema.org/SubwayStation
 */
export declare const SubwayStation: Class;
/**
 * Suite
 *
 * A suite in a hotel or other public accommodation, denotes a class of luxury accommodations, the key feature of which is multiple rooms (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Suite_(hotel)">http://en.wikipedia.org/wiki/Suite_(hotel)</a>).
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 * http://schema.org/Suite
 */
export declare const Suite: Class;
/**
 * SuspendAction
 *
 * The act of momentarily pausing a device or application (e.g. pause music playback or pause a timer).
 *
 * http://schema.org/SuspendAction
 */
export declare const SuspendAction: Class;
/**
 * Synagogue
 *
 * A synagogue.
 *
 * http://schema.org/Synagogue
 */
export declare const Synagogue: Class;
/**
 * TVClip
 *
 * A short TV program or a segment/part of a TV program.
 *
 * http://schema.org/TVClip
 */
export declare const TVClip: Class;
/**
 * TVEpisode
 *
 * A TV episode which can be part of a series or season.
 *
 * http://schema.org/TVEpisode
 */
export declare const TVEpisode: Class;
/**
 * TVSeason
 *
 * Season dedicated to TV broadcast and associated online delivery.
 *
 * http://schema.org/TVSeason
 */
export declare const TVSeason: Class;
/**
 * TVSeries
 *
 * CreativeWorkSeries dedicated to TV broadcast and associated online delivery.
 *
 * http://schema.org/TVSeries
 */
export declare const TVSeries: Class;
/**
 * Table
 *
 * A table on a Web page.
 *
 * http://schema.org/Table
 */
export declare const Table: Class;
/**
 * TakeAction
 *
 * The act of gaining ownership of an object from an origin. Reciprocal of GiveAction.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/GiveAction">GiveAction</a>: The reciprocal of TakeAction.</li>
 * <li><a class="localLink" href="http://schema.org/ReceiveAction">ReceiveAction</a>: Unlike ReceiveAction, TakeAction implies that ownership has been transfered.</li>
 * </ul>
 *
 *
 * http://schema.org/TakeAction
 */
export declare const TakeAction: Class;
/**
 * TattooParlor
 *
 * A tattoo parlor.
 *
 * http://schema.org/TattooParlor
 */
export declare const TattooParlor: Class;
/**
 * Taxi
 *
 * A taxi.
 *
 * http://schema.org/Taxi
 */
export declare const Taxi: Class;
/**
 * TaxiReservation
 *
 * A reservation for a taxi.<br/><br/>
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use <a class="localLink" href="http://schema.org/Offer">Offer</a>.
 *
 * http://schema.org/TaxiReservation
 */
export declare const TaxiReservation: Class;
/**
 * TaxiService
 *
 * A service for a vehicle for hire with a driver for local travel. Fares are usually calculated based on distance traveled.
 *
 * http://schema.org/TaxiService
 */
export declare const TaxiService: Class;
/**
 * TaxiStand
 *
 * A taxi stand.
 *
 * http://schema.org/TaxiStand
 */
export declare const TaxiStand: Class;
/**
 * TechArticle
 *
 * A technical article - Example: How-to (task) topics, step-by-step, procedural troubleshooting, specifications, etc.
 *
 * http://schema.org/TechArticle
 */
export declare const TechArticle: Class;
/**
 * TelevisionChannel
 *
 * A unique instance of a television BroadcastService on a CableOrSatelliteService lineup.
 *
 * http://schema.org/TelevisionChannel
 */
export declare const TelevisionChannel: Class;
/**
 * TelevisionStation
 *
 * A television station.
 *
 * http://schema.org/TelevisionStation
 */
export declare const TelevisionStation: Class;
/**
 * TennisComplex
 *
 * A tennis complex.
 *
 * http://schema.org/TennisComplex
 */
export declare const TennisComplex: Class;
/**
 * Text
 *
 * Data type: Text.
 *
 * http://schema.org/Text
 */
export declare const Text: string;
/**
 * TextDigitalDocument
 *
 * A file composed primarily of text.
 *
 * http://schema.org/TextDigitalDocument
 */
export declare const TextDigitalDocument: Class;
/**
 * TheaterEvent
 *
 * Event type: Theater performance.
 *
 * http://schema.org/TheaterEvent
 */
export declare const TheaterEvent: Class;
/**
 * TheaterGroup
 *
 * A theater group or company, for example, the Royal Shakespeare Company or Druid Theatre.
 *
 * http://schema.org/TheaterGroup
 */
export declare const TheaterGroup: Class;
/**
 * Thing
 *
 * The most generic type of item.
 *
 * http://schema.org/Thing
 */
export declare const Thing: Class;
/**
 * Ticket
 *
 * Used to describe a ticket to an event, a flight, a bus ride, etc.
 *
 * http://schema.org/Ticket
 */
export declare const Ticket: Class;
/**
 * TieAction
 *
 * The act of reaching a draw in a competitive activity.
 *
 * http://schema.org/TieAction
 */
export declare const TieAction: Class;
/**
 * Time
 *
 * A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see <a href="http://www.w3.org/TR/xmlschema-2/#time">XML schema for details</a>).
 *
 * http://schema.org/Time
 */
export declare const Time: string;
/**
 * TipAction
 *
 * The act of giving money voluntarily to a beneficiary in recognition of services rendered.
 *
 * http://schema.org/TipAction
 */
export declare const TipAction: Class;
/**
 * TireShop
 *
 * A tire shop.
 *
 * http://schema.org/TireShop
 */
export declare const TireShop: Class;
/**
 * TouristAttraction
 *
 * A tourist attraction.  In principle any Thing can be a <a class="localLink" href="http://schema.org/TouristAttraction">TouristAttraction</a>, from a <a class="localLink" href="http://schema.org/Mountain">Mountain</a> and <a class="localLink" href="http://schema.org/LandmarksOrHistoricalBuildings">LandmarksOrHistoricalBuildings</a> to a <a class="localLink" href="http://schema.org/LocalBusiness">LocalBusiness</a>.  This Type can be used on its own to describe a general <a class="localLink" href="http://schema.org/TouristAttraction">TouristAttraction</a>, or be used as an <a class="localLink" href="http://schema.org/additionalType">additionalType</a> to add tourist attraction properties to any other type.  (See examples below)
 *
 * http://schema.org/TouristAttraction
 */
export declare const TouristAttraction: Class;
/**
 * TouristInformationCenter
 *
 * A tourist information center.
 *
 * http://schema.org/TouristInformationCenter
 */
export declare const TouristInformationCenter: Class;
/**
 * ToyStore
 *
 * A toy store.
 *
 * http://schema.org/ToyStore
 */
export declare const ToyStore: Class;
/**
 * TrackAction
 *
 * An agent tracks an object for updates.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/FollowAction">FollowAction</a>: Unlike FollowAction, TrackAction refers to the interest on the location of innanimates objects.</li>
 * <li><a class="localLink" href="http://schema.org/SubscribeAction">SubscribeAction</a>: Unlike SubscribeAction, TrackAction refers to  the interest on the location of innanimate objects.</li>
 * </ul>
 *
 *
 * http://schema.org/TrackAction
 */
export declare const TrackAction: Class;
/**
 * TradeAction
 *
 * The act of participating in an exchange of goods and services for monetary compensation. An agent trades an object, product or service with a participant in exchange for a one time or periodic payment.
 *
 * http://schema.org/TradeAction
 */
export declare const TradeAction: Class;
/**
 * TrainReservation
 *
 * A reservation for train travel.<br/><br/>
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use <a class="localLink" href="http://schema.org/Offer">Offer</a>.
 *
 * http://schema.org/TrainReservation
 */
export declare const TrainReservation: Class;
/**
 * TrainStation
 *
 * A train station.
 *
 * http://schema.org/TrainStation
 */
export declare const TrainStation: Class;
/**
 * TrainTrip
 *
 * A trip on a commercial train line.
 *
 * http://schema.org/TrainTrip
 */
export declare const TrainTrip: Class;
/**
 * TransferAction
 *
 * The act of transferring/moving (abstract or concrete) animate or inanimate objects from one place to another.
 *
 * http://schema.org/TransferAction
 */
export declare const TransferAction: Class;
/**
 * TravelAction
 *
 * The act of traveling from an fromLocation to a destination by a specified mode of transport, optionally with participants.
 *
 * http://schema.org/TravelAction
 */
export declare const TravelAction: Class;
/**
 * TravelAgency
 *
 * A travel agency.
 *
 * http://schema.org/TravelAgency
 */
export declare const TravelAgency: Class;
/**
 * Trip
 *
 * A trip or journey. An itinerary of visits to one or more places.
 *
 * http://schema.org/Trip
 */
export declare const Trip: Class;
/**
 * TypeAndQuantityNode
 *
 * A structured value indicating the quantity, unit of measurement, and business function of goods included in a bundle offer.
 *
 * http://schema.org/TypeAndQuantityNode
 */
export declare const TypeAndQuantityNode: Class;
/**
 * URL
 *
 * Data type: URL.
 *
 * http://schema.org/URL
 */
export declare const URL: Class;
/**
 * UnRegisterAction
 *
 * The act of un-registering from a service.<br/><br/>
 *
 * Related actions:<br/><br/>
 *
 * <ul>
 * <li><a class="localLink" href="http://schema.org/RegisterAction">RegisterAction</a>: antonym of UnRegisterAction.</li>
 * <li><a class="localLink" href="http://schema.org/LeaveAction">LeaveAction</a>: Unlike LeaveAction, UnRegisterAction implies that you are unregistering from a service you werer previously registered, rather than leaving a team/group of people.</li>
 * </ul>
 *
 *
 * http://schema.org/UnRegisterAction
 */
export declare const UnRegisterAction: Class;
/**
 * UnitPriceSpecification
 *
 * The price asked for a given offer by the respective organization or person.
 *
 * http://schema.org/UnitPriceSpecification
 */
export declare const UnitPriceSpecification: Class;
/**
 * UpdateAction
 *
 * The act of managing by changing/editing the state of the object.
 *
 * http://schema.org/UpdateAction
 */
export declare const UpdateAction: Class;
/**
 * UseAction
 *
 * The act of applying an object to its intended purpose.
 *
 * http://schema.org/UseAction
 */
export declare const UseAction: Class;
/**
 * UserBlocks
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class="localLink" href="http://schema.org/Action">Action</a>-based vocabulary, alongside types such as <a class="localLink" href="http://schema.org/Comment">Comment</a>.
 *
 * http://schema.org/UserBlocks
 */
export declare const UserBlocks: Class;
/**
 * UserCheckins
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class="localLink" href="http://schema.org/Action">Action</a>-based vocabulary, alongside types such as <a class="localLink" href="http://schema.org/Comment">Comment</a>.
 *
 * http://schema.org/UserCheckins
 */
export declare const UserCheckins: Class;
/**
 * UserComments
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class="localLink" href="http://schema.org/Action">Action</a>-based vocabulary, alongside types such as <a class="localLink" href="http://schema.org/Comment">Comment</a>.
 *
 * http://schema.org/UserComments
 */
export declare const UserComments: Class;
/**
 * UserDownloads
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class="localLink" href="http://schema.org/Action">Action</a>-based vocabulary, alongside types such as <a class="localLink" href="http://schema.org/Comment">Comment</a>.
 *
 * http://schema.org/UserDownloads
 */
export declare const UserDownloads: Class;
/**
 * UserInteraction
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class="localLink" href="http://schema.org/Action">Action</a>-based vocabulary, alongside types such as <a class="localLink" href="http://schema.org/Comment">Comment</a>.
 *
 * http://schema.org/UserInteraction
 */
export declare const UserInteraction: Class;
/**
 * UserLikes
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class="localLink" href="http://schema.org/Action">Action</a>-based vocabulary, alongside types such as <a class="localLink" href="http://schema.org/Comment">Comment</a>.
 *
 * http://schema.org/UserLikes
 */
export declare const UserLikes: Class;
/**
 * UserPageVisits
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class="localLink" href="http://schema.org/Action">Action</a>-based vocabulary, alongside types such as <a class="localLink" href="http://schema.org/Comment">Comment</a>.
 *
 * http://schema.org/UserPageVisits
 */
export declare const UserPageVisits: Class;
/**
 * UserPlays
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class="localLink" href="http://schema.org/Action">Action</a>-based vocabulary, alongside types such as <a class="localLink" href="http://schema.org/Comment">Comment</a>.
 *
 * http://schema.org/UserPlays
 */
export declare const UserPlays: Class;
/**
 * UserPlusOnes
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class="localLink" href="http://schema.org/Action">Action</a>-based vocabulary, alongside types such as <a class="localLink" href="http://schema.org/Comment">Comment</a>.
 *
 * http://schema.org/UserPlusOnes
 */
export declare const UserPlusOnes: Class;
/**
 * UserTweets
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class="localLink" href="http://schema.org/Action">Action</a>-based vocabulary, alongside types such as <a class="localLink" href="http://schema.org/Comment">Comment</a>.
 *
 * http://schema.org/UserTweets
 */
export declare const UserTweets: Class;
/**
 * Vehicle
 *
 * A vehicle is a device that is designed or used to transport people or cargo over land, water, air, or through space.
 *
 * http://schema.org/Vehicle
 */
export declare const Vehicle: Class;
/**
 * VideoGallery
 *
 * Web page type: Video gallery page.
 *
 * http://schema.org/VideoGallery
 */
export declare const VideoGallery: Class;
/**
 * VideoGame
 *
 * A video game is an electronic game that involves human interaction with a user interface to generate visual feedback on a video device.
 *
 * http://schema.org/VideoGame
 */
export declare const VideoGame: Class;
/**
 * VideoGameClip
 *
 * A short segment/part of a video game.
 *
 * http://schema.org/VideoGameClip
 */
export declare const VideoGameClip: Class;
/**
 * VideoGameSeries
 *
 * A video game series.
 *
 * http://schema.org/VideoGameSeries
 */
export declare const VideoGameSeries: Class;
/**
 * VideoObject
 *
 * A video file.
 *
 * http://schema.org/VideoObject
 */
export declare const VideoObject: Class;
/**
 * ViewAction
 *
 * The act of consuming static visual content.
 *
 * http://schema.org/ViewAction
 */
export declare const ViewAction: Class;
/**
 * VisualArtsEvent
 *
 * Event type: Visual arts event.
 *
 * http://schema.org/VisualArtsEvent
 */
export declare const VisualArtsEvent: Class;
/**
 * VisualArtwork
 *
 * A work of art that is primarily visual in character.
 *
 * http://schema.org/VisualArtwork
 */
export declare const VisualArtwork: Class;
/**
 * Volcano
 *
 * A volcano, like Fuji san.
 *
 * http://schema.org/Volcano
 */
export declare const Volcano: Class;
/**
 * VoteAction
 *
 * The act of expressing a preference from a fixed/finite/structured set of choices/options.
 *
 * http://schema.org/VoteAction
 */
export declare const VoteAction: Class;
/**
 * WPAdBlock
 *
 * An advertising section of the page.
 *
 * http://schema.org/WPAdBlock
 */
export declare const WPAdBlock: Class;
/**
 * WPFooter
 *
 * The footer section of the page.
 *
 * http://schema.org/WPFooter
 */
export declare const WPFooter: Class;
/**
 * WPHeader
 *
 * The header section of the page.
 *
 * http://schema.org/WPHeader
 */
export declare const WPHeader: Class;
/**
 * WPSideBar
 *
 * A sidebar section of the page.
 *
 * http://schema.org/WPSideBar
 */
export declare const WPSideBar: Class;
/**
 * WantAction
 *
 * The act of expressing a desire about the object. An agent wants an object.
 *
 * http://schema.org/WantAction
 */
export declare const WantAction: Class;
/**
 * WarrantyPromise
 *
 * A structured value representing the duration and scope of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.
 *
 * http://schema.org/WarrantyPromise
 */
export declare const WarrantyPromise: Class;
/**
 * WarrantyScope
 *
 * A range of of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.<br/><br/>
 *
 * Commonly used values:<br/><br/>
 *
 * <ul>
 * <li>http://purl.org/goodrelations/v1#Labor-BringIn</li>
 * <li>http://purl.org/goodrelations/v1#PartsAndLabor-BringIn</li>
 * <li>http://purl.org/goodrelations/v1#PartsAndLabor-PickUp</li>
 * </ul>
 *
 *
 * http://schema.org/WarrantyScope
 */
export declare const WarrantyScope: Class;
/**
 * WatchAction
 *
 * The act of consuming dynamic/moving visual content.
 *
 * http://schema.org/WatchAction
 */
export declare const WatchAction: Class;
/**
 * Waterfall
 *
 * A waterfall, like Niagara.
 *
 * http://schema.org/Waterfall
 */
export declare const Waterfall: Class;
/**
 * WearAction
 *
 * The act of dressing oneself in clothing.
 *
 * http://schema.org/WearAction
 */
export declare const WearAction: Class;
/**
 * WebApplication
 *
 * Web applications.
 *
 * http://schema.org/WebApplication
 */
export declare const WebApplication: Class;
/**
 * WebPage
 *
 * A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
 *
 * http://schema.org/WebPage
 */
export declare const WebPage: Class;
/**
 * WebPageElement
 *
 * A web page element, like a table or an image.
 *
 * http://schema.org/WebPageElement
 */
export declare const WebPageElement: Class;
/**
 * WebSite
 *
 * A WebSite is a set of related web pages and other items typically served from a single web domain and accessible via URLs.
 *
 * http://schema.org/WebSite
 */
export declare const WebSite: Class;
/**
 * WholesaleStore
 *
 * A wholesale store.
 *
 * http://schema.org/WholesaleStore
 */
export declare const WholesaleStore: Class;
/**
 * WinAction
 *
 * The act of achieving victory in a competitive activity.
 *
 * http://schema.org/WinAction
 */
export declare const WinAction: Class;
/**
 * Winery
 *
 * A winery.
 *
 * http://schema.org/Winery
 */
export declare const Winery: Class;
/**
 * WorkersUnion
 *
 * A Workers Union (also known as a Labor Union, Labour Union, or Trade Union) is an organization that promotes the interests of its worker members by collectively bargaining with management, organizing, and political lobbying.
 *
 * http://schema.org/WorkersUnion
 */
export declare const WorkersUnion: Class;
/**
 * WriteAction
 *
 * The act of authoring written creative content.
 *
 * http://schema.org/WriteAction
 */
export declare const WriteAction: Class;
/**
 * Zoo
 *
 * A zoo.
 *
 * http://schema.org/Zoo
 */
export declare const Zoo: Class;
export {};
//# sourceMappingURL=schema.d.ts.map