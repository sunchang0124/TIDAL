declare type Property = string;
declare type Class = string;
/**
 * hasMemberRelation
 *
 * Indicates which predicate is used in membership triples, and that the membership triple pattern is < membership-constant-URI , object-of-hasMemberRelation, member-URI >.
 *
 * http://www.w3.org/ns/ldp#hasMemberRelation
 */
export declare const hasMemberRelation: Property;
/**
 * isMemmberOfRelation
 *
 * Indicates which predicate is used in membership triples, and that the membership triple pattern is < member-URI , object-of-isMemberOfRelation, membership-constant-URI >.
 *
 * http://www.w3.org/ns/ldp#isMemberOfRelation
 */
export declare const isMemberOfRelation: Property;
/**
 * membershipResource
 *
 * Indicates the membership-constant-URI in a membership triple.  Depending upon the membership triple pattern a container uses, as indicated by the presence of ldp:hasMemberRelation or ldp:isMemberOfRelation, the membership-constant-URI might occupy either the subject or object position in membership triples.
 *
 * http://www.w3.org/ns/ldp#membershipResource
 */
export declare const membershipResource: Property;
/**
 * insertedContentRelation
 *
 * Indicates which triple in a creation request should be used as the member-URI value in the membership triple added when the creation request is successful.
 *
 * http://www.w3.org/ns/ldp#insertedContentRelation
 */
export declare const insertedContentRelation: Property;
/**
 * member
 *
 * LDP servers should use this predicate as the membership predicate if there is no obvious predicate from an application vocabulary to use.
 *
 * http://www.w3.org/ns/ldp#member
 */
export declare const member: Property;
/**
 * contains
 *
 * Links a container with resources created through the container.
 *
 * http://www.w3.org/ns/ldp#contains
 */
export declare const contains: Property;
/**
 * constrainedBy
 *
 * Links a resource with constraints that the server requires requests like creation and update to conform to.
 *
 * http://www.w3.org/ns/ldp#constrainedBy
 */
export declare const constrainedBy: Property;
/**
 * pageSortCriteria
 *
 * Link to the list of sorting criteria used by the server in a representation.  Typically used on Link response headers as an extension link relation URI in the rel= parameter.
 *
 * http://www.w3.org/ns/ldp#pageSortCriteria
 */
export declare const pageSortCriteria: Property;
/**
 * pageSortPredicate
 *
 * Predicate used to specify the order of the members across a page sequence's in-sequence page resources; it asserts nothing about the order of members in the representation of a single page.
 *
 * http://www.w3.org/ns/ldp#pageSortPredicate
 */
export declare const pageSortPredicate: Property;
/**
 * pageSortOrder
 *
 * The ascending/descending/etc order used to order the members across pages in a page sequence.
 *
 * http://www.w3.org/ns/ldp#pageSortOrder
 */
export declare const pageSortOrder: Property;
/**
 * pageSortCollation
 *
 * The collation used to order the members across pages in a page sequence when comparing strings.
 *
 * http://www.w3.org/ns/ldp#pageSortCollation
 */
export declare const pageSortCollation: Property;
/**
 * Page
 *
 * Link to a page sequence resource, as defined by LDP Paging.  Typically used to communicate the sorting criteria used to allocate LDPC members to pages.
 *
 * http://www.w3.org/ns/ldp#pageSequence
 */
export declare const pageSequence: Property;
/**
 * inbox
 *
 * Links a resource to a container where notifications for the resource can be created and discovered.
 *
 * http://www.w3.org/ns/ldp#inbox
 */
export declare const inbox: Property;
/**
 * Resource
 *
 * A HTTP-addressable resource whose lifecycle is managed by a LDP server.
 *
 * http://www.w3.org/ns/ldp#Resource
 */
export declare const Resource: Class;
/**
 * RDFSource
 *
 * A Linked Data Platform Resource (LDPR) whose state is represented as RDF.
 *
 * http://www.w3.org/ns/ldp#RDFSource
 */
export declare const RDFSource: Class;
/**
 * NonRDFSource
 *
 * A Linked Data Platform Resource (LDPR) whose state is NOT represented as RDF.
 *
 * http://www.w3.org/ns/ldp#NonRDFSource
 */
export declare const NonRDFSource: Class;
/**
 * Container
 *
 * A Linked Data Platform RDF Source (LDP-RS) that also conforms to additional patterns and conventions for managing membership. Readers should refer to the specification defining this ontology for the list of behaviors associated with it.
 *
 * http://www.w3.org/ns/ldp#Container
 */
export declare const Container: Class;
/**
 * BasicContainer
 *
 * An LDPC that uses a predefined predicate to simply link to its contained resources.
 *
 * http://www.w3.org/ns/ldp#BasicContainer
 */
export declare const BasicContainer: Class;
/**
 * DirectContainer
 *
 * An LDPC that is similar to a LDP-DC but it allows an indirection with the ability to list as member a resource, such as a URI representing a real-world object, that is different from the resource that is created.
 *
 * http://www.w3.org/ns/ldp#DirectContainer
 */
export declare const DirectContainer: Class;
/**
 * IndirectContainer
 *
 * An LDPC that has the flexibility of choosing what form the membership triples take.
 *
 * http://www.w3.org/ns/ldp#IndirectContainer
 */
export declare const IndirectContainer: Class;
/**
 * PageSortCriterion
 *
 * Element in the list of sorting criteria used by the server to assign container members to pages.
 *
 * http://www.w3.org/ns/ldp#PageSortCriterion
 */
export declare const PageSortCriterion: Class;
/**
 * Page
 *
 * URI signifying that the resource is an in-sequence page resource, as defined by LDP Paging.  Typically used on Link rel='type' response headers.
 *
 * http://www.w3.org/ns/ldp#Page
 */
export declare const Page: Class;
export {};
//# sourceMappingURL=ldp.d.ts.map