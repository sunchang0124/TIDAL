declare type OwlClass = string;
declare type OwlObjectProperty = string;
declare type OwlDatatypeProperty = string;
/**
 * is in scheme
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#inScheme
 */
export declare const inScheme: OwlObjectProperty;
/**
 * has top concept
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#hasTopConcept
 */
export declare const hasTopConcept: OwlObjectProperty;
/**
 * is top concept in scheme
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#topConceptOf
 */
export declare const topConceptOf: OwlObjectProperty;
/**
 * preferred label
 *
 * A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag.
 *
 * http://www.w3.org/2004/02/skos/core#prefLabel
 */
export declare const prefLabel: string;
/**
 * alternative label
 *
 * The range of skos:altLabel is the class of RDF plain literals.
 *
 * http://www.w3.org/2004/02/skos/core#altLabel
 */
export declare const altLabel: string;
/**
 * hidden label
 *
 * The range of skos:hiddenLabel is the class of RDF plain literals.
 *
 * http://www.w3.org/2004/02/skos/core#hiddenLabel
 */
export declare const hiddenLabel: string;
/**
 * notation
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#notation
 */
export declare const notation: OwlDatatypeProperty;
/**
 * note
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#note
 */
export declare const note: string;
/**
 * change note
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#changeNote
 */
export declare const changeNote: string;
/**
 * definition
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#definition
 */
export declare const definition: string;
/**
 * editorial note
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#editorialNote
 */
export declare const editorialNote: string;
/**
 * example
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#example
 */
export declare const example: string;
/**
 * history note
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#historyNote
 */
export declare const historyNote: string;
/**
 * scope note
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#scopeNote
 */
export declare const scopeNote: string;
/**
 * is in semantic relation with
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#semanticRelation
 */
export declare const semanticRelation: OwlObjectProperty;
/**
 * has broader
 *
 * Broader concepts are typically rendered as parents in a concept hierarchy (tree).
 *
 * http://www.w3.org/2004/02/skos/core#broader
 */
export declare const broader: OwlObjectProperty;
/**
 * has narrower
 *
 * Narrower concepts are typically rendered as children in a concept hierarchy (tree).
 *
 * http://www.w3.org/2004/02/skos/core#narrower
 */
export declare const narrower: OwlObjectProperty;
/**
 * has related
 *
 * skos:related is disjoint with skos:broaderTransitive
 *
 * http://www.w3.org/2004/02/skos/core#related
 */
export declare const related: OwlObjectProperty;
/**
 * has broader transitive
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#broaderTransitive
 */
export declare const broaderTransitive: OwlObjectProperty;
/**
 * has narrower transitive
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#narrowerTransitive
 */
export declare const narrowerTransitive: OwlObjectProperty;
/**
 * has member
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#member
 */
export declare const member: OwlObjectProperty;
/**
 * has member list
 *
 * For any resource, every item in the list given as the value of the
 *       skos:memberList property is also a value of the skos:member property.
 *
 * http://www.w3.org/2004/02/skos/core#memberList
 */
export declare const memberList: OwlObjectProperty;
/**
 * is in mapping relation with
 *
 * These concept mapping relations mirror semantic relations, and the data model defined below is similar (with the exception of skos:exactMatch) to the data model defined for semantic relations. A distinct vocabulary is provided for concept mapping relations, to provide a convenient way to differentiate links within a concept scheme from links between concept schemes. However, this pattern of usage is not a formal requirement of the SKOS data model, and relies on informal definitions of best practice.
 *
 * http://www.w3.org/2004/02/skos/core#mappingRelation
 */
export declare const mappingRelation: OwlObjectProperty;
/**
 * has broader match
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#broadMatch
 */
export declare const broadMatch: OwlObjectProperty;
/**
 * has narrower match
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#narrowMatch
 */
export declare const narrowMatch: OwlObjectProperty;
/**
 * has related match
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#relatedMatch
 */
export declare const relatedMatch: OwlObjectProperty;
/**
 * has exact match
 *
 * skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch.
 *
 * http://www.w3.org/2004/02/skos/core#exactMatch
 */
export declare const exactMatch: OwlObjectProperty;
/**
 * has close match
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#closeMatch
 */
export declare const closeMatch: OwlObjectProperty;
/**
 * Concept
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#Concept
 */
export declare const Concept: OwlClass;
/**
 * Concept Scheme
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#ConceptScheme
 */
export declare const ConceptScheme: OwlClass;
/**
 * Collection
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#Collection
 */
export declare const Collection: OwlClass;
/**
 * Ordered Collection
 *
 *
 *
 * http://www.w3.org/2004/02/skos/core#OrderedCollection
 */
export declare const OrderedCollection: OwlClass;
export {};
//# sourceMappingURL=skos.d.ts.map