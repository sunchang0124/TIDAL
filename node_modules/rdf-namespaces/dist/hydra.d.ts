declare type Property = string;
declare type Datatype = string;
declare type HydraResource = string;
declare type HydraClass = string;
declare type HydraLink = string;
declare type HydraTemplatedLink = string;
declare type HydraVariableRepresentation = string;
/**
 * property
 *
 * A property
 *
 * http://www.w3.org/ns/hydra/core#property
 */
export declare const property: Property;
/**
 * required
 *
 * True if the property is required, false otherwise.
 *
 * http://www.w3.org/ns/hydra/core#required
 */
export declare const required: Property;
/**
 * readable
 *
 * True if the client can retrieve the property's value, false otherwise.
 *
 * http://www.w3.org/ns/hydra/core#readable
 */
export declare const readable: Property;
/**
 * writeable
 *
 * True if the client can change the property's value, false otherwise.
 *
 * http://www.w3.org/ns/hydra/core#writeable
 */
export declare const writeable: Property;
/**
 * method
 *
 * The HTTP method.
 *
 * http://www.w3.org/ns/hydra/core#method
 */
export declare const method: Property;
/**
 * status code
 *
 * The HTTP status code
 *
 * http://www.w3.org/ns/hydra/core#statusCode
 */
export declare const statusCode: Property;
/**
 * title
 *
 * A title, often used along with a description.
 *
 * http://www.w3.org/ns/hydra/core#title
 */
export declare const title: Property;
/**
 * description
 *
 * A description.
 *
 * http://www.w3.org/ns/hydra/core#description
 */
export declare const description: Property;
/**
 * total items
 *
 * The total number of items referenced by a collection.
 *
 * http://www.w3.org/ns/hydra/core#totalItems
 */
export declare const totalItems: Property;
/**
 * freetext query
 *
 * A property representing a freetext query.
 *
 * http://www.w3.org/ns/hydra/core#freetextQuery
 */
export declare const freetextQuery: Property;
/**
 * template
 *
 * A templated string with placeholders. The literal's datatype indicates the template syntax; if not specified, hydra:Rfc6570Template is assumed.
 *
 * http://www.w3.org/ns/hydra/core#template
 */
export declare const template: Property;
/**
 * variable representation
 *
 * The representation format to use when expanding the IRI template.
 *
 * http://www.w3.org/ns/hydra/core#variableRepresentation
 */
export declare const variableRepresentation: Property;
/**
 * mapping
 *
 * A variable-to-property mapping of the IRI template.
 *
 * http://www.w3.org/ns/hydra/core#mapping
 */
export declare const mapping: Property;
/**
 * variable
 *
 * An IRI template variable
 *
 * http://www.w3.org/ns/hydra/core#variable
 */
export declare const variable: Property;
/**
 * skip
 *
 * Instructs to skip N elements of the set.
 *
 * http://www.w3.org/ns/hydra/core#offset
 */
export declare const offset: Property;
/**
 * take
 *
 * Instructs to limit set only to N elements.
 *
 * http://www.w3.org/ns/hydra/core#limit
 */
export declare const limit: Property;
/**
 * page index
 *
 * Instructs to provide a specific page of the collection at a given index.
 *
 * http://www.w3.org/ns/hydra/core#pageIndex
 */
export declare const pageIndex: Property;
/**
 * page reference
 *
 * Instructs to provide a specific page reference of the collection.
 *
 * http://www.w3.org/ns/hydra/core#pageReference
 */
export declare const pageReference: Property;
/**
 * returns header
 *
 * Name of the header returned by the operation.
 *
 * http://www.w3.org/ns/hydra/core#returnsHeader
 */
export declare const returnsHeader: Property;
/**
 * expects header
 *
 * Specification of the header expected by the operation.
 *
 * http://www.w3.org/ns/hydra/core#expectsHeader
 */
export declare const expectsHeader: Property;
/**
 * Hydra Class
 *
 * The class of Hydra classes. Hydra classes and their instances are dereferenceable resources.
 *
 * http://www.w3.org/ns/hydra/core#Class
 */
export declare const Class: HydraResource;
/**
 * RFC6570 IRI template
 *
 * An IRI template as defined by RFC6570.
 *
 * http://www.w3.org/ns/hydra/core#Rfc6570Template
 */
export declare const Rfc6570Template: Datatype;
/**
 * Hydra Resource
 *
 * The class of dereferenceable resources.
 *
 * http://www.w3.org/ns/hydra/core#Resource
 */
export declare const Resource: HydraClass;
/**
 * Link
 *
 * The class of properties representing links.
 *
 * http://www.w3.org/ns/hydra/core#Link
 */
export declare const Link: HydraClass;
/**
 * ApiDocumentation
 *
 * The Hydra API documentation class
 *
 * http://www.w3.org/ns/hydra/core#ApiDocumentation
 */
export declare const ApiDocumentation: HydraClass;
/**
 * Operation
 *
 * An operation.
 *
 * http://www.w3.org/ns/hydra/core#Operation
 */
export declare const Operation: HydraClass;
/**
 * Status code description
 *
 * Additional information about a status code that might be returned.
 *
 * http://www.w3.org/ns/hydra/core#Status
 */
export declare const Status: HydraClass;
/**
 * Supported Property
 *
 * A property known to be supported by a Hydra class.
 *
 * http://www.w3.org/ns/hydra/core#SupportedProperty
 */
export declare const SupportedProperty: HydraClass;
/**
 * IriTemplateMapping
 *
 * A mapping from an IRI template variable to a property.
 *
 * http://www.w3.org/ns/hydra/core#IriTemplateMapping
 */
export declare const IriTemplateMapping: HydraClass;
/**
 * Error
 *
 * A runtime error, used to report information beyond the returned status code.
 *
 * http://www.w3.org/ns/hydra/core#Error
 */
export declare const Error: HydraClass;
/**
 * Collection
 *
 * A collection holding references to a number of related resources.
 *
 * http://www.w3.org/ns/hydra/core#Collection
 */
export declare const Collection: HydraClass;
/**
 * PartialCollectionView
 *
 * A PartialCollectionView describes a partial view of a Collection. Multiple PartialCollectionViews can be connected with the the next/previous properties to allow a client to retrieve all members of the collection.
 *
 * http://www.w3.org/ns/hydra/core#PartialCollectionView
 */
export declare const PartialCollectionView: HydraClass;
/**
 * IRI Template
 *
 * The class of IRI templates.
 *
 * http://www.w3.org/ns/hydra/core#IriTemplate
 */
export declare const IriTemplate: HydraClass;
/**
 * Templated Link
 *
 * A templated link.
 *
 * http://www.w3.org/ns/hydra/core#TemplatedLink
 */
export declare const TemplatedLink: HydraClass;
/**
 * VariableRepresentation
 *
 * A representation specifies how to serialize variable values into strings.
 *
 * http://www.w3.org/ns/hydra/core#VariableRepresentation
 */
export declare const VariableRepresentation: HydraClass;
/**
 * apiDocumentation
 *
 * A link to the API documentation
 *
 * http://www.w3.org/ns/hydra/core#apiDocumentation
 */
export declare const apiDocumentation: HydraLink;
/**
 * entrypoint
 *
 * A link to main entry point of the Web API
 *
 * http://www.w3.org/ns/hydra/core#entrypoint
 */
export declare const entrypoint: HydraLink;
/**
 * supported classes
 *
 * A class known to be supported by the Web API
 *
 * http://www.w3.org/ns/hydra/core#supportedClass
 */
export declare const supportedClass: HydraLink;
/**
 * possible status
 *
 * A status that might be returned by the Web API (other statuses should be expected and properly handled as well)
 *
 * http://www.w3.org/ns/hydra/core#possibleStatus
 */
export declare const possibleStatus: HydraLink;
/**
 * supported properties
 *
 * The properties known to be supported by a Hydra class
 *
 * http://www.w3.org/ns/hydra/core#supportedProperty
 */
export declare const supportedProperty: HydraLink;
/**
 * supported operation
 *
 * An operation supported by instances of the specific Hydra class or the target of the Hydra link
 *
 * http://www.w3.org/ns/hydra/core#supportedOperation
 */
export declare const supportedOperation: HydraLink;
/**
 * operation
 *
 * An operation supported by the Hydra resource
 *
 * http://www.w3.org/ns/hydra/core#operation
 */
export declare const operation: HydraLink;
/**
 * expects
 *
 * The information expected by the Web API.
 *
 * http://www.w3.org/ns/hydra/core#expects
 */
export declare const expects: HydraLink;
/**
 * returns
 *
 * The information returned by the Web API on success
 *
 * http://www.w3.org/ns/hydra/core#returns
 */
export declare const returns: HydraLink;
/**
 * collection
 *
 * Collections somehow related to this resource.
 *
 * http://www.w3.org/ns/hydra/core#collection
 */
export declare const collection: HydraLink;
/**
 * member
 *
 * A member of the collection
 *
 * http://www.w3.org/ns/hydra/core#member
 */
export declare const member: HydraLink;
/**
 * view
 *
 * A specific view of a resource.
 *
 * http://www.w3.org/ns/hydra/core#view
 */
export declare const view: HydraLink;
/**
 * first
 *
 * The first resource of an interlinked set of resources.
 *
 * http://www.w3.org/ns/hydra/core#first
 */
export declare const first: HydraLink;
/**
 * last
 *
 * The last resource of an interlinked set of resources.
 *
 * http://www.w3.org/ns/hydra/core#last
 */
export declare const last: HydraLink;
/**
 * next
 *
 * The resource following the current instance in an interlinked set of resources.
 *
 * http://www.w3.org/ns/hydra/core#next
 */
export declare const next: HydraLink;
/**
 * previous
 *
 * The resource preceding the current instance in an interlinked set of resources.
 *
 * http://www.w3.org/ns/hydra/core#previous
 */
export declare const previous: HydraLink;
/**
 * search
 *
 * A IRI template that can be used to query a collection.
 *
 * http://www.w3.org/ns/hydra/core#search
 */
export declare const search: HydraTemplatedLink;
/**
 * BasicRepresentation
 *
 * A representation that serializes just the lexical form of a variable value, but omits language and type information.
 *
 * http://www.w3.org/ns/hydra/core#BasicRepresentation
 */
export declare const BasicRepresentation: HydraVariableRepresentation;
/**
 * ExplicitRepresentation
 *
 * A representation that serializes a variable value including its language and type information and thus differentiating between IRIs and literals.
 *
 * http://www.w3.org/ns/hydra/core#ExplicitRepresentation
 */
export declare const ExplicitRepresentation: HydraVariableRepresentation;
export {};
//# sourceMappingURL=hydra.d.ts.map