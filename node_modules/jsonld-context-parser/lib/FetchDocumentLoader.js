"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("isomorphic-fetch");
const ErrorCoded_1 = require("./ErrorCoded");
const http_link_header_1 = require("http-link-header");
const relative_to_absolute_iri_1 = require("relative-to-absolute-iri");
/**
 * Loads documents via the fetch API.
 */
class FetchDocumentLoader {
    constructor(fetcher) {
        this.fetcher = fetcher || fetch;
    }
    load(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.fetcher(url, { headers: new Headers({ accept: 'application/ld+json' }) });
            if (response.ok && response.headers) {
                const mediaType = response.headers.get('Content-Type');
                if (mediaType === 'application/ld+json') {
                    // Return JSON-LD if proper content type was returned
                    return (yield response.json());
                }
                else {
                    // Check for alternate link for a non-JSON-LD response
                    if (response.headers.has('Link')) {
                        let alternateUrl;
                        response.headers.forEach((value, key) => {
                            if (key === 'link') {
                                const linkHeader = http_link_header_1.parse(value);
                                for (const link of linkHeader.get('type', 'application/ld+json')) {
                                    if (link.rel === 'alternate') {
                                        if (alternateUrl) {
                                            throw new Error('Multiple JSON-LD alternate links were found on ' + url);
                                        }
                                        alternateUrl = relative_to_absolute_iri_1.resolve(link.uri, url);
                                    }
                                }
                            }
                        });
                        if (alternateUrl) {
                            return this.load(alternateUrl);
                        }
                    }
                    throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, ErrorCoded_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);
                }
            }
            else {
                throw new Error(response.statusText || `Status code: ${response.status}`);
            }
        });
    }
}
exports.FetchDocumentLoader = FetchDocumentLoader;
//# sourceMappingURL=FetchDocumentLoader.js.map